// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: api/e2/e2.proto

package e2

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Definition of all message types in E2 interface
type E2MessageType int32

const (
	E2MessageType_E2_UNKNOWNMESSAGE          E2MessageType = 0
	E2MessageType_E2_CELLCONFIGREQUEST       E2MessageType = 1
	E2MessageType_E2_CELLCONFIGREPORT        E2MessageType = 2
	E2MessageType_E2_UEADMISSIONREQUEST      E2MessageType = 3
	E2MessageType_E2_UEADMISSIONRESPONSE     E2MessageType = 4
	E2MessageType_E2_UEADMISSIONSTATUS       E2MessageType = 5
	E2MessageType_E2_UECONTEXTUPDATE         E2MessageType = 6
	E2MessageType_E2_UERECONFIGIND           E2MessageType = 7
	E2MessageType_E2_UERELEASEIND            E2MessageType = 8
	E2MessageType_E2_BEARERADMISSIONREQUEST  E2MessageType = 9
	E2MessageType_E2_BEARERADMISSIONRESPONSE E2MessageType = 10
	E2MessageType_E2_BEARERADMISSIONSTATUS   E2MessageType = 11
	E2MessageType_E2_BEARERRELEASEIND        E2MessageType = 12
	E2MessageType_E2_HOREQUEST               E2MessageType = 13
	E2MessageType_E2_HOFAILURE               E2MessageType = 14
	E2MessageType_E2_HOCOMPLETE              E2MessageType = 15
	E2MessageType_E2_RXSIGMEASREPORT         E2MessageType = 16
	E2MessageType_E2_L2MEASCONFIG            E2MessageType = 17
	E2MessageType_E2_RADIOMEASREPORTPERUE    E2MessageType = 18
	E2MessageType_E2_RADIOMEASREPORTPERCELL  E2MessageType = 19
	E2MessageType_E2_SCHEDMEASREPORTPERUE    E2MessageType = 20
	E2MessageType_E2_SCHEDMEASREPORTPERCELL  E2MessageType = 21
	E2MessageType_E2_PDCPMEASREPORTPERUE     E2MessageType = 22
	E2MessageType_E2_UECAPABILITYINFO        E2MessageType = 23
	E2MessageType_E2_UECAPABILITYENQUIRY     E2MessageType = 24
	E2MessageType_E2_SCELLADD                E2MessageType = 25
	E2MessageType_E2_SCELLADDSTATUS          E2MessageType = 26
	E2MessageType_E2_SCELLDELETE             E2MessageType = 27
	E2MessageType_E2_RRMCONFIG               E2MessageType = 28
	E2MessageType_E2_RRMCONFIGSTATUS         E2MessageType = 29
	E2MessageType_E2_SENBADD                 E2MessageType = 30
	E2MessageType_E2_SENBADDSTATUS           E2MessageType = 31
	E2MessageType_E2_SENBDELETE              E2MessageType = 32
	E2MessageType_E2_TRAFFICSPLITCONFIG      E2MessageType = 33
	E2MessageType_E2_HOCAUSE                 E2MessageType = 34
	E2MessageType_E2_RRCMEASCONFIG           E2MessageType = 35
)

var E2MessageType_name = map[int32]string{
	0:  "E2_UNKNOWNMESSAGE",
	1:  "E2_CELLCONFIGREQUEST",
	2:  "E2_CELLCONFIGREPORT",
	3:  "E2_UEADMISSIONREQUEST",
	4:  "E2_UEADMISSIONRESPONSE",
	5:  "E2_UEADMISSIONSTATUS",
	6:  "E2_UECONTEXTUPDATE",
	7:  "E2_UERECONFIGIND",
	8:  "E2_UERELEASEIND",
	9:  "E2_BEARERADMISSIONREQUEST",
	10: "E2_BEARERADMISSIONRESPONSE",
	11: "E2_BEARERADMISSIONSTATUS",
	12: "E2_BEARERRELEASEIND",
	13: "E2_HOREQUEST",
	14: "E2_HOFAILURE",
	15: "E2_HOCOMPLETE",
	16: "E2_RXSIGMEASREPORT",
	17: "E2_L2MEASCONFIG",
	18: "E2_RADIOMEASREPORTPERUE",
	19: "E2_RADIOMEASREPORTPERCELL",
	20: "E2_SCHEDMEASREPORTPERUE",
	21: "E2_SCHEDMEASREPORTPERCELL",
	22: "E2_PDCPMEASREPORTPERUE",
	23: "E2_UECAPABILITYINFO",
	24: "E2_UECAPABILITYENQUIRY",
	25: "E2_SCELLADD",
	26: "E2_SCELLADDSTATUS",
	27: "E2_SCELLDELETE",
	28: "E2_RRMCONFIG",
	29: "E2_RRMCONFIGSTATUS",
	30: "E2_SENBADD",
	31: "E2_SENBADDSTATUS",
	32: "E2_SENBDELETE",
	33: "E2_TRAFFICSPLITCONFIG",
	34: "E2_HOCAUSE",
	35: "E2_RRCMEASCONFIG",
}

var E2MessageType_value = map[string]int32{
	"E2_UNKNOWNMESSAGE":          0,
	"E2_CELLCONFIGREQUEST":       1,
	"E2_CELLCONFIGREPORT":        2,
	"E2_UEADMISSIONREQUEST":      3,
	"E2_UEADMISSIONRESPONSE":     4,
	"E2_UEADMISSIONSTATUS":       5,
	"E2_UECONTEXTUPDATE":         6,
	"E2_UERECONFIGIND":           7,
	"E2_UERELEASEIND":            8,
	"E2_BEARERADMISSIONREQUEST":  9,
	"E2_BEARERADMISSIONRESPONSE": 10,
	"E2_BEARERADMISSIONSTATUS":   11,
	"E2_BEARERRELEASEIND":        12,
	"E2_HOREQUEST":               13,
	"E2_HOFAILURE":               14,
	"E2_HOCOMPLETE":              15,
	"E2_RXSIGMEASREPORT":         16,
	"E2_L2MEASCONFIG":            17,
	"E2_RADIOMEASREPORTPERUE":    18,
	"E2_RADIOMEASREPORTPERCELL":  19,
	"E2_SCHEDMEASREPORTPERUE":    20,
	"E2_SCHEDMEASREPORTPERCELL":  21,
	"E2_PDCPMEASREPORTPERUE":     22,
	"E2_UECAPABILITYINFO":        23,
	"E2_UECAPABILITYENQUIRY":     24,
	"E2_SCELLADD":                25,
	"E2_SCELLADDSTATUS":          26,
	"E2_SCELLDELETE":             27,
	"E2_RRMCONFIG":               28,
	"E2_RRMCONFIGSTATUS":         29,
	"E2_SENBADD":                 30,
	"E2_SENBADDSTATUS":           31,
	"E2_SENBDELETE":              32,
	"E2_TRAFFICSPLITCONFIG":      33,
	"E2_HOCAUSE":                 34,
	"E2_RRCMEASCONFIG":           35,
}

func (x E2MessageType) String() string {
	return proto.EnumName(E2MessageType_name, int32(x))
}

func (E2MessageType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_01d4ac3ab6ba660b, []int{0}
}

type E2AdmEstCause int32

const (
	E2AdmEstCause_E2_EMERGENCY     E2AdmEstCause = 0
	E2AdmEstCause_E2_HIGHHP_ACCESS E2AdmEstCause = 1
	E2AdmEstCause_E2_MT_ACCESS     E2AdmEstCause = 2
	E2AdmEstCause_E2_MO_SIGNALLING E2AdmEstCause = 3
	E2AdmEstCause_E2_MO_DATA       E2AdmEstCause = 4
)

var E2AdmEstCause_name = map[int32]string{
	0: "E2_EMERGENCY",
	1: "E2_HIGHHP_ACCESS",
	2: "E2_MT_ACCESS",
	3: "E2_MO_SIGNALLING",
	4: "E2_MO_DATA",
}

var E2AdmEstCause_value = map[string]int32{
	"E2_EMERGENCY":     0,
	"E2_HIGHHP_ACCESS": 1,
	"E2_MT_ACCESS":     2,
	"E2_MO_SIGNALLING": 3,
	"E2_MO_DATA":       4,
}

func (x E2AdmEstCause) String() string {
	return proto.EnumName(E2AdmEstCause_name, int32(x))
}

func (E2AdmEstCause) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_01d4ac3ab6ba660b, []int{1}
}

type E2SuccessOrFailure int32

const (
	E2SuccessOrFailure_E2_SUCCESS E2SuccessOrFailure = 0
	E2SuccessOrFailure_E2_FAILURE E2SuccessOrFailure = 1
)

var E2SuccessOrFailure_name = map[int32]string{
	0: "E2_SUCCESS",
	1: "E2_FAILURE",
}

var E2SuccessOrFailure_value = map[string]int32{
	"E2_SUCCESS": 0,
	"E2_FAILURE": 1,
}

func (x E2SuccessOrFailure) String() string {
	return proto.EnumName(E2SuccessOrFailure_name, int32(x))
}

func (E2SuccessOrFailure) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_01d4ac3ab6ba660b, []int{2}
}

type E2ReconfigCause int32

const (
	E2ReconfigCause_E2_RECONFIG_RLF     E2ReconfigCause = 0
	E2ReconfigCause_E2_RECONFIG_HO_FAIL E2ReconfigCause = 1
	E2ReconfigCause_E2_RECONFIG_OTHERS  E2ReconfigCause = 2
)

var E2ReconfigCause_name = map[int32]string{
	0: "E2_RECONFIG_RLF",
	1: "E2_RECONFIG_HO_FAIL",
	2: "E2_RECONFIG_OTHERS",
}

var E2ReconfigCause_value = map[string]int32{
	"E2_RECONFIG_RLF":     0,
	"E2_RECONFIG_HO_FAIL": 1,
	"E2_RECONFIG_OTHERS":  2,
}

func (x E2ReconfigCause) String() string {
	return proto.EnumName(E2ReconfigCause_name, int32(x))
}

func (E2ReconfigCause) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_01d4ac3ab6ba660b, []int{3}
}

type E2ReleaseCause int32

const (
	E2ReleaseCause_E2_RELEASE_INACTIVITY E2ReleaseCause = 0
	E2ReleaseCause_E2_RELEASE_RLF        E2ReleaseCause = 1
	E2ReleaseCause_E2_RELEASE_OTHERS     E2ReleaseCause = 2
)

var E2ReleaseCause_name = map[int32]string{
	0: "E2_RELEASE_INACTIVITY",
	1: "E2_RELEASE_RLF",
	2: "E2_RELEASE_OTHERS",
}

var E2ReleaseCause_value = map[string]int32{
	"E2_RELEASE_INACTIVITY": 0,
	"E2_RELEASE_RLF":        1,
	"E2_RELEASE_OTHERS":     2,
}

func (x E2ReleaseCause) String() string {
	return proto.EnumName(E2ReleaseCause_name, int32(x))
}

func (E2ReleaseCause) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_01d4ac3ab6ba660b, []int{4}
}

type E2ERABDirection int32

const (
	E2ERABDirection_E2_DL   E2ERABDirection = 0
	E2ERABDirection_E2_UL   E2ERABDirection = 1
	E2ERABDirection_E2_BOTH E2ERABDirection = 2
)

var E2ERABDirection_name = map[int32]string{
	0: "E2_DL",
	1: "E2_UL",
	2: "E2_BOTH",
}

var E2ERABDirection_value = map[string]int32{
	"E2_DL":   0,
	"E2_UL":   1,
	"E2_BOTH": 2,
}

func (x E2ERABDirection) String() string {
	return proto.EnumName(E2ERABDirection_name, int32(x))
}

func (E2ERABDirection) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_01d4ac3ab6ba660b, []int{5}
}

type E2ERABType int32

const (
	E2ERABType_E2_ERAB_DEFAULT   E2ERABType = 0
	E2ERABType_E2_ERAB_DEDICATED E2ERABType = 1
)

var E2ERABType_name = map[int32]string{
	0: "E2_ERAB_DEFAULT",
	1: "E2_ERAB_DEDICATED",
}

var E2ERABType_value = map[string]int32{
	"E2_ERAB_DEFAULT":   0,
	"E2_ERAB_DEDICATED": 1,
}

func (x E2ERABType) String() string {
	return proto.EnumName(E2ERABType_name, int32(x))
}

func (E2ERABType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_01d4ac3ab6ba660b, []int{6}
}

type E2ReportParamPR int32

const (
	E2ReportParamPR_E2_REPORTPARAM_PR_NOTHING   E2ReportParamPR = 0
	E2ReportParamPR_E2_REPORTPARAM_PR_PER_PARAM E2ReportParamPR = 1
	E2ReportParamPR_E2_REPORTPARAM_PR_A1PARAM   E2ReportParamPR = 2
	E2ReportParamPR_E2_REPORTPARAM_PR_A2PARAM   E2ReportParamPR = 3
	E2ReportParamPR_E2_REPORTPARAM_PR_A3PARAM   E2ReportParamPR = 4
	E2ReportParamPR_E2_REPORTPARAM_PR_A4PARAM   E2ReportParamPR = 5
	E2ReportParamPR_E2_REPORTPARAM_PR_A5PARAM   E2ReportParamPR = 6
	E2ReportParamPR_E2_REPORTPARAM_PR_A6PARAM   E2ReportParamPR = 7
)

var E2ReportParamPR_name = map[int32]string{
	0: "E2_REPORTPARAM_PR_NOTHING",
	1: "E2_REPORTPARAM_PR_PER_PARAM",
	2: "E2_REPORTPARAM_PR_A1PARAM",
	3: "E2_REPORTPARAM_PR_A2PARAM",
	4: "E2_REPORTPARAM_PR_A3PARAM",
	5: "E2_REPORTPARAM_PR_A4PARAM",
	6: "E2_REPORTPARAM_PR_A5PARAM",
	7: "E2_REPORTPARAM_PR_A6PARAM",
}

var E2ReportParamPR_value = map[string]int32{
	"E2_REPORTPARAM_PR_NOTHING":   0,
	"E2_REPORTPARAM_PR_PER_PARAM": 1,
	"E2_REPORTPARAM_PR_A1PARAM":   2,
	"E2_REPORTPARAM_PR_A2PARAM":   3,
	"E2_REPORTPARAM_PR_A3PARAM":   4,
	"E2_REPORTPARAM_PR_A4PARAM":   5,
	"E2_REPORTPARAM_PR_A5PARAM":   6,
	"E2_REPORTPARAM_PR_A6PARAM":   7,
}

func (x E2ReportParamPR) String() string {
	return proto.EnumName(E2ReportParamPR_name, int32(x))
}

func (E2ReportParamPR) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_01d4ac3ab6ba660b, []int{7}
}

type E2PerParamReportIntervalMs int32

const (
	E2PerParamReportIntervalMs_E2_PERPARAM_MS_120   E2PerParamReportIntervalMs = 0
	E2PerParamReportIntervalMs_E2_PERPARAM_MS_240   E2PerParamReportIntervalMs = 1
	E2PerParamReportIntervalMs_E2_PERPARAM_MS_480   E2PerParamReportIntervalMs = 2
	E2PerParamReportIntervalMs_E2_PERPARAM_MS_640   E2PerParamReportIntervalMs = 3
	E2PerParamReportIntervalMs_E2_PERPARAM_MS_1024  E2PerParamReportIntervalMs = 4
	E2PerParamReportIntervalMs_E2_PERPARAM_MS_2048  E2PerParamReportIntervalMs = 5
	E2PerParamReportIntervalMs_E2_PERPARAM_MS_5120  E2PerParamReportIntervalMs = 6
	E2PerParamReportIntervalMs_E2_PERPARAM_MS_10240 E2PerParamReportIntervalMs = 7
	E2PerParamReportIntervalMs_E2_PERPARAM_MIN_1    E2PerParamReportIntervalMs = 8
	E2PerParamReportIntervalMs_E2_PERPARAM_MIN_6    E2PerParamReportIntervalMs = 9
	E2PerParamReportIntervalMs_E2_PERPARAM_MIN_12   E2PerParamReportIntervalMs = 10
	E2PerParamReportIntervalMs_E2_PERPARAM_MIN_30   E2PerParamReportIntervalMs = 11
	E2PerParamReportIntervalMs_E2_PERPARAM_MIN_60   E2PerParamReportIntervalMs = 12
)

var E2PerParamReportIntervalMs_name = map[int32]string{
	0:  "E2_PERPARAM_MS_120",
	1:  "E2_PERPARAM_MS_240",
	2:  "E2_PERPARAM_MS_480",
	3:  "E2_PERPARAM_MS_640",
	4:  "E2_PERPARAM_MS_1024",
	5:  "E2_PERPARAM_MS_2048",
	6:  "E2_PERPARAM_MS_5120",
	7:  "E2_PERPARAM_MS_10240",
	8:  "E2_PERPARAM_MIN_1",
	9:  "E2_PERPARAM_MIN_6",
	10: "E2_PERPARAM_MIN_12",
	11: "E2_PERPARAM_MIN_30",
	12: "E2_PERPARAM_MIN_60",
}

var E2PerParamReportIntervalMs_value = map[string]int32{
	"E2_PERPARAM_MS_120":   0,
	"E2_PERPARAM_MS_240":   1,
	"E2_PERPARAM_MS_480":   2,
	"E2_PERPARAM_MS_640":   3,
	"E2_PERPARAM_MS_1024":  4,
	"E2_PERPARAM_MS_2048":  5,
	"E2_PERPARAM_MS_5120":  6,
	"E2_PERPARAM_MS_10240": 7,
	"E2_PERPARAM_MIN_1":    8,
	"E2_PERPARAM_MIN_6":    9,
	"E2_PERPARAM_MIN_12":   10,
	"E2_PERPARAM_MIN_30":   11,
	"E2_PERPARAM_MIN_60":   12,
}

func (x E2PerParamReportIntervalMs) String() string {
	return proto.EnumName(E2PerParamReportIntervalMs_name, int32(x))
}

func (E2PerParamReportIntervalMs) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_01d4ac3ab6ba660b, []int{8}
}

type E2ThresholdEUTRAPR int32

const (
	E2ThresholdEUTRAPR_E2_THRESHOLDEUTRA_PR_NOTHING E2ThresholdEUTRAPR = 0
	E2ThresholdEUTRAPR_E2_THRESHOLDEUTRA_PR_RSRP    E2ThresholdEUTRAPR = 1
	E2ThresholdEUTRAPR_E2_THRESHOLDEUTRA_PR_RSRQ    E2ThresholdEUTRAPR = 2
)

var E2ThresholdEUTRAPR_name = map[int32]string{
	0: "E2_THRESHOLDEUTRA_PR_NOTHING",
	1: "E2_THRESHOLDEUTRA_PR_RSRP",
	2: "E2_THRESHOLDEUTRA_PR_RSRQ",
}

var E2ThresholdEUTRAPR_value = map[string]int32{
	"E2_THRESHOLDEUTRA_PR_NOTHING": 0,
	"E2_THRESHOLDEUTRA_PR_RSRP":    1,
	"E2_THRESHOLDEUTRA_PR_RSRQ":    2,
}

func (x E2ThresholdEUTRAPR) String() string {
	return proto.EnumName(E2ThresholdEUTRAPR_name, int32(x))
}

func (E2ThresholdEUTRAPR) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_01d4ac3ab6ba660b, []int{9}
}

type E2TimeToTrigger int32

const (
	E2TimeToTrigger_E2_TTT_MS0    E2TimeToTrigger = 0
	E2TimeToTrigger_E2_TTT_MS40   E2TimeToTrigger = 1
	E2TimeToTrigger_E2_TTT_MS64   E2TimeToTrigger = 2
	E2TimeToTrigger_E2_TTT_MS80   E2TimeToTrigger = 3
	E2TimeToTrigger_E2_TTT_MS100  E2TimeToTrigger = 4
	E2TimeToTrigger_E2_TTT_MS128  E2TimeToTrigger = 5
	E2TimeToTrigger_E2_TTT_MS160  E2TimeToTrigger = 6
	E2TimeToTrigger_E2_TTT_MS256  E2TimeToTrigger = 7
	E2TimeToTrigger_E2_TTT_MS320  E2TimeToTrigger = 8
	E2TimeToTrigger_E2_TTT_MS480  E2TimeToTrigger = 9
	E2TimeToTrigger_E2_TTT_MS512  E2TimeToTrigger = 10
	E2TimeToTrigger_E2_TTT_MS640  E2TimeToTrigger = 11
	E2TimeToTrigger_E2_TTT_MS1024 E2TimeToTrigger = 12
	E2TimeToTrigger_E2_TTT_MS1280 E2TimeToTrigger = 13
	E2TimeToTrigger_E2_TTT_MS2560 E2TimeToTrigger = 14
	E2TimeToTrigger_E2_TTT_MS5120 E2TimeToTrigger = 15
)

var E2TimeToTrigger_name = map[int32]string{
	0:  "E2_TTT_MS0",
	1:  "E2_TTT_MS40",
	2:  "E2_TTT_MS64",
	3:  "E2_TTT_MS80",
	4:  "E2_TTT_MS100",
	5:  "E2_TTT_MS128",
	6:  "E2_TTT_MS160",
	7:  "E2_TTT_MS256",
	8:  "E2_TTT_MS320",
	9:  "E2_TTT_MS480",
	10: "E2_TTT_MS512",
	11: "E2_TTT_MS640",
	12: "E2_TTT_MS1024",
	13: "E2_TTT_MS1280",
	14: "E2_TTT_MS2560",
	15: "E2_TTT_MS5120",
}

var E2TimeToTrigger_value = map[string]int32{
	"E2_TTT_MS0":    0,
	"E2_TTT_MS40":   1,
	"E2_TTT_MS64":   2,
	"E2_TTT_MS80":   3,
	"E2_TTT_MS100":  4,
	"E2_TTT_MS128":  5,
	"E2_TTT_MS160":  6,
	"E2_TTT_MS256":  7,
	"E2_TTT_MS320":  8,
	"E2_TTT_MS480":  9,
	"E2_TTT_MS512":  10,
	"E2_TTT_MS640":  11,
	"E2_TTT_MS1024": 12,
	"E2_TTT_MS1280": 13,
	"E2_TTT_MS2560": 14,
	"E2_TTT_MS5120": 15,
}

func (x E2TimeToTrigger) String() string {
	return proto.EnumName(E2TimeToTrigger_name, int32(x))
}

func (E2TimeToTrigger) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_01d4ac3ab6ba660b, []int{10}
}

type E2TriggerQuantity int32

const (
	E2TriggerQuantity_E2_TQ_RSRP E2TriggerQuantity = 0
	E2TriggerQuantity_E2_TQ_RSRQ E2TriggerQuantity = 1
)

var E2TriggerQuantity_name = map[int32]string{
	0: "E2_TQ_RSRP",
	1: "E2_TQ_RSRQ",
}

var E2TriggerQuantity_value = map[string]int32{
	"E2_TQ_RSRP": 0,
	"E2_TQ_RSRQ": 1,
}

func (x E2TriggerQuantity) String() string {
	return proto.EnumName(E2TriggerQuantity_name, int32(x))
}

func (E2TriggerQuantity) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_01d4ac3ab6ba660b, []int{11}
}

type E2ReportQuality int32

const (
	E2ReportQuality_E2_RQ_SAME E2ReportQuality = 0
	E2ReportQuality_E2_RQ_BOTH E2ReportQuality = 1
)

var E2ReportQuality_name = map[int32]string{
	0: "E2_RQ_SAME",
	1: "E2_RQ_BOTH",
}

var E2ReportQuality_value = map[string]int32{
	"E2_RQ_SAME": 0,
	"E2_RQ_BOTH": 1,
}

func (x E2ReportQuality) String() string {
	return proto.EnumName(E2ReportQuality_name, int32(x))
}

func (E2ReportQuality) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_01d4ac3ab6ba660b, []int{12}
}

type E2MeasIdActionPR int32

const (
	E2MeasIdActionPR_E2_MEASIDACTION_PR_NOTHING    E2MeasIdActionPR = 0
	E2MeasIdActionPR_E2_MEASIDACTION_PR_ADDMEASID  E2MeasIdActionPR = 1
	E2MeasIdActionPR_E2_MEASIDACTION_PR_DELMEASID  E2MeasIdActionPR = 2
	E2MeasIdActionPR_E2_MEASIDACTION_PR_HOTOTARGET E2MeasIdActionPR = 3
)

var E2MeasIdActionPR_name = map[int32]string{
	0: "E2_MEASIDACTION_PR_NOTHING",
	1: "E2_MEASIDACTION_PR_ADDMEASID",
	2: "E2_MEASIDACTION_PR_DELMEASID",
	3: "E2_MEASIDACTION_PR_HOTOTARGET",
}

var E2MeasIdActionPR_value = map[string]int32{
	"E2_MEASIDACTION_PR_NOTHING":    0,
	"E2_MEASIDACTION_PR_ADDMEASID":  1,
	"E2_MEASIDACTION_PR_DELMEASID":  2,
	"E2_MEASIDACTION_PR_HOTOTARGET": 3,
}

func (x E2MeasIdActionPR) String() string {
	return proto.EnumName(E2MeasIdActionPR_name, int32(x))
}

func (E2MeasIdActionPR) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_01d4ac3ab6ba660b, []int{13}
}

type E2L2MeasReportIntervals int32

const (
	E2L2MeasReportIntervals_E2_L2MEASREPORTINTERVAL_NO_REPORT E2L2MeasReportIntervals = 0
	E2L2MeasReportIntervals_E2_L2MEASREPORTINTERVAL_MS_10     E2L2MeasReportIntervals = 1
	E2L2MeasReportIntervals_E2_L2MEASREPORTINTERVAL_MS_50     E2L2MeasReportIntervals = 2
	E2L2MeasReportIntervals_E2_L2MEASREPORTINTERVAL_MS_100    E2L2MeasReportIntervals = 3
	E2L2MeasReportIntervals_E2_L2MEASREPORTINTERVAL_MS_200    E2L2MeasReportIntervals = 4
	E2L2MeasReportIntervals_E2_L2MEASREPORTINTERVAL_MS_500    E2L2MeasReportIntervals = 5
	E2L2MeasReportIntervals_E2_L2MEASREPORTINTERVAL_MS_1024   E2L2MeasReportIntervals = 6
	E2L2MeasReportIntervals_E2_L2MEASREPORTINTERVAL_S_10      E2L2MeasReportIntervals = 7
	E2L2MeasReportIntervals_E2_L2MEASREPORTINTERVAL_MIN_1     E2L2MeasReportIntervals = 8
	E2L2MeasReportIntervals_E2_L2MEASREPORTINTERVAL_MIN_2     E2L2MeasReportIntervals = 9
	E2L2MeasReportIntervals_E2_L2MEASREPORTINTERVAL_MIN_5     E2L2MeasReportIntervals = 10
)

var E2L2MeasReportIntervals_name = map[int32]string{
	0:  "E2_L2MEASREPORTINTERVAL_NO_REPORT",
	1:  "E2_L2MEASREPORTINTERVAL_MS_10",
	2:  "E2_L2MEASREPORTINTERVAL_MS_50",
	3:  "E2_L2MEASREPORTINTERVAL_MS_100",
	4:  "E2_L2MEASREPORTINTERVAL_MS_200",
	5:  "E2_L2MEASREPORTINTERVAL_MS_500",
	6:  "E2_L2MEASREPORTINTERVAL_MS_1024",
	7:  "E2_L2MEASREPORTINTERVAL_S_10",
	8:  "E2_L2MEASREPORTINTERVAL_MIN_1",
	9:  "E2_L2MEASREPORTINTERVAL_MIN_2",
	10: "E2_L2MEASREPORTINTERVAL_MIN_5",
}

var E2L2MeasReportIntervals_value = map[string]int32{
	"E2_L2MEASREPORTINTERVAL_NO_REPORT": 0,
	"E2_L2MEASREPORTINTERVAL_MS_10":     1,
	"E2_L2MEASREPORTINTERVAL_MS_50":     2,
	"E2_L2MEASREPORTINTERVAL_MS_100":    3,
	"E2_L2MEASREPORTINTERVAL_MS_200":    4,
	"E2_L2MEASREPORTINTERVAL_MS_500":    5,
	"E2_L2MEASREPORTINTERVAL_MS_1024":   6,
	"E2_L2MEASREPORTINTERVAL_S_10":      7,
	"E2_L2MEASREPORTINTERVAL_MIN_1":     8,
	"E2_L2MEASREPORTINTERVAL_MIN_2":     9,
	"E2_L2MEASREPORTINTERVAL_MIN_5":     10,
}

func (x E2L2MeasReportIntervals) String() string {
	return proto.EnumName(E2L2MeasReportIntervals_name, int32(x))
}

func (E2L2MeasReportIntervals) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_01d4ac3ab6ba660b, []int{14}
}

type E2XICICPA int32

const (
	E2XICICPA_E2_XICIC_PA_DB_MINUS6      E2XICICPA = 0
	E2XICICPA_E2_XICIC_PA_DB_MINUX4DOT77 E2XICICPA = 1
	E2XICICPA_E2_XICIC_PA_DB_MINUS3      E2XICICPA = 2
	E2XICICPA_E2_XICIC_PA_DB_MINUS1DOT77 E2XICICPA = 3
	E2XICICPA_E2_XICIC_PA_DB_0           E2XICICPA = 4
	E2XICICPA_E2_XICIC_PA_DB_1           E2XICICPA = 5
	E2XICICPA_E2_XICIC_PA_DB_2           E2XICICPA = 6
	E2XICICPA_E2_XICIC_PA_DB_3           E2XICICPA = 7
)

var E2XICICPA_name = map[int32]string{
	0: "E2_XICIC_PA_DB_MINUS6",
	1: "E2_XICIC_PA_DB_MINUX4DOT77",
	2: "E2_XICIC_PA_DB_MINUS3",
	3: "E2_XICIC_PA_DB_MINUS1DOT77",
	4: "E2_XICIC_PA_DB_0",
	5: "E2_XICIC_PA_DB_1",
	6: "E2_XICIC_PA_DB_2",
	7: "E2_XICIC_PA_DB_3",
}

var E2XICICPA_value = map[string]int32{
	"E2_XICIC_PA_DB_MINUS6":      0,
	"E2_XICIC_PA_DB_MINUX4DOT77": 1,
	"E2_XICIC_PA_DB_MINUS3":      2,
	"E2_XICIC_PA_DB_MINUS1DOT77": 3,
	"E2_XICIC_PA_DB_0":           4,
	"E2_XICIC_PA_DB_1":           5,
	"E2_XICIC_PA_DB_2":           6,
	"E2_XICIC_PA_DB_3":           7,
}

func (x E2XICICPA) String() string {
	return proto.EnumName(E2XICICPA_name, int32(x))
}

func (E2XICICPA) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_01d4ac3ab6ba660b, []int{15}
}

type E2CACapClassDl int32

const (
	E2CACapClassDl_E2_CACAP_CLASSDL_A E2CACapClassDl = 0
	E2CACapClassDl_E2_CACAP_CLASSDL_B E2CACapClassDl = 1
	E2CACapClassDl_E2_CACAP_CLASSDL_C E2CACapClassDl = 2
	E2CACapClassDl_E2_CACAP_CLASSDL_D E2CACapClassDl = 3
	E2CACapClassDl_E2_CACAP_CLASSDL_E E2CACapClassDl = 4
	E2CACapClassDl_E2_CACAP_CLASSDL_F E2CACapClassDl = 5
)

var E2CACapClassDl_name = map[int32]string{
	0: "E2_CACAP_CLASSDL_A",
	1: "E2_CACAP_CLASSDL_B",
	2: "E2_CACAP_CLASSDL_C",
	3: "E2_CACAP_CLASSDL_D",
	4: "E2_CACAP_CLASSDL_E",
	5: "E2_CACAP_CLASSDL_F",
}

var E2CACapClassDl_value = map[string]int32{
	"E2_CACAP_CLASSDL_A": 0,
	"E2_CACAP_CLASSDL_B": 1,
	"E2_CACAP_CLASSDL_C": 2,
	"E2_CACAP_CLASSDL_D": 3,
	"E2_CACAP_CLASSDL_E": 4,
	"E2_CACAP_CLASSDL_F": 5,
}

func (x E2CACapClassDl) String() string {
	return proto.EnumName(E2CACapClassDl_name, int32(x))
}

func (E2CACapClassDl) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_01d4ac3ab6ba660b, []int{16}
}

type E2CACapClassUl int32

const (
	E2CACapClassUl_E2_CACAP_CLASSUL_A E2CACapClassUl = 0
	E2CACapClassUl_E2_CACAP_CLASSUL_B E2CACapClassUl = 1
	E2CACapClassUl_E2_CACAP_CLASSUL_C E2CACapClassUl = 2
	E2CACapClassUl_E2_CACAP_CLASSUL_D E2CACapClassUl = 3
	E2CACapClassUl_E2_CACAP_CLASSUL_E E2CACapClassUl = 4
	E2CACapClassUl_E2_CACAP_CLASSUL_F E2CACapClassUl = 5
)

var E2CACapClassUl_name = map[int32]string{
	0: "E2_CACAP_CLASSUL_A",
	1: "E2_CACAP_CLASSUL_B",
	2: "E2_CACAP_CLASSUL_C",
	3: "E2_CACAP_CLASSUL_D",
	4: "E2_CACAP_CLASSUL_E",
	5: "E2_CACAP_CLASSUL_F",
}

var E2CACapClassUl_value = map[string]int32{
	"E2_CACAP_CLASSUL_A": 0,
	"E2_CACAP_CLASSUL_B": 1,
	"E2_CACAP_CLASSUL_C": 2,
	"E2_CACAP_CLASSUL_D": 3,
	"E2_CACAP_CLASSUL_E": 4,
	"E2_CACAP_CLASSUL_F": 5,
}

func (x E2CACapClassUl) String() string {
	return proto.EnumName(E2CACapClassUl_name, int32(x))
}

func (E2CACapClassUl) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_01d4ac3ab6ba660b, []int{17}
}

type E2DCCapDrbType int32

const (
	E2DCCapDrbType_E2_DCCAP_DRBTYPE_SUPPORTED E2DCCapDrbType = 0
)

var E2DCCapDrbType_name = map[int32]string{
	0: "E2_DCCAP_DRBTYPE_SUPPORTED",
}

var E2DCCapDrbType_value = map[string]int32{
	"E2_DCCAP_DRBTYPE_SUPPORTED": 0,
}

func (x E2DCCapDrbType) String() string {
	return proto.EnumName(E2DCCapDrbType_name, int32(x))
}

func (E2DCCapDrbType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_01d4ac3ab6ba660b, []int{18}
}

type E2CADirection int32

const (
	E2CADirection_E2_CADIRECTION_DL   E2CADirection = 0
	E2CADirection_E2_CADIRECTION_UL   E2CADirection = 1
	E2CADirection_E2_CADIRECTION_BOTH E2CADirection = 2
)

var E2CADirection_name = map[int32]string{
	0: "E2_CADIRECTION_DL",
	1: "E2_CADIRECTION_UL",
	2: "E2_CADIRECTION_BOTH",
}

var E2CADirection_value = map[string]int32{
	"E2_CADIRECTION_DL":   0,
	"E2_CADIRECTION_UL":   1,
	"E2_CADIRECTION_BOTH": 2,
}

func (x E2CADirection) String() string {
	return proto.EnumName(E2CADirection_name, int32(x))
}

func (E2CADirection) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_01d4ac3ab6ba660b, []int{19}
}

// Message header
type E2MessageHeader struct {
	MessageType E2MessageType `protobuf:"varint,1,opt,name=messageType,proto3,enum=ran.e2.E2MessageType" json:"messageType,omitempty"`
}

func (m *E2MessageHeader) Reset()         { *m = E2MessageHeader{} }
func (m *E2MessageHeader) String() string { return proto.CompactTextString(m) }
func (*E2MessageHeader) ProtoMessage()    {}
func (*E2MessageHeader) Descriptor() ([]byte, []int) {
	return fileDescriptor_01d4ac3ab6ba660b, []int{0}
}
func (m *E2MessageHeader) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *E2MessageHeader) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_E2MessageHeader.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *E2MessageHeader) XXX_Merge(src proto.Message) {
	xxx_messageInfo_E2MessageHeader.Merge(m, src)
}
func (m *E2MessageHeader) XXX_Size() int {
	return m.Size()
}
func (m *E2MessageHeader) XXX_DiscardUnknown() {
	xxx_messageInfo_E2MessageHeader.DiscardUnknown(m)
}

var xxx_messageInfo_E2MessageHeader proto.InternalMessageInfo

func (m *E2MessageHeader) GetMessageType() E2MessageType {
	if m != nil {
		return m.MessageType
	}
	return E2MessageType_E2_UNKNOWNMESSAGE
}

// Message payload; one of attributes defined below
type E2MessagePayload struct {
	// Types that are valid to be assigned to Attributes:
	//	*E2MessagePayload_CellConfigRequestAttribute
	//	*E2MessagePayload_CellConfigReportAttribute
	//	*E2MessagePayload_UEAdmissionRequestAttribute
	//	*E2MessagePayload_UEAdmissionResponseAttribute
	//	*E2MessagePayload_UEAdmissionStatusAttribute
	//	*E2MessagePayload_UEContextUpdateAttribute
	//	*E2MessagePayload_UEReconfigIndAttribute
	//	*E2MessagePayload_UEReleaseIndAttribute
	//	*E2MessagePayload_BearerAdmissionRequestAttribute
	//	*E2MessagePayload_BearerAdmissionResponseAttribute
	//	*E2MessagePayload_BearerAdmissionStatusAttribute
	//	*E2MessagePayload_BearerReleaseIndAttribute
	//	*E2MessagePayload_HORequestAttribute
	//	*E2MessagePayload_HOFailureAttribute
	//	*E2MessagePayload_HOCompleteAttribute
	//	*E2MessagePayload_HOCauseAttribute
	//	*E2MessagePayload_RRCMeasConfigAttribute
	//	*E2MessagePayload_RxSigMeasReportAttribute
	//	*E2MessagePayload_L2MeasConfigAttribute
	//	*E2MessagePayload_RadioMeasReportPerU
	//	*E2MessagePayload_RadioMeasReportPerCellAttribute
	//	*E2MessagePayload_SchedMeasReportPerUEAttribute
	//	*E2MessagePayload_SchedMeasReportPerCellAttribute
	//	*E2MessagePayload_PDCPMeasReportPerUeAttribute
	//	*E2MessagePayload_RRMConfigAttribute
	//	*E2MessagePayload_RRMConfigStatusAttribute
	//	*E2MessagePayload_UECapabilityEnquiryAttribute
	//	*E2MessagePayload_UECapabilityInfoAttribute
	//	*E2MessagePayload_ScellAddAttribute
	//	*E2MessagePayload_ScellAddStatusAttribute
	//	*E2MessagePayload_ScellDeleteAttribute
	//	*E2MessagePayload_SeNBAddAttribute
	//	*E2MessagePayload_SeNBAddStatusAttribute
	//	*E2MessagePayload_SeNBDeleteAttribute
	//	*E2MessagePayload_TrafficSplitConfigAttribute
	Attributes isE2MessagePayload_Attributes `protobuf_oneof:"attributes"`
}

func (m *E2MessagePayload) Reset()         { *m = E2MessagePayload{} }
func (m *E2MessagePayload) String() string { return proto.CompactTextString(m) }
func (*E2MessagePayload) ProtoMessage()    {}
func (*E2MessagePayload) Descriptor() ([]byte, []int) {
	return fileDescriptor_01d4ac3ab6ba660b, []int{1}
}
func (m *E2MessagePayload) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *E2MessagePayload) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_E2MessagePayload.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *E2MessagePayload) XXX_Merge(src proto.Message) {
	xxx_messageInfo_E2MessagePayload.Merge(m, src)
}
func (m *E2MessagePayload) XXX_Size() int {
	return m.Size()
}
func (m *E2MessagePayload) XXX_DiscardUnknown() {
	xxx_messageInfo_E2MessagePayload.DiscardUnknown(m)
}

var xxx_messageInfo_E2MessagePayload proto.InternalMessageInfo

type isE2MessagePayload_Attributes interface {
	isE2MessagePayload_Attributes()
	MarshalTo([]byte) (int, error)
	Size() int
}

type E2MessagePayload_CellConfigRequestAttribute struct {
	CellConfigRequestAttribute *E2CellConfigRequestAttribute `protobuf:"bytes,1,opt,name=cellConfigRequestAttribute,proto3,oneof" json:"cellConfigRequestAttribute,omitempty"`
}
type E2MessagePayload_CellConfigReportAttribute struct {
	CellConfigReportAttribute *E2CellConfigReportAttribute `protobuf:"bytes,2,opt,name=cellConfigReportAttribute,proto3,oneof" json:"cellConfigReportAttribute,omitempty"`
}
type E2MessagePayload_UEAdmissionRequestAttribute struct {
	UEAdmissionRequestAttribute *E2UEAdmissionRequestAttribute `protobuf:"bytes,3,opt,name=uEAdmissionRequestAttribute,proto3,oneof" json:"uEAdmissionRequestAttribute,omitempty"`
}
type E2MessagePayload_UEAdmissionResponseAttribute struct {
	UEAdmissionResponseAttribute *E2UEAdmissionResponseAttribute `protobuf:"bytes,4,opt,name=uEAdmissionResponseAttribute,proto3,oneof" json:"uEAdmissionResponseAttribute,omitempty"`
}
type E2MessagePayload_UEAdmissionStatusAttribute struct {
	UEAdmissionStatusAttribute *E2UEAdmissionStatusAttribute `protobuf:"bytes,5,opt,name=uEAdmissionStatusAttribute,proto3,oneof" json:"uEAdmissionStatusAttribute,omitempty"`
}
type E2MessagePayload_UEContextUpdateAttribute struct {
	UEContextUpdateAttribute *E2UEContextUpdateAttribute `protobuf:"bytes,6,opt,name=uEContextUpdateAttribute,proto3,oneof" json:"uEContextUpdateAttribute,omitempty"`
}
type E2MessagePayload_UEReconfigIndAttribute struct {
	UEReconfigIndAttribute *E2UEReconfigIndAttribute `protobuf:"bytes,7,opt,name=uEReconfigIndAttribute,proto3,oneof" json:"uEReconfigIndAttribute,omitempty"`
}
type E2MessagePayload_UEReleaseIndAttribute struct {
	UEReleaseIndAttribute *E2UEReleaseIndAttribute `protobuf:"bytes,8,opt,name=uEReleaseIndAttribute,proto3,oneof" json:"uEReleaseIndAttribute,omitempty"`
}
type E2MessagePayload_BearerAdmissionRequestAttribute struct {
	BearerAdmissionRequestAttribute *E2BearerAdmissionRequestAttribute `protobuf:"bytes,9,opt,name=bearerAdmissionRequestAttribute,proto3,oneof" json:"bearerAdmissionRequestAttribute,omitempty"`
}
type E2MessagePayload_BearerAdmissionResponseAttribute struct {
	BearerAdmissionResponseAttribute *E2BearerAdmissionResponseAttribute `protobuf:"bytes,10,opt,name=bearerAdmissionResponseAttribute,proto3,oneof" json:"bearerAdmissionResponseAttribute,omitempty"`
}
type E2MessagePayload_BearerAdmissionStatusAttribute struct {
	BearerAdmissionStatusAttribute *E2BearerAdmissionStatusAttribute `protobuf:"bytes,11,opt,name=bearerAdmissionStatusAttribute,proto3,oneof" json:"bearerAdmissionStatusAttribute,omitempty"`
}
type E2MessagePayload_BearerReleaseIndAttribute struct {
	BearerReleaseIndAttribute *E2BearerReleaseIndAttribute `protobuf:"bytes,12,opt,name=bearerReleaseIndAttribute,proto3,oneof" json:"bearerReleaseIndAttribute,omitempty"`
}
type E2MessagePayload_HORequestAttribute struct {
	HORequestAttribute *E2HORequestAttribute `protobuf:"bytes,13,opt,name=hORequestAttribute,proto3,oneof" json:"hORequestAttribute,omitempty"`
}
type E2MessagePayload_HOFailureAttribute struct {
	HOFailureAttribute *E2HOFailureAttribute `protobuf:"bytes,14,opt,name=hOFailureAttribute,proto3,oneof" json:"hOFailureAttribute,omitempty"`
}
type E2MessagePayload_HOCompleteAttribute struct {
	HOCompleteAttribute *E2HOCompleteAttribute `protobuf:"bytes,15,opt,name=hOCompleteAttribute,proto3,oneof" json:"hOCompleteAttribute,omitempty"`
}
type E2MessagePayload_HOCauseAttribute struct {
	HOCauseAttribute *E2HOCauseAttribute `protobuf:"bytes,16,opt,name=hOCauseAttribute,proto3,oneof" json:"hOCauseAttribute,omitempty"`
}
type E2MessagePayload_RRCMeasConfigAttribute struct {
	RRCMeasConfigAttribute *E2RRCMeasConfigAttribute `protobuf:"bytes,17,opt,name=rRCMeasConfigAttribute,proto3,oneof" json:"rRCMeasConfigAttribute,omitempty"`
}
type E2MessagePayload_RxSigMeasReportAttribute struct {
	RxSigMeasReportAttribute *E2RxSigMeasReportAttribute `protobuf:"bytes,18,opt,name=rxSigMeasReportAttribute,proto3,oneof" json:"rxSigMeasReportAttribute,omitempty"`
}
type E2MessagePayload_L2MeasConfigAttribute struct {
	L2MeasConfigAttribute *E2L2MeasConfigAttribute `protobuf:"bytes,19,opt,name=l2MeasConfigAttribute,proto3,oneof" json:"l2MeasConfigAttribute,omitempty"`
}
type E2MessagePayload_RadioMeasReportPerU struct {
	RadioMeasReportPerU *E2RadioMeasReportPerUEAttribute `protobuf:"bytes,20,opt,name=radioMeasReportPerU,proto3,oneof" json:"radioMeasReportPerU,omitempty"`
}
type E2MessagePayload_RadioMeasReportPerCellAttribute struct {
	RadioMeasReportPerCellAttribute *E2RadioMeasReportPerCellAttribute `protobuf:"bytes,21,opt,name=radioMeasReportPerCellAttribute,proto3,oneof" json:"radioMeasReportPerCellAttribute,omitempty"`
}
type E2MessagePayload_SchedMeasReportPerUEAttribute struct {
	SchedMeasReportPerUEAttribute *E2SchedMeasReportPerUEAttribute `protobuf:"bytes,22,opt,name=schedMeasReportPerUEAttribute,proto3,oneof" json:"schedMeasReportPerUEAttribute,omitempty"`
}
type E2MessagePayload_SchedMeasReportPerCellAttribute struct {
	SchedMeasReportPerCellAttribute *E2SchedMeasReportPerCellAttribute `protobuf:"bytes,23,opt,name=schedMeasReportPerCellAttribute,proto3,oneof" json:"schedMeasReportPerCellAttribute,omitempty"`
}
type E2MessagePayload_PDCPMeasReportPerUeAttribute struct {
	PDCPMeasReportPerUeAttribute *E2PDCPMeasReportPerUeAttribute `protobuf:"bytes,24,opt,name=pDCPMeasReportPerUeAttribute,proto3,oneof" json:"pDCPMeasReportPerUeAttribute,omitempty"`
}
type E2MessagePayload_RRMConfigAttribute struct {
	RRMConfigAttribute *E2RRMConfigAttribute `protobuf:"bytes,25,opt,name=rRMConfigAttribute,proto3,oneof" json:"rRMConfigAttribute,omitempty"`
}
type E2MessagePayload_RRMConfigStatusAttribute struct {
	RRMConfigStatusAttribute *E2RRMConfigStatusAttribute `protobuf:"bytes,26,opt,name=rRMConfigStatusAttribute,proto3,oneof" json:"rRMConfigStatusAttribute,omitempty"`
}
type E2MessagePayload_UECapabilityEnquiryAttribute struct {
	UECapabilityEnquiryAttribute *E2UECapabilityEnquiryAttribute `protobuf:"bytes,27,opt,name=uECapabilityEnquiryAttribute,proto3,oneof" json:"uECapabilityEnquiryAttribute,omitempty"`
}
type E2MessagePayload_UECapabilityInfoAttribute struct {
	UECapabilityInfoAttribute *E2UECapabilityInfoAttribute `protobuf:"bytes,28,opt,name=uECapabilityInfoAttribute,proto3,oneof" json:"uECapabilityInfoAttribute,omitempty"`
}
type E2MessagePayload_ScellAddAttribute struct {
	ScellAddAttribute *E2ScellAddAttribute `protobuf:"bytes,29,opt,name=scellAddAttribute,proto3,oneof" json:"scellAddAttribute,omitempty"`
}
type E2MessagePayload_ScellAddStatusAttribute struct {
	ScellAddStatusAttribute *E2ScellAddStatusAttribute `protobuf:"bytes,30,opt,name=scellAddStatusAttribute,proto3,oneof" json:"scellAddStatusAttribute,omitempty"`
}
type E2MessagePayload_ScellDeleteAttribute struct {
	ScellDeleteAttribute *E2ScellDeleteAttribute `protobuf:"bytes,31,opt,name=scellDeleteAttribute,proto3,oneof" json:"scellDeleteAttribute,omitempty"`
}
type E2MessagePayload_SeNBAddAttribute struct {
	SeNBAddAttribute *E2SeNBAddAttribute `protobuf:"bytes,32,opt,name=seNBAddAttribute,proto3,oneof" json:"seNBAddAttribute,omitempty"`
}
type E2MessagePayload_SeNBAddStatusAttribute struct {
	SeNBAddStatusAttribute *E2SeNBAddStatusAttribute `protobuf:"bytes,33,opt,name=seNBAddStatusAttribute,proto3,oneof" json:"seNBAddStatusAttribute,omitempty"`
}
type E2MessagePayload_SeNBDeleteAttribute struct {
	SeNBDeleteAttribute *E2SeNBDeleteAttribute `protobuf:"bytes,34,opt,name=seNBDeleteAttribute,proto3,oneof" json:"seNBDeleteAttribute,omitempty"`
}
type E2MessagePayload_TrafficSplitConfigAttribute struct {
	TrafficSplitConfigAttribute *E2TrafficSplitConfigAttribute `protobuf:"bytes,35,opt,name=trafficSplitConfigAttribute,proto3,oneof" json:"trafficSplitConfigAttribute,omitempty"`
}

func (*E2MessagePayload_CellConfigRequestAttribute) isE2MessagePayload_Attributes()       {}
func (*E2MessagePayload_CellConfigReportAttribute) isE2MessagePayload_Attributes()        {}
func (*E2MessagePayload_UEAdmissionRequestAttribute) isE2MessagePayload_Attributes()      {}
func (*E2MessagePayload_UEAdmissionResponseAttribute) isE2MessagePayload_Attributes()     {}
func (*E2MessagePayload_UEAdmissionStatusAttribute) isE2MessagePayload_Attributes()       {}
func (*E2MessagePayload_UEContextUpdateAttribute) isE2MessagePayload_Attributes()         {}
func (*E2MessagePayload_UEReconfigIndAttribute) isE2MessagePayload_Attributes()           {}
func (*E2MessagePayload_UEReleaseIndAttribute) isE2MessagePayload_Attributes()            {}
func (*E2MessagePayload_BearerAdmissionRequestAttribute) isE2MessagePayload_Attributes()  {}
func (*E2MessagePayload_BearerAdmissionResponseAttribute) isE2MessagePayload_Attributes() {}
func (*E2MessagePayload_BearerAdmissionStatusAttribute) isE2MessagePayload_Attributes()   {}
func (*E2MessagePayload_BearerReleaseIndAttribute) isE2MessagePayload_Attributes()        {}
func (*E2MessagePayload_HORequestAttribute) isE2MessagePayload_Attributes()               {}
func (*E2MessagePayload_HOFailureAttribute) isE2MessagePayload_Attributes()               {}
func (*E2MessagePayload_HOCompleteAttribute) isE2MessagePayload_Attributes()              {}
func (*E2MessagePayload_HOCauseAttribute) isE2MessagePayload_Attributes()                 {}
func (*E2MessagePayload_RRCMeasConfigAttribute) isE2MessagePayload_Attributes()           {}
func (*E2MessagePayload_RxSigMeasReportAttribute) isE2MessagePayload_Attributes()         {}
func (*E2MessagePayload_L2MeasConfigAttribute) isE2MessagePayload_Attributes()            {}
func (*E2MessagePayload_RadioMeasReportPerU) isE2MessagePayload_Attributes()              {}
func (*E2MessagePayload_RadioMeasReportPerCellAttribute) isE2MessagePayload_Attributes()  {}
func (*E2MessagePayload_SchedMeasReportPerUEAttribute) isE2MessagePayload_Attributes()    {}
func (*E2MessagePayload_SchedMeasReportPerCellAttribute) isE2MessagePayload_Attributes()  {}
func (*E2MessagePayload_PDCPMeasReportPerUeAttribute) isE2MessagePayload_Attributes()     {}
func (*E2MessagePayload_RRMConfigAttribute) isE2MessagePayload_Attributes()               {}
func (*E2MessagePayload_RRMConfigStatusAttribute) isE2MessagePayload_Attributes()         {}
func (*E2MessagePayload_UECapabilityEnquiryAttribute) isE2MessagePayload_Attributes()     {}
func (*E2MessagePayload_UECapabilityInfoAttribute) isE2MessagePayload_Attributes()        {}
func (*E2MessagePayload_ScellAddAttribute) isE2MessagePayload_Attributes()                {}
func (*E2MessagePayload_ScellAddStatusAttribute) isE2MessagePayload_Attributes()          {}
func (*E2MessagePayload_ScellDeleteAttribute) isE2MessagePayload_Attributes()             {}
func (*E2MessagePayload_SeNBAddAttribute) isE2MessagePayload_Attributes()                 {}
func (*E2MessagePayload_SeNBAddStatusAttribute) isE2MessagePayload_Attributes()           {}
func (*E2MessagePayload_SeNBDeleteAttribute) isE2MessagePayload_Attributes()              {}
func (*E2MessagePayload_TrafficSplitConfigAttribute) isE2MessagePayload_Attributes()      {}

func (m *E2MessagePayload) GetAttributes() isE2MessagePayload_Attributes {
	if m != nil {
		return m.Attributes
	}
	return nil
}

func (m *E2MessagePayload) GetCellConfigRequestAttribute() *E2CellConfigRequestAttribute {
	if x, ok := m.GetAttributes().(*E2MessagePayload_CellConfigRequestAttribute); ok {
		return x.CellConfigRequestAttribute
	}
	return nil
}

func (m *E2MessagePayload) GetCellConfigReportAttribute() *E2CellConfigReportAttribute {
	if x, ok := m.GetAttributes().(*E2MessagePayload_CellConfigReportAttribute); ok {
		return x.CellConfigReportAttribute
	}
	return nil
}

func (m *E2MessagePayload) GetUEAdmissionRequestAttribute() *E2UEAdmissionRequestAttribute {
	if x, ok := m.GetAttributes().(*E2MessagePayload_UEAdmissionRequestAttribute); ok {
		return x.UEAdmissionRequestAttribute
	}
	return nil
}

func (m *E2MessagePayload) GetUEAdmissionResponseAttribute() *E2UEAdmissionResponseAttribute {
	if x, ok := m.GetAttributes().(*E2MessagePayload_UEAdmissionResponseAttribute); ok {
		return x.UEAdmissionResponseAttribute
	}
	return nil
}

func (m *E2MessagePayload) GetUEAdmissionStatusAttribute() *E2UEAdmissionStatusAttribute {
	if x, ok := m.GetAttributes().(*E2MessagePayload_UEAdmissionStatusAttribute); ok {
		return x.UEAdmissionStatusAttribute
	}
	return nil
}

func (m *E2MessagePayload) GetUEContextUpdateAttribute() *E2UEContextUpdateAttribute {
	if x, ok := m.GetAttributes().(*E2MessagePayload_UEContextUpdateAttribute); ok {
		return x.UEContextUpdateAttribute
	}
	return nil
}

func (m *E2MessagePayload) GetUEReconfigIndAttribute() *E2UEReconfigIndAttribute {
	if x, ok := m.GetAttributes().(*E2MessagePayload_UEReconfigIndAttribute); ok {
		return x.UEReconfigIndAttribute
	}
	return nil
}

func (m *E2MessagePayload) GetUEReleaseIndAttribute() *E2UEReleaseIndAttribute {
	if x, ok := m.GetAttributes().(*E2MessagePayload_UEReleaseIndAttribute); ok {
		return x.UEReleaseIndAttribute
	}
	return nil
}

func (m *E2MessagePayload) GetBearerAdmissionRequestAttribute() *E2BearerAdmissionRequestAttribute {
	if x, ok := m.GetAttributes().(*E2MessagePayload_BearerAdmissionRequestAttribute); ok {
		return x.BearerAdmissionRequestAttribute
	}
	return nil
}

func (m *E2MessagePayload) GetBearerAdmissionResponseAttribute() *E2BearerAdmissionResponseAttribute {
	if x, ok := m.GetAttributes().(*E2MessagePayload_BearerAdmissionResponseAttribute); ok {
		return x.BearerAdmissionResponseAttribute
	}
	return nil
}

func (m *E2MessagePayload) GetBearerAdmissionStatusAttribute() *E2BearerAdmissionStatusAttribute {
	if x, ok := m.GetAttributes().(*E2MessagePayload_BearerAdmissionStatusAttribute); ok {
		return x.BearerAdmissionStatusAttribute
	}
	return nil
}

func (m *E2MessagePayload) GetBearerReleaseIndAttribute() *E2BearerReleaseIndAttribute {
	if x, ok := m.GetAttributes().(*E2MessagePayload_BearerReleaseIndAttribute); ok {
		return x.BearerReleaseIndAttribute
	}
	return nil
}

func (m *E2MessagePayload) GetHORequestAttribute() *E2HORequestAttribute {
	if x, ok := m.GetAttributes().(*E2MessagePayload_HORequestAttribute); ok {
		return x.HORequestAttribute
	}
	return nil
}

func (m *E2MessagePayload) GetHOFailureAttribute() *E2HOFailureAttribute {
	if x, ok := m.GetAttributes().(*E2MessagePayload_HOFailureAttribute); ok {
		return x.HOFailureAttribute
	}
	return nil
}

func (m *E2MessagePayload) GetHOCompleteAttribute() *E2HOCompleteAttribute {
	if x, ok := m.GetAttributes().(*E2MessagePayload_HOCompleteAttribute); ok {
		return x.HOCompleteAttribute
	}
	return nil
}

func (m *E2MessagePayload) GetHOCauseAttribute() *E2HOCauseAttribute {
	if x, ok := m.GetAttributes().(*E2MessagePayload_HOCauseAttribute); ok {
		return x.HOCauseAttribute
	}
	return nil
}

func (m *E2MessagePayload) GetRRCMeasConfigAttribute() *E2RRCMeasConfigAttribute {
	if x, ok := m.GetAttributes().(*E2MessagePayload_RRCMeasConfigAttribute); ok {
		return x.RRCMeasConfigAttribute
	}
	return nil
}

func (m *E2MessagePayload) GetRxSigMeasReportAttribute() *E2RxSigMeasReportAttribute {
	if x, ok := m.GetAttributes().(*E2MessagePayload_RxSigMeasReportAttribute); ok {
		return x.RxSigMeasReportAttribute
	}
	return nil
}

func (m *E2MessagePayload) GetL2MeasConfigAttribute() *E2L2MeasConfigAttribute {
	if x, ok := m.GetAttributes().(*E2MessagePayload_L2MeasConfigAttribute); ok {
		return x.L2MeasConfigAttribute
	}
	return nil
}

func (m *E2MessagePayload) GetRadioMeasReportPerU() *E2RadioMeasReportPerUEAttribute {
	if x, ok := m.GetAttributes().(*E2MessagePayload_RadioMeasReportPerU); ok {
		return x.RadioMeasReportPerU
	}
	return nil
}

func (m *E2MessagePayload) GetRadioMeasReportPerCellAttribute() *E2RadioMeasReportPerCellAttribute {
	if x, ok := m.GetAttributes().(*E2MessagePayload_RadioMeasReportPerCellAttribute); ok {
		return x.RadioMeasReportPerCellAttribute
	}
	return nil
}

func (m *E2MessagePayload) GetSchedMeasReportPerUEAttribute() *E2SchedMeasReportPerUEAttribute {
	if x, ok := m.GetAttributes().(*E2MessagePayload_SchedMeasReportPerUEAttribute); ok {
		return x.SchedMeasReportPerUEAttribute
	}
	return nil
}

func (m *E2MessagePayload) GetSchedMeasReportPerCellAttribute() *E2SchedMeasReportPerCellAttribute {
	if x, ok := m.GetAttributes().(*E2MessagePayload_SchedMeasReportPerCellAttribute); ok {
		return x.SchedMeasReportPerCellAttribute
	}
	return nil
}

func (m *E2MessagePayload) GetPDCPMeasReportPerUeAttribute() *E2PDCPMeasReportPerUeAttribute {
	if x, ok := m.GetAttributes().(*E2MessagePayload_PDCPMeasReportPerUeAttribute); ok {
		return x.PDCPMeasReportPerUeAttribute
	}
	return nil
}

func (m *E2MessagePayload) GetRRMConfigAttribute() *E2RRMConfigAttribute {
	if x, ok := m.GetAttributes().(*E2MessagePayload_RRMConfigAttribute); ok {
		return x.RRMConfigAttribute
	}
	return nil
}

func (m *E2MessagePayload) GetRRMConfigStatusAttribute() *E2RRMConfigStatusAttribute {
	if x, ok := m.GetAttributes().(*E2MessagePayload_RRMConfigStatusAttribute); ok {
		return x.RRMConfigStatusAttribute
	}
	return nil
}

func (m *E2MessagePayload) GetUECapabilityEnquiryAttribute() *E2UECapabilityEnquiryAttribute {
	if x, ok := m.GetAttributes().(*E2MessagePayload_UECapabilityEnquiryAttribute); ok {
		return x.UECapabilityEnquiryAttribute
	}
	return nil
}

func (m *E2MessagePayload) GetUECapabilityInfoAttribute() *E2UECapabilityInfoAttribute {
	if x, ok := m.GetAttributes().(*E2MessagePayload_UECapabilityInfoAttribute); ok {
		return x.UECapabilityInfoAttribute
	}
	return nil
}

func (m *E2MessagePayload) GetScellAddAttribute() *E2ScellAddAttribute {
	if x, ok := m.GetAttributes().(*E2MessagePayload_ScellAddAttribute); ok {
		return x.ScellAddAttribute
	}
	return nil
}

func (m *E2MessagePayload) GetScellAddStatusAttribute() *E2ScellAddStatusAttribute {
	if x, ok := m.GetAttributes().(*E2MessagePayload_ScellAddStatusAttribute); ok {
		return x.ScellAddStatusAttribute
	}
	return nil
}

func (m *E2MessagePayload) GetScellDeleteAttribute() *E2ScellDeleteAttribute {
	if x, ok := m.GetAttributes().(*E2MessagePayload_ScellDeleteAttribute); ok {
		return x.ScellDeleteAttribute
	}
	return nil
}

func (m *E2MessagePayload) GetSeNBAddAttribute() *E2SeNBAddAttribute {
	if x, ok := m.GetAttributes().(*E2MessagePayload_SeNBAddAttribute); ok {
		return x.SeNBAddAttribute
	}
	return nil
}

func (m *E2MessagePayload) GetSeNBAddStatusAttribute() *E2SeNBAddStatusAttribute {
	if x, ok := m.GetAttributes().(*E2MessagePayload_SeNBAddStatusAttribute); ok {
		return x.SeNBAddStatusAttribute
	}
	return nil
}

func (m *E2MessagePayload) GetSeNBDeleteAttribute() *E2SeNBDeleteAttribute {
	if x, ok := m.GetAttributes().(*E2MessagePayload_SeNBDeleteAttribute); ok {
		return x.SeNBDeleteAttribute
	}
	return nil
}

func (m *E2MessagePayload) GetTrafficSplitConfigAttribute() *E2TrafficSplitConfigAttribute {
	if x, ok := m.GetAttributes().(*E2MessagePayload_TrafficSplitConfigAttribute); ok {
		return x.TrafficSplitConfigAttribute
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*E2MessagePayload) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*E2MessagePayload_CellConfigRequestAttribute)(nil),
		(*E2MessagePayload_CellConfigReportAttribute)(nil),
		(*E2MessagePayload_UEAdmissionRequestAttribute)(nil),
		(*E2MessagePayload_UEAdmissionResponseAttribute)(nil),
		(*E2MessagePayload_UEAdmissionStatusAttribute)(nil),
		(*E2MessagePayload_UEContextUpdateAttribute)(nil),
		(*E2MessagePayload_UEReconfigIndAttribute)(nil),
		(*E2MessagePayload_UEReleaseIndAttribute)(nil),
		(*E2MessagePayload_BearerAdmissionRequestAttribute)(nil),
		(*E2MessagePayload_BearerAdmissionResponseAttribute)(nil),
		(*E2MessagePayload_BearerAdmissionStatusAttribute)(nil),
		(*E2MessagePayload_BearerReleaseIndAttribute)(nil),
		(*E2MessagePayload_HORequestAttribute)(nil),
		(*E2MessagePayload_HOFailureAttribute)(nil),
		(*E2MessagePayload_HOCompleteAttribute)(nil),
		(*E2MessagePayload_HOCauseAttribute)(nil),
		(*E2MessagePayload_RRCMeasConfigAttribute)(nil),
		(*E2MessagePayload_RxSigMeasReportAttribute)(nil),
		(*E2MessagePayload_L2MeasConfigAttribute)(nil),
		(*E2MessagePayload_RadioMeasReportPerU)(nil),
		(*E2MessagePayload_RadioMeasReportPerCellAttribute)(nil),
		(*E2MessagePayload_SchedMeasReportPerUEAttribute)(nil),
		(*E2MessagePayload_SchedMeasReportPerCellAttribute)(nil),
		(*E2MessagePayload_PDCPMeasReportPerUeAttribute)(nil),
		(*E2MessagePayload_RRMConfigAttribute)(nil),
		(*E2MessagePayload_RRMConfigStatusAttribute)(nil),
		(*E2MessagePayload_UECapabilityEnquiryAttribute)(nil),
		(*E2MessagePayload_UECapabilityInfoAttribute)(nil),
		(*E2MessagePayload_ScellAddAttribute)(nil),
		(*E2MessagePayload_ScellAddStatusAttribute)(nil),
		(*E2MessagePayload_ScellDeleteAttribute)(nil),
		(*E2MessagePayload_SeNBAddAttribute)(nil),
		(*E2MessagePayload_SeNBAddStatusAttribute)(nil),
		(*E2MessagePayload_SeNBDeleteAttribute)(nil),
		(*E2MessagePayload_TrafficSplitConfigAttribute)(nil),
	}
}

// Full message frame having one header and one payload
type E2Message struct {
	Header  *E2MessageHeader  `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Payload *E2MessagePayload `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (m *E2Message) Reset()         { *m = E2Message{} }
func (m *E2Message) String() string { return proto.CompactTextString(m) }
func (*E2Message) ProtoMessage()    {}
func (*E2Message) Descriptor() ([]byte, []int) {
	return fileDescriptor_01d4ac3ab6ba660b, []int{2}
}
func (m *E2Message) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *E2Message) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_E2Message.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *E2Message) XXX_Merge(src proto.Message) {
	xxx_messageInfo_E2Message.Merge(m, src)
}
func (m *E2Message) XXX_Size() int {
	return m.Size()
}
func (m *E2Message) XXX_DiscardUnknown() {
	xxx_messageInfo_E2Message.DiscardUnknown(m)
}

var xxx_messageInfo_E2Message proto.InternalMessageInfo

func (m *E2Message) GetHeader() *E2MessageHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *E2Message) GetPayload() *E2MessagePayload {
	if m != nil {
		return m.Payload
	}
	return nil
}

// RPC result
type ServiceResult struct {
	ResultCode    int32  `protobuf:"varint,1,opt,name=resultCode,proto3" json:"resultCode,omitempty"`
	ResultMessage string `protobuf:"bytes,2,opt,name=resultMessage,proto3" json:"resultMessage,omitempty"`
}

func (m *ServiceResult) Reset()         { *m = ServiceResult{} }
func (m *ServiceResult) String() string { return proto.CompactTextString(m) }
func (*ServiceResult) ProtoMessage()    {}
func (*ServiceResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_01d4ac3ab6ba660b, []int{3}
}
func (m *ServiceResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ServiceResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ServiceResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ServiceResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServiceResult.Merge(m, src)
}
func (m *ServiceResult) XXX_Size() int {
	return m.Size()
}
func (m *ServiceResult) XXX_DiscardUnknown() {
	xxx_messageInfo_ServiceResult.DiscardUnknown(m)
}

var xxx_messageInfo_ServiceResult proto.InternalMessageInfo

func (m *ServiceResult) GetResultCode() int32 {
	if m != nil {
		return m.ResultCode
	}
	return 0
}

func (m *ServiceResult) GetResultMessage() string {
	if m != nil {
		return m.ResultMessage
	}
	return ""
}

type E2ECGI struct {
	PlmnId string `protobuf:"bytes,1,opt,name=plmnId,proto3" json:"plmnId,omitempty"`
	Ecid   string `protobuf:"bytes,2,opt,name=ecid,proto3" json:"ecid,omitempty"`
}

func (m *E2ECGI) Reset()         { *m = E2ECGI{} }
func (m *E2ECGI) String() string { return proto.CompactTextString(m) }
func (*E2ECGI) ProtoMessage()    {}
func (*E2ECGI) Descriptor() ([]byte, []int) {
	return fileDescriptor_01d4ac3ab6ba660b, []int{4}
}
func (m *E2ECGI) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *E2ECGI) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_E2ECGI.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *E2ECGI) XXX_Merge(src proto.Message) {
	xxx_messageInfo_E2ECGI.Merge(m, src)
}
func (m *E2ECGI) XXX_Size() int {
	return m.Size()
}
func (m *E2ECGI) XXX_DiscardUnknown() {
	xxx_messageInfo_E2ECGI.DiscardUnknown(m)
}

var xxx_messageInfo_E2ECGI proto.InternalMessageInfo

func (m *E2ECGI) GetPlmnId() string {
	if m != nil {
		return m.PlmnId
	}
	return ""
}

func (m *E2ECGI) GetEcid() string {
	if m != nil {
		return m.Ecid
	}
	return ""
}

type E2CandScell struct {
	Pci      string `protobuf:"bytes,1,opt,name=pci,proto3" json:"pci,omitempty"`
	EarfcnDl string `protobuf:"bytes,2,opt,name=earfcnDl,proto3" json:"earfcnDl,omitempty"`
}

func (m *E2CandScell) Reset()         { *m = E2CandScell{} }
func (m *E2CandScell) String() string { return proto.CompactTextString(m) }
func (*E2CandScell) ProtoMessage()    {}
func (*E2CandScell) Descriptor() ([]byte, []int) {
	return fileDescriptor_01d4ac3ab6ba660b, []int{5}
}
func (m *E2CandScell) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *E2CandScell) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_E2CandScell.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *E2CandScell) XXX_Merge(src proto.Message) {
	xxx_messageInfo_E2CandScell.Merge(m, src)
}
func (m *E2CandScell) XXX_Size() int {
	return m.Size()
}
func (m *E2CandScell) XXX_DiscardUnknown() {
	xxx_messageInfo_E2CandScell.DiscardUnknown(m)
}

var xxx_messageInfo_E2CandScell proto.InternalMessageInfo

func (m *E2CandScell) GetPci() string {
	if m != nil {
		return m.Pci
	}
	return ""
}

func (m *E2CandScell) GetEarfcnDl() string {
	if m != nil {
		return m.EarfcnDl
	}
	return ""
}

// CellConfigRequest message
type E2CellConfigRequestAttribute struct {
	Ecgi *E2ECGI `protobuf:"bytes,1,opt,name=ecgi,proto3" json:"ecgi,omitempty"`
}

func (m *E2CellConfigRequestAttribute) Reset()         { *m = E2CellConfigRequestAttribute{} }
func (m *E2CellConfigRequestAttribute) String() string { return proto.CompactTextString(m) }
func (*E2CellConfigRequestAttribute) ProtoMessage()    {}
func (*E2CellConfigRequestAttribute) Descriptor() ([]byte, []int) {
	return fileDescriptor_01d4ac3ab6ba660b, []int{6}
}
func (m *E2CellConfigRequestAttribute) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *E2CellConfigRequestAttribute) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_E2CellConfigRequestAttribute.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *E2CellConfigRequestAttribute) XXX_Merge(src proto.Message) {
	xxx_messageInfo_E2CellConfigRequestAttribute.Merge(m, src)
}
func (m *E2CellConfigRequestAttribute) XXX_Size() int {
	return m.Size()
}
func (m *E2CellConfigRequestAttribute) XXX_DiscardUnknown() {
	xxx_messageInfo_E2CellConfigRequestAttribute.DiscardUnknown(m)
}

var xxx_messageInfo_E2CellConfigRequestAttribute proto.InternalMessageInfo

func (m *E2CellConfigRequestAttribute) GetEcgi() *E2ECGI {
	if m != nil {
		return m.Ecgi
	}
	return nil
}

// CellConfigReport message
type E2CellConfigReportAttribute struct {
	Ecgi                   *E2ECGI        `protobuf:"bytes,1,opt,name=ecgi,proto3" json:"ecgi,omitempty"`
	Pci                    string         `protobuf:"bytes,2,opt,name=pci,proto3" json:"pci,omitempty"`
	CandScells             []*E2CandScell `protobuf:"bytes,3,rep,name=candScells,proto3" json:"candScells,omitempty"`
	EarfcnDl               string         `protobuf:"bytes,4,opt,name=earfcnDl,proto3" json:"earfcnDl,omitempty"`
	EarfcnUl               string         `protobuf:"bytes,5,opt,name=earfcnUl,proto3" json:"earfcnUl,omitempty"`
	RbsPerTtiDl            string         `protobuf:"bytes,6,opt,name=rbsPerTtiDl,proto3" json:"rbsPerTtiDl,omitempty"`
	RbsPerTtiUl            string         `protobuf:"bytes,7,opt,name=rbsPerTtiUl,proto3" json:"rbsPerTtiUl,omitempty"`
	NumTxAntenna           string         `protobuf:"bytes,8,opt,name=numTxAntenna,proto3" json:"numTxAntenna,omitempty"`
	DuplexMode             string         `protobuf:"bytes,9,opt,name=duplexMode,proto3" json:"duplexMode,omitempty"`
	MaxNumConnectedUes     string         `protobuf:"bytes,10,opt,name=maxNumConnectedUes,proto3" json:"maxNumConnectedUes,omitempty"`
	MaxNumConnectedBearers string         `protobuf:"bytes,11,opt,name=maxNumConnectedBearers,proto3" json:"maxNumConnectedBearers,omitempty"`
	MaxNumUesSchedPerTtiDl string         `protobuf:"bytes,12,opt,name=maxNumUesSchedPerTtiDl,proto3" json:"maxNumUesSchedPerTtiDl,omitempty"`
	MaxNumUesSchedPerTtiUl string         `protobuf:"bytes,13,opt,name=maxNumUesSchedPerTtiUl,proto3" json:"maxNumUesSchedPerTtiUl,omitempty"`
	DlfsSchedEnable        string         `protobuf:"bytes,14,opt,name=dlfsSchedEnable,proto3" json:"dlfsSchedEnable,omitempty"`
}

func (m *E2CellConfigReportAttribute) Reset()         { *m = E2CellConfigReportAttribute{} }
func (m *E2CellConfigReportAttribute) String() string { return proto.CompactTextString(m) }
func (*E2CellConfigReportAttribute) ProtoMessage()    {}
func (*E2CellConfigReportAttribute) Descriptor() ([]byte, []int) {
	return fileDescriptor_01d4ac3ab6ba660b, []int{7}
}
func (m *E2CellConfigReportAttribute) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *E2CellConfigReportAttribute) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_E2CellConfigReportAttribute.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *E2CellConfigReportAttribute) XXX_Merge(src proto.Message) {
	xxx_messageInfo_E2CellConfigReportAttribute.Merge(m, src)
}
func (m *E2CellConfigReportAttribute) XXX_Size() int {
	return m.Size()
}
func (m *E2CellConfigReportAttribute) XXX_DiscardUnknown() {
	xxx_messageInfo_E2CellConfigReportAttribute.DiscardUnknown(m)
}

var xxx_messageInfo_E2CellConfigReportAttribute proto.InternalMessageInfo

func (m *E2CellConfigReportAttribute) GetEcgi() *E2ECGI {
	if m != nil {
		return m.Ecgi
	}
	return nil
}

func (m *E2CellConfigReportAttribute) GetPci() string {
	if m != nil {
		return m.Pci
	}
	return ""
}

func (m *E2CellConfigReportAttribute) GetCandScells() []*E2CandScell {
	if m != nil {
		return m.CandScells
	}
	return nil
}

func (m *E2CellConfigReportAttribute) GetEarfcnDl() string {
	if m != nil {
		return m.EarfcnDl
	}
	return ""
}

func (m *E2CellConfigReportAttribute) GetEarfcnUl() string {
	if m != nil {
		return m.EarfcnUl
	}
	return ""
}

func (m *E2CellConfigReportAttribute) GetRbsPerTtiDl() string {
	if m != nil {
		return m.RbsPerTtiDl
	}
	return ""
}

func (m *E2CellConfigReportAttribute) GetRbsPerTtiUl() string {
	if m != nil {
		return m.RbsPerTtiUl
	}
	return ""
}

func (m *E2CellConfigReportAttribute) GetNumTxAntenna() string {
	if m != nil {
		return m.NumTxAntenna
	}
	return ""
}

func (m *E2CellConfigReportAttribute) GetDuplexMode() string {
	if m != nil {
		return m.DuplexMode
	}
	return ""
}

func (m *E2CellConfigReportAttribute) GetMaxNumConnectedUes() string {
	if m != nil {
		return m.MaxNumConnectedUes
	}
	return ""
}

func (m *E2CellConfigReportAttribute) GetMaxNumConnectedBearers() string {
	if m != nil {
		return m.MaxNumConnectedBearers
	}
	return ""
}

func (m *E2CellConfigReportAttribute) GetMaxNumUesSchedPerTtiDl() string {
	if m != nil {
		return m.MaxNumUesSchedPerTtiDl
	}
	return ""
}

func (m *E2CellConfigReportAttribute) GetMaxNumUesSchedPerTtiUl() string {
	if m != nil {
		return m.MaxNumUesSchedPerTtiUl
	}
	return ""
}

func (m *E2CellConfigReportAttribute) GetDlfsSchedEnable() string {
	if m != nil {
		return m.DlfsSchedEnable
	}
	return ""
}

// UEAdmissionRequest message
type E2UEAdmissionRequestAttribute struct {
	Crnti             string        `protobuf:"bytes,1,opt,name=crnti,proto3" json:"crnti,omitempty"`
	Ecgi              *E2ECGI       `protobuf:"bytes,2,opt,name=ecgi,proto3" json:"ecgi,omitempty"`
	AdmissionEstCause E2AdmEstCause `protobuf:"varint,3,opt,name=admissionEstCause,proto3,enum=ran.e2.E2AdmEstCause" json:"admissionEstCause,omitempty"`
}

func (m *E2UEAdmissionRequestAttribute) Reset()         { *m = E2UEAdmissionRequestAttribute{} }
func (m *E2UEAdmissionRequestAttribute) String() string { return proto.CompactTextString(m) }
func (*E2UEAdmissionRequestAttribute) ProtoMessage()    {}
func (*E2UEAdmissionRequestAttribute) Descriptor() ([]byte, []int) {
	return fileDescriptor_01d4ac3ab6ba660b, []int{8}
}
func (m *E2UEAdmissionRequestAttribute) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *E2UEAdmissionRequestAttribute) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_E2UEAdmissionRequestAttribute.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *E2UEAdmissionRequestAttribute) XXX_Merge(src proto.Message) {
	xxx_messageInfo_E2UEAdmissionRequestAttribute.Merge(m, src)
}
func (m *E2UEAdmissionRequestAttribute) XXX_Size() int {
	return m.Size()
}
func (m *E2UEAdmissionRequestAttribute) XXX_DiscardUnknown() {
	xxx_messageInfo_E2UEAdmissionRequestAttribute.DiscardUnknown(m)
}

var xxx_messageInfo_E2UEAdmissionRequestAttribute proto.InternalMessageInfo

func (m *E2UEAdmissionRequestAttribute) GetCrnti() string {
	if m != nil {
		return m.Crnti
	}
	return ""
}

func (m *E2UEAdmissionRequestAttribute) GetEcgi() *E2ECGI {
	if m != nil {
		return m.Ecgi
	}
	return nil
}

func (m *E2UEAdmissionRequestAttribute) GetAdmissionEstCause() E2AdmEstCause {
	if m != nil {
		return m.AdmissionEstCause
	}
	return E2AdmEstCause_E2_EMERGENCY
}

// UEAdmissionResponse message
type E2UEAdmissionResponseAttribute struct {
	Crnti                string             `protobuf:"bytes,1,opt,name=crnti,proto3" json:"crnti,omitempty"`
	Ecgi                 *E2ECGI            `protobuf:"bytes,2,opt,name=ecgi,proto3" json:"ecgi,omitempty"`
	AdmissionEstResponse E2SuccessOrFailure `protobuf:"varint,3,opt,name=admissionEstResponse,proto3,enum=ran.e2.E2SuccessOrFailure" json:"admissionEstResponse,omitempty"`
}

func (m *E2UEAdmissionResponseAttribute) Reset()         { *m = E2UEAdmissionResponseAttribute{} }
func (m *E2UEAdmissionResponseAttribute) String() string { return proto.CompactTextString(m) }
func (*E2UEAdmissionResponseAttribute) ProtoMessage()    {}
func (*E2UEAdmissionResponseAttribute) Descriptor() ([]byte, []int) {
	return fileDescriptor_01d4ac3ab6ba660b, []int{9}
}
func (m *E2UEAdmissionResponseAttribute) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *E2UEAdmissionResponseAttribute) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_E2UEAdmissionResponseAttribute.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *E2UEAdmissionResponseAttribute) XXX_Merge(src proto.Message) {
	xxx_messageInfo_E2UEAdmissionResponseAttribute.Merge(m, src)
}
func (m *E2UEAdmissionResponseAttribute) XXX_Size() int {
	return m.Size()
}
func (m *E2UEAdmissionResponseAttribute) XXX_DiscardUnknown() {
	xxx_messageInfo_E2UEAdmissionResponseAttribute.DiscardUnknown(m)
}

var xxx_messageInfo_E2UEAdmissionResponseAttribute proto.InternalMessageInfo

func (m *E2UEAdmissionResponseAttribute) GetCrnti() string {
	if m != nil {
		return m.Crnti
	}
	return ""
}

func (m *E2UEAdmissionResponseAttribute) GetEcgi() *E2ECGI {
	if m != nil {
		return m.Ecgi
	}
	return nil
}

func (m *E2UEAdmissionResponseAttribute) GetAdmissionEstResponse() E2SuccessOrFailure {
	if m != nil {
		return m.AdmissionEstResponse
	}
	return E2SuccessOrFailure_E2_SUCCESS
}

// UEAdmissionStatus message
type E2UEAdmissionStatusAttribute struct {
	Crnti              string             `protobuf:"bytes,1,opt,name=crnti,proto3" json:"crnti,omitempty"`
	Ecgi               *E2ECGI            `protobuf:"bytes,2,opt,name=ecgi,proto3" json:"ecgi,omitempty"`
	AdmissionEstStatus E2SuccessOrFailure `protobuf:"varint,3,opt,name=admissionEstStatus,proto3,enum=ran.e2.E2SuccessOrFailure" json:"admissionEstStatus,omitempty"`
}

func (m *E2UEAdmissionStatusAttribute) Reset()         { *m = E2UEAdmissionStatusAttribute{} }
func (m *E2UEAdmissionStatusAttribute) String() string { return proto.CompactTextString(m) }
func (*E2UEAdmissionStatusAttribute) ProtoMessage()    {}
func (*E2UEAdmissionStatusAttribute) Descriptor() ([]byte, []int) {
	return fileDescriptor_01d4ac3ab6ba660b, []int{10}
}
func (m *E2UEAdmissionStatusAttribute) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *E2UEAdmissionStatusAttribute) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_E2UEAdmissionStatusAttribute.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *E2UEAdmissionStatusAttribute) XXX_Merge(src proto.Message) {
	xxx_messageInfo_E2UEAdmissionStatusAttribute.Merge(m, src)
}
func (m *E2UEAdmissionStatusAttribute) XXX_Size() int {
	return m.Size()
}
func (m *E2UEAdmissionStatusAttribute) XXX_DiscardUnknown() {
	xxx_messageInfo_E2UEAdmissionStatusAttribute.DiscardUnknown(m)
}

var xxx_messageInfo_E2UEAdmissionStatusAttribute proto.InternalMessageInfo

func (m *E2UEAdmissionStatusAttribute) GetCrnti() string {
	if m != nil {
		return m.Crnti
	}
	return ""
}

func (m *E2UEAdmissionStatusAttribute) GetEcgi() *E2ECGI {
	if m != nil {
		return m.Ecgi
	}
	return nil
}

func (m *E2UEAdmissionStatusAttribute) GetAdmissionEstStatus() E2SuccessOrFailure {
	if m != nil {
		return m.AdmissionEstStatus
	}
	return E2SuccessOrFailure_E2_SUCCESS
}

// UEContextUpdate message
type E2UEContextUpdateAttribute struct {
	Crnti       string  `protobuf:"bytes,1,opt,name=crnti,proto3" json:"crnti,omitempty"`
	Ecgi        *E2ECGI `protobuf:"bytes,2,opt,name=ecgi,proto3" json:"ecgi,omitempty"`
	MmeUeS1ApId string  `protobuf:"bytes,3,opt,name=mmeUeS1apId,proto3" json:"mmeUeS1apId,omitempty"`
	EnbUeS1ApId string  `protobuf:"bytes,4,opt,name=enbUeS1apId,proto3" json:"enbUeS1apId,omitempty"`
	Imsi        string  `protobuf:"bytes,5,opt,name=imsi,proto3" json:"imsi,omitempty"`
}

func (m *E2UEContextUpdateAttribute) Reset()         { *m = E2UEContextUpdateAttribute{} }
func (m *E2UEContextUpdateAttribute) String() string { return proto.CompactTextString(m) }
func (*E2UEContextUpdateAttribute) ProtoMessage()    {}
func (*E2UEContextUpdateAttribute) Descriptor() ([]byte, []int) {
	return fileDescriptor_01d4ac3ab6ba660b, []int{11}
}
func (m *E2UEContextUpdateAttribute) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *E2UEContextUpdateAttribute) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_E2UEContextUpdateAttribute.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *E2UEContextUpdateAttribute) XXX_Merge(src proto.Message) {
	xxx_messageInfo_E2UEContextUpdateAttribute.Merge(m, src)
}
func (m *E2UEContextUpdateAttribute) XXX_Size() int {
	return m.Size()
}
func (m *E2UEContextUpdateAttribute) XXX_DiscardUnknown() {
	xxx_messageInfo_E2UEContextUpdateAttribute.DiscardUnknown(m)
}

var xxx_messageInfo_E2UEContextUpdateAttribute proto.InternalMessageInfo

func (m *E2UEContextUpdateAttribute) GetCrnti() string {
	if m != nil {
		return m.Crnti
	}
	return ""
}

func (m *E2UEContextUpdateAttribute) GetEcgi() *E2ECGI {
	if m != nil {
		return m.Ecgi
	}
	return nil
}

func (m *E2UEContextUpdateAttribute) GetMmeUeS1ApId() string {
	if m != nil {
		return m.MmeUeS1ApId
	}
	return ""
}

func (m *E2UEContextUpdateAttribute) GetEnbUeS1ApId() string {
	if m != nil {
		return m.EnbUeS1ApId
	}
	return ""
}

func (m *E2UEContextUpdateAttribute) GetImsi() string {
	if m != nil {
		return m.Imsi
	}
	return ""
}

// UEReconfigInd message
type E2UEReconfigIndAttribute struct {
	CrntiOld      string          `protobuf:"bytes,1,opt,name=crntiOld,proto3" json:"crntiOld,omitempty"`
	Ecgi          *E2ECGI         `protobuf:"bytes,2,opt,name=ecgi,proto3" json:"ecgi,omitempty"`
	CrntiNew      string          `protobuf:"bytes,3,opt,name=crntiNew,proto3" json:"crntiNew,omitempty"`
	ReconfigCause E2ReconfigCause `protobuf:"varint,4,opt,name=reconfigCause,proto3,enum=ran.e2.E2ReconfigCause" json:"reconfigCause,omitempty"`
}

func (m *E2UEReconfigIndAttribute) Reset()         { *m = E2UEReconfigIndAttribute{} }
func (m *E2UEReconfigIndAttribute) String() string { return proto.CompactTextString(m) }
func (*E2UEReconfigIndAttribute) ProtoMessage()    {}
func (*E2UEReconfigIndAttribute) Descriptor() ([]byte, []int) {
	return fileDescriptor_01d4ac3ab6ba660b, []int{12}
}
func (m *E2UEReconfigIndAttribute) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *E2UEReconfigIndAttribute) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_E2UEReconfigIndAttribute.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *E2UEReconfigIndAttribute) XXX_Merge(src proto.Message) {
	xxx_messageInfo_E2UEReconfigIndAttribute.Merge(m, src)
}
func (m *E2UEReconfigIndAttribute) XXX_Size() int {
	return m.Size()
}
func (m *E2UEReconfigIndAttribute) XXX_DiscardUnknown() {
	xxx_messageInfo_E2UEReconfigIndAttribute.DiscardUnknown(m)
}

var xxx_messageInfo_E2UEReconfigIndAttribute proto.InternalMessageInfo

func (m *E2UEReconfigIndAttribute) GetCrntiOld() string {
	if m != nil {
		return m.CrntiOld
	}
	return ""
}

func (m *E2UEReconfigIndAttribute) GetEcgi() *E2ECGI {
	if m != nil {
		return m.Ecgi
	}
	return nil
}

func (m *E2UEReconfigIndAttribute) GetCrntiNew() string {
	if m != nil {
		return m.CrntiNew
	}
	return ""
}

func (m *E2UEReconfigIndAttribute) GetReconfigCause() E2ReconfigCause {
	if m != nil {
		return m.ReconfigCause
	}
	return E2ReconfigCause_E2_RECONFIG_RLF
}

// UEReleaseInd message
type E2UEReleaseIndAttribute struct {
	Crnti        string         `protobuf:"bytes,1,opt,name=crnti,proto3" json:"crnti,omitempty"`
	Ecgi         *E2ECGI        `protobuf:"bytes,2,opt,name=ecgi,proto3" json:"ecgi,omitempty"`
	ReleaseCause E2ReleaseCause `protobuf:"varint,3,opt,name=releaseCause,proto3,enum=ran.e2.E2ReleaseCause" json:"releaseCause,omitempty"`
}

func (m *E2UEReleaseIndAttribute) Reset()         { *m = E2UEReleaseIndAttribute{} }
func (m *E2UEReleaseIndAttribute) String() string { return proto.CompactTextString(m) }
func (*E2UEReleaseIndAttribute) ProtoMessage()    {}
func (*E2UEReleaseIndAttribute) Descriptor() ([]byte, []int) {
	return fileDescriptor_01d4ac3ab6ba660b, []int{13}
}
func (m *E2UEReleaseIndAttribute) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *E2UEReleaseIndAttribute) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_E2UEReleaseIndAttribute.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *E2UEReleaseIndAttribute) XXX_Merge(src proto.Message) {
	xxx_messageInfo_E2UEReleaseIndAttribute.Merge(m, src)
}
func (m *E2UEReleaseIndAttribute) XXX_Size() int {
	return m.Size()
}
func (m *E2UEReleaseIndAttribute) XXX_DiscardUnknown() {
	xxx_messageInfo_E2UEReleaseIndAttribute.DiscardUnknown(m)
}

var xxx_messageInfo_E2UEReleaseIndAttribute proto.InternalMessageInfo

func (m *E2UEReleaseIndAttribute) GetCrnti() string {
	if m != nil {
		return m.Crnti
	}
	return ""
}

func (m *E2UEReleaseIndAttribute) GetEcgi() *E2ECGI {
	if m != nil {
		return m.Ecgi
	}
	return nil
}

func (m *E2UEReleaseIndAttribute) GetReleaseCause() E2ReleaseCause {
	if m != nil {
		return m.ReleaseCause
	}
	return E2ReleaseCause_E2_RELEASE_INACTIVITY
}

type E2UEAMBR struct {
	AmbrDl string `protobuf:"bytes,1,opt,name=ambrDl,proto3" json:"ambrDl,omitempty"`
	AmbrUl string `protobuf:"bytes,2,opt,name=ambrUl,proto3" json:"ambrUl,omitempty"`
}

func (m *E2UEAMBR) Reset()         { *m = E2UEAMBR{} }
func (m *E2UEAMBR) String() string { return proto.CompactTextString(m) }
func (*E2UEAMBR) ProtoMessage()    {}
func (*E2UEAMBR) Descriptor() ([]byte, []int) {
	return fileDescriptor_01d4ac3ab6ba660b, []int{14}
}
func (m *E2UEAMBR) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *E2UEAMBR) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_E2UEAMBR.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *E2UEAMBR) XXX_Merge(src proto.Message) {
	xxx_messageInfo_E2UEAMBR.Merge(m, src)
}
func (m *E2UEAMBR) XXX_Size() int {
	return m.Size()
}
func (m *E2UEAMBR) XXX_DiscardUnknown() {
	xxx_messageInfo_E2UEAMBR.DiscardUnknown(m)
}

var xxx_messageInfo_E2UEAMBR proto.InternalMessageInfo

func (m *E2UEAMBR) GetAmbrDl() string {
	if m != nil {
		return m.AmbrDl
	}
	return ""
}

func (m *E2UEAMBR) GetAmbrUl() string {
	if m != nil {
		return m.AmbrUl
	}
	return ""
}

type E2ERABParamsItem struct {
	Id        string          `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Direction E2ERABDirection `protobuf:"varint,2,opt,name=direction,proto3,enum=ran.e2.E2ERABDirection" json:"direction,omitempty"`
	Type      E2ERABType      `protobuf:"varint,3,opt,name=type,proto3,enum=ran.e2.E2ERABType" json:"type,omitempty"`
	Qci       string          `protobuf:"bytes,4,opt,name=qci,proto3" json:"qci,omitempty"`
	Arp       string          `protobuf:"bytes,5,opt,name=arp,proto3" json:"arp,omitempty"`
	GbrDl     string          `protobuf:"bytes,6,opt,name=gbrDl,proto3" json:"gbrDl,omitempty"`
	GbrUl     string          `protobuf:"bytes,7,opt,name=gbrUl,proto3" json:"gbrUl,omitempty"`
	MbrDl     string          `protobuf:"bytes,8,opt,name=mbrDl,proto3" json:"mbrDl,omitempty"`
	MbrUl     string          `protobuf:"bytes,9,opt,name=mbrUl,proto3" json:"mbrUl,omitempty"`
}

func (m *E2ERABParamsItem) Reset()         { *m = E2ERABParamsItem{} }
func (m *E2ERABParamsItem) String() string { return proto.CompactTextString(m) }
func (*E2ERABParamsItem) ProtoMessage()    {}
func (*E2ERABParamsItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_01d4ac3ab6ba660b, []int{15}
}
func (m *E2ERABParamsItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *E2ERABParamsItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_E2ERABParamsItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *E2ERABParamsItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_E2ERABParamsItem.Merge(m, src)
}
func (m *E2ERABParamsItem) XXX_Size() int {
	return m.Size()
}
func (m *E2ERABParamsItem) XXX_DiscardUnknown() {
	xxx_messageInfo_E2ERABParamsItem.DiscardUnknown(m)
}

var xxx_messageInfo_E2ERABParamsItem proto.InternalMessageInfo

func (m *E2ERABParamsItem) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *E2ERABParamsItem) GetDirection() E2ERABDirection {
	if m != nil {
		return m.Direction
	}
	return E2ERABDirection_E2_DL
}

func (m *E2ERABParamsItem) GetType() E2ERABType {
	if m != nil {
		return m.Type
	}
	return E2ERABType_E2_ERAB_DEFAULT
}

func (m *E2ERABParamsItem) GetQci() string {
	if m != nil {
		return m.Qci
	}
	return ""
}

func (m *E2ERABParamsItem) GetArp() string {
	if m != nil {
		return m.Arp
	}
	return ""
}

func (m *E2ERABParamsItem) GetGbrDl() string {
	if m != nil {
		return m.GbrDl
	}
	return ""
}

func (m *E2ERABParamsItem) GetGbrUl() string {
	if m != nil {
		return m.GbrUl
	}
	return ""
}

func (m *E2ERABParamsItem) GetMbrDl() string {
	if m != nil {
		return m.MbrDl
	}
	return ""
}

func (m *E2ERABParamsItem) GetMbrUl() string {
	if m != nil {
		return m.MbrUl
	}
	return ""
}

type E2ERABResponseItem struct {
	Id       string             `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Decision E2SuccessOrFailure `protobuf:"varint,2,opt,name=decision,proto3,enum=ran.e2.E2SuccessOrFailure" json:"decision,omitempty"`
}

func (m *E2ERABResponseItem) Reset()         { *m = E2ERABResponseItem{} }
func (m *E2ERABResponseItem) String() string { return proto.CompactTextString(m) }
func (*E2ERABResponseItem) ProtoMessage()    {}
func (*E2ERABResponseItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_01d4ac3ab6ba660b, []int{16}
}
func (m *E2ERABResponseItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *E2ERABResponseItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_E2ERABResponseItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *E2ERABResponseItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_E2ERABResponseItem.Merge(m, src)
}
func (m *E2ERABResponseItem) XXX_Size() int {
	return m.Size()
}
func (m *E2ERABResponseItem) XXX_DiscardUnknown() {
	xxx_messageInfo_E2ERABResponseItem.DiscardUnknown(m)
}

var xxx_messageInfo_E2ERABResponseItem proto.InternalMessageInfo

func (m *E2ERABResponseItem) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *E2ERABResponseItem) GetDecision() E2SuccessOrFailure {
	if m != nil {
		return m.Decision
	}
	return E2SuccessOrFailure_E2_SUCCESS
}

// BearerAdmissionRequest message
type E2BearerAdmissionRequestAttribute struct {
	Crnti        string              `protobuf:"bytes,1,opt,name=crnti,proto3" json:"crnti,omitempty"`
	Ecgi         *E2ECGI             `protobuf:"bytes,2,opt,name=ecgi,proto3" json:"ecgi,omitempty"`
	UeAmbr       *E2UEAMBR           `protobuf:"bytes,3,opt,name=ueAmbr,proto3" json:"ueAmbr,omitempty"`
	NumErabsList string              `protobuf:"bytes,4,opt,name=numErabsList,proto3" json:"numErabsList,omitempty"`
	ErabsParams  []*E2ERABParamsItem `protobuf:"bytes,5,rep,name=erabsParams,proto3" json:"erabsParams,omitempty"`
}

func (m *E2BearerAdmissionRequestAttribute) Reset()         { *m = E2BearerAdmissionRequestAttribute{} }
func (m *E2BearerAdmissionRequestAttribute) String() string { return proto.CompactTextString(m) }
func (*E2BearerAdmissionRequestAttribute) ProtoMessage()    {}
func (*E2BearerAdmissionRequestAttribute) Descriptor() ([]byte, []int) {
	return fileDescriptor_01d4ac3ab6ba660b, []int{17}
}
func (m *E2BearerAdmissionRequestAttribute) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *E2BearerAdmissionRequestAttribute) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_E2BearerAdmissionRequestAttribute.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *E2BearerAdmissionRequestAttribute) XXX_Merge(src proto.Message) {
	xxx_messageInfo_E2BearerAdmissionRequestAttribute.Merge(m, src)
}
func (m *E2BearerAdmissionRequestAttribute) XXX_Size() int {
	return m.Size()
}
func (m *E2BearerAdmissionRequestAttribute) XXX_DiscardUnknown() {
	xxx_messageInfo_E2BearerAdmissionRequestAttribute.DiscardUnknown(m)
}

var xxx_messageInfo_E2BearerAdmissionRequestAttribute proto.InternalMessageInfo

func (m *E2BearerAdmissionRequestAttribute) GetCrnti() string {
	if m != nil {
		return m.Crnti
	}
	return ""
}

func (m *E2BearerAdmissionRequestAttribute) GetEcgi() *E2ECGI {
	if m != nil {
		return m.Ecgi
	}
	return nil
}

func (m *E2BearerAdmissionRequestAttribute) GetUeAmbr() *E2UEAMBR {
	if m != nil {
		return m.UeAmbr
	}
	return nil
}

func (m *E2BearerAdmissionRequestAttribute) GetNumErabsList() string {
	if m != nil {
		return m.NumErabsList
	}
	return ""
}

func (m *E2BearerAdmissionRequestAttribute) GetErabsParams() []*E2ERABParamsItem {
	if m != nil {
		return m.ErabsParams
	}
	return nil
}

// BearerAdmissionResponse message
type E2BearerAdmissionResponseAttribute struct {
	Crnti        string                `protobuf:"bytes,1,opt,name=crnti,proto3" json:"crnti,omitempty"`
	Ecgi         *E2ECGI               `protobuf:"bytes,2,opt,name=ecgi,proto3" json:"ecgi,omitempty"`
	NumErabsList string                `protobuf:"bytes,3,opt,name=numErabsList,proto3" json:"numErabsList,omitempty"`
	ErabResponse []*E2ERABResponseItem `protobuf:"bytes,4,rep,name=erabResponse,proto3" json:"erabResponse,omitempty"`
}

func (m *E2BearerAdmissionResponseAttribute) Reset()         { *m = E2BearerAdmissionResponseAttribute{} }
func (m *E2BearerAdmissionResponseAttribute) String() string { return proto.CompactTextString(m) }
func (*E2BearerAdmissionResponseAttribute) ProtoMessage()    {}
func (*E2BearerAdmissionResponseAttribute) Descriptor() ([]byte, []int) {
	return fileDescriptor_01d4ac3ab6ba660b, []int{18}
}
func (m *E2BearerAdmissionResponseAttribute) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *E2BearerAdmissionResponseAttribute) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_E2BearerAdmissionResponseAttribute.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *E2BearerAdmissionResponseAttribute) XXX_Merge(src proto.Message) {
	xxx_messageInfo_E2BearerAdmissionResponseAttribute.Merge(m, src)
}
func (m *E2BearerAdmissionResponseAttribute) XXX_Size() int {
	return m.Size()
}
func (m *E2BearerAdmissionResponseAttribute) XXX_DiscardUnknown() {
	xxx_messageInfo_E2BearerAdmissionResponseAttribute.DiscardUnknown(m)
}

var xxx_messageInfo_E2BearerAdmissionResponseAttribute proto.InternalMessageInfo

func (m *E2BearerAdmissionResponseAttribute) GetCrnti() string {
	if m != nil {
		return m.Crnti
	}
	return ""
}

func (m *E2BearerAdmissionResponseAttribute) GetEcgi() *E2ECGI {
	if m != nil {
		return m.Ecgi
	}
	return nil
}

func (m *E2BearerAdmissionResponseAttribute) GetNumErabsList() string {
	if m != nil {
		return m.NumErabsList
	}
	return ""
}

func (m *E2BearerAdmissionResponseAttribute) GetErabResponse() []*E2ERABResponseItem {
	if m != nil {
		return m.ErabResponse
	}
	return nil
}

// BearerAdmissionStatus message
type E2BearerAdmissionStatusAttribute struct {
	Crnti        string                `protobuf:"bytes,1,opt,name=crnti,proto3" json:"crnti,omitempty"`
	Ecgi         *E2ECGI               `protobuf:"bytes,2,opt,name=ecgi,proto3" json:"ecgi,omitempty"`
	NumErabsList string                `protobuf:"bytes,3,opt,name=numErabsList,proto3" json:"numErabsList,omitempty"`
	ErabStatus   []*E2ERABResponseItem `protobuf:"bytes,4,rep,name=erabStatus,proto3" json:"erabStatus,omitempty"`
}

func (m *E2BearerAdmissionStatusAttribute) Reset()         { *m = E2BearerAdmissionStatusAttribute{} }
func (m *E2BearerAdmissionStatusAttribute) String() string { return proto.CompactTextString(m) }
func (*E2BearerAdmissionStatusAttribute) ProtoMessage()    {}
func (*E2BearerAdmissionStatusAttribute) Descriptor() ([]byte, []int) {
	return fileDescriptor_01d4ac3ab6ba660b, []int{19}
}
func (m *E2BearerAdmissionStatusAttribute) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *E2BearerAdmissionStatusAttribute) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_E2BearerAdmissionStatusAttribute.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *E2BearerAdmissionStatusAttribute) XXX_Merge(src proto.Message) {
	xxx_messageInfo_E2BearerAdmissionStatusAttribute.Merge(m, src)
}
func (m *E2BearerAdmissionStatusAttribute) XXX_Size() int {
	return m.Size()
}
func (m *E2BearerAdmissionStatusAttribute) XXX_DiscardUnknown() {
	xxx_messageInfo_E2BearerAdmissionStatusAttribute.DiscardUnknown(m)
}

var xxx_messageInfo_E2BearerAdmissionStatusAttribute proto.InternalMessageInfo

func (m *E2BearerAdmissionStatusAttribute) GetCrnti() string {
	if m != nil {
		return m.Crnti
	}
	return ""
}

func (m *E2BearerAdmissionStatusAttribute) GetEcgi() *E2ECGI {
	if m != nil {
		return m.Ecgi
	}
	return nil
}

func (m *E2BearerAdmissionStatusAttribute) GetNumErabsList() string {
	if m != nil {
		return m.NumErabsList
	}
	return ""
}

func (m *E2BearerAdmissionStatusAttribute) GetErabStatus() []*E2ERABResponseItem {
	if m != nil {
		return m.ErabStatus
	}
	return nil
}

// BearerReleaseInd message
type E2BearerReleaseIndAttribute struct {
	Crnti        string   `protobuf:"bytes,1,opt,name=crnti,proto3" json:"crnti,omitempty"`
	Ecgi         *E2ECGI  `protobuf:"bytes,2,opt,name=ecgi,proto3" json:"ecgi,omitempty"`
	NumErabsList string   `protobuf:"bytes,3,opt,name=numErabsList,proto3" json:"numErabsList,omitempty"`
	ErabIds      []string `protobuf:"bytes,4,rep,name=erabIds,proto3" json:"erabIds,omitempty"`
}

func (m *E2BearerReleaseIndAttribute) Reset()         { *m = E2BearerReleaseIndAttribute{} }
func (m *E2BearerReleaseIndAttribute) String() string { return proto.CompactTextString(m) }
func (*E2BearerReleaseIndAttribute) ProtoMessage()    {}
func (*E2BearerReleaseIndAttribute) Descriptor() ([]byte, []int) {
	return fileDescriptor_01d4ac3ab6ba660b, []int{20}
}
func (m *E2BearerReleaseIndAttribute) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *E2BearerReleaseIndAttribute) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_E2BearerReleaseIndAttribute.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *E2BearerReleaseIndAttribute) XXX_Merge(src proto.Message) {
	xxx_messageInfo_E2BearerReleaseIndAttribute.Merge(m, src)
}
func (m *E2BearerReleaseIndAttribute) XXX_Size() int {
	return m.Size()
}
func (m *E2BearerReleaseIndAttribute) XXX_DiscardUnknown() {
	xxx_messageInfo_E2BearerReleaseIndAttribute.DiscardUnknown(m)
}

var xxx_messageInfo_E2BearerReleaseIndAttribute proto.InternalMessageInfo

func (m *E2BearerReleaseIndAttribute) GetCrnti() string {
	if m != nil {
		return m.Crnti
	}
	return ""
}

func (m *E2BearerReleaseIndAttribute) GetEcgi() *E2ECGI {
	if m != nil {
		return m.Ecgi
	}
	return nil
}

func (m *E2BearerReleaseIndAttribute) GetNumErabsList() string {
	if m != nil {
		return m.NumErabsList
	}
	return ""
}

func (m *E2BearerReleaseIndAttribute) GetErabIds() []string {
	if m != nil {
		return m.ErabIds
	}
	return nil
}

// HORequest message
type E2HORequestAttribute struct {
	Crnti string  `protobuf:"bytes,1,opt,name=crnti,proto3" json:"crnti,omitempty"`
	EcgiS *E2ECGI `protobuf:"bytes,2,opt,name=ecgiS,proto3" json:"ecgiS,omitempty"`
	EcgiT *E2ECGI `protobuf:"bytes,3,opt,name=ecgiT,proto3" json:"ecgiT,omitempty"`
}

func (m *E2HORequestAttribute) Reset()         { *m = E2HORequestAttribute{} }
func (m *E2HORequestAttribute) String() string { return proto.CompactTextString(m) }
func (*E2HORequestAttribute) ProtoMessage()    {}
func (*E2HORequestAttribute) Descriptor() ([]byte, []int) {
	return fileDescriptor_01d4ac3ab6ba660b, []int{21}
}
func (m *E2HORequestAttribute) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *E2HORequestAttribute) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_E2HORequestAttribute.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *E2HORequestAttribute) XXX_Merge(src proto.Message) {
	xxx_messageInfo_E2HORequestAttribute.Merge(m, src)
}
func (m *E2HORequestAttribute) XXX_Size() int {
	return m.Size()
}
func (m *E2HORequestAttribute) XXX_DiscardUnknown() {
	xxx_messageInfo_E2HORequestAttribute.DiscardUnknown(m)
}

var xxx_messageInfo_E2HORequestAttribute proto.InternalMessageInfo

func (m *E2HORequestAttribute) GetCrnti() string {
	if m != nil {
		return m.Crnti
	}
	return ""
}

func (m *E2HORequestAttribute) GetEcgiS() *E2ECGI {
	if m != nil {
		return m.EcgiS
	}
	return nil
}

func (m *E2HORequestAttribute) GetEcgiT() *E2ECGI {
	if m != nil {
		return m.EcgiT
	}
	return nil
}

// HOFailure message
type E2HOFailureAttribute struct {
	Crnti          string  `protobuf:"bytes,1,opt,name=crnti,proto3" json:"crnti,omitempty"`
	EcgiS          *E2ECGI `protobuf:"bytes,2,opt,name=ecgiS,proto3" json:"ecgiS,omitempty"`
	HoFailureCause string  `protobuf:"bytes,3,opt,name=hoFailureCause,proto3" json:"hoFailureCause,omitempty"`
}

func (m *E2HOFailureAttribute) Reset()         { *m = E2HOFailureAttribute{} }
func (m *E2HOFailureAttribute) String() string { return proto.CompactTextString(m) }
func (*E2HOFailureAttribute) ProtoMessage()    {}
func (*E2HOFailureAttribute) Descriptor() ([]byte, []int) {
	return fileDescriptor_01d4ac3ab6ba660b, []int{22}
}
func (m *E2HOFailureAttribute) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *E2HOFailureAttribute) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_E2HOFailureAttribute.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *E2HOFailureAttribute) XXX_Merge(src proto.Message) {
	xxx_messageInfo_E2HOFailureAttribute.Merge(m, src)
}
func (m *E2HOFailureAttribute) XXX_Size() int {
	return m.Size()
}
func (m *E2HOFailureAttribute) XXX_DiscardUnknown() {
	xxx_messageInfo_E2HOFailureAttribute.DiscardUnknown(m)
}

var xxx_messageInfo_E2HOFailureAttribute proto.InternalMessageInfo

func (m *E2HOFailureAttribute) GetCrnti() string {
	if m != nil {
		return m.Crnti
	}
	return ""
}

func (m *E2HOFailureAttribute) GetEcgiS() *E2ECGI {
	if m != nil {
		return m.EcgiS
	}
	return nil
}

func (m *E2HOFailureAttribute) GetHoFailureCause() string {
	if m != nil {
		return m.HoFailureCause
	}
	return ""
}

// HOComplete message
type E2HOCompleteAttribute struct {
	CrntiNew string  `protobuf:"bytes,1,opt,name=crntiNew,proto3" json:"crntiNew,omitempty"`
	EcgiS    *E2ECGI `protobuf:"bytes,2,opt,name=ecgiS,proto3" json:"ecgiS,omitempty"`
	EcgiT    *E2ECGI `protobuf:"bytes,3,opt,name=ecgiT,proto3" json:"ecgiT,omitempty"`
}

func (m *E2HOCompleteAttribute) Reset()         { *m = E2HOCompleteAttribute{} }
func (m *E2HOCompleteAttribute) String() string { return proto.CompactTextString(m) }
func (*E2HOCompleteAttribute) ProtoMessage()    {}
func (*E2HOCompleteAttribute) Descriptor() ([]byte, []int) {
	return fileDescriptor_01d4ac3ab6ba660b, []int{23}
}
func (m *E2HOCompleteAttribute) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *E2HOCompleteAttribute) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_E2HOCompleteAttribute.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *E2HOCompleteAttribute) XXX_Merge(src proto.Message) {
	xxx_messageInfo_E2HOCompleteAttribute.Merge(m, src)
}
func (m *E2HOCompleteAttribute) XXX_Size() int {
	return m.Size()
}
func (m *E2HOCompleteAttribute) XXX_DiscardUnknown() {
	xxx_messageInfo_E2HOCompleteAttribute.DiscardUnknown(m)
}

var xxx_messageInfo_E2HOCompleteAttribute proto.InternalMessageInfo

func (m *E2HOCompleteAttribute) GetCrntiNew() string {
	if m != nil {
		return m.CrntiNew
	}
	return ""
}

func (m *E2HOCompleteAttribute) GetEcgiS() *E2ECGI {
	if m != nil {
		return m.EcgiS
	}
	return nil
}

func (m *E2HOCompleteAttribute) GetEcgiT() *E2ECGI {
	if m != nil {
		return m.EcgiT
	}
	return nil
}

// HOCause message
type E2HOCauseAttribute struct {
	Crnti     string           `protobuf:"bytes,1,opt,name=crnti,proto3" json:"crnti,omitempty"`
	EcgiS     *E2ECGI          `protobuf:"bytes,2,opt,name=ecgiS,proto3" json:"ecgiS,omitempty"`
	EcgiT     *E2ECGI          `protobuf:"bytes,3,opt,name=ecgiT,proto3" json:"ecgiT,omitempty"`
	HoCause   string           `protobuf:"bytes,4,opt,name=hoCause,proto3" json:"hoCause,omitempty"`
	HoTrigger []*E2RXSigReport `protobuf:"bytes,5,rep,name=hoTrigger,proto3" json:"hoTrigger,omitempty"`
}

func (m *E2HOCauseAttribute) Reset()         { *m = E2HOCauseAttribute{} }
func (m *E2HOCauseAttribute) String() string { return proto.CompactTextString(m) }
func (*E2HOCauseAttribute) ProtoMessage()    {}
func (*E2HOCauseAttribute) Descriptor() ([]byte, []int) {
	return fileDescriptor_01d4ac3ab6ba660b, []int{24}
}
func (m *E2HOCauseAttribute) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *E2HOCauseAttribute) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_E2HOCauseAttribute.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *E2HOCauseAttribute) XXX_Merge(src proto.Message) {
	xxx_messageInfo_E2HOCauseAttribute.Merge(m, src)
}
func (m *E2HOCauseAttribute) XXX_Size() int {
	return m.Size()
}
func (m *E2HOCauseAttribute) XXX_DiscardUnknown() {
	xxx_messageInfo_E2HOCauseAttribute.DiscardUnknown(m)
}

var xxx_messageInfo_E2HOCauseAttribute proto.InternalMessageInfo

func (m *E2HOCauseAttribute) GetCrnti() string {
	if m != nil {
		return m.Crnti
	}
	return ""
}

func (m *E2HOCauseAttribute) GetEcgiS() *E2ECGI {
	if m != nil {
		return m.EcgiS
	}
	return nil
}

func (m *E2HOCauseAttribute) GetEcgiT() *E2ECGI {
	if m != nil {
		return m.EcgiT
	}
	return nil
}

func (m *E2HOCauseAttribute) GetHoCause() string {
	if m != nil {
		return m.HoCause
	}
	return ""
}

func (m *E2HOCauseAttribute) GetHoTrigger() []*E2RXSigReport {
	if m != nil {
		return m.HoTrigger
	}
	return nil
}

type E2MeasCell struct {
	Pci                  string `protobuf:"bytes,1,opt,name=pci,proto3" json:"pci,omitempty"`
	CellIndividualOffset string `protobuf:"bytes,2,opt,name=cellIndividualOffset,proto3" json:"cellIndividualOffset,omitempty"`
}

func (m *E2MeasCell) Reset()         { *m = E2MeasCell{} }
func (m *E2MeasCell) String() string { return proto.CompactTextString(m) }
func (*E2MeasCell) ProtoMessage()    {}
func (*E2MeasCell) Descriptor() ([]byte, []int) {
	return fileDescriptor_01d4ac3ab6ba660b, []int{25}
}
func (m *E2MeasCell) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *E2MeasCell) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_E2MeasCell.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *E2MeasCell) XXX_Merge(src proto.Message) {
	xxx_messageInfo_E2MeasCell.Merge(m, src)
}
func (m *E2MeasCell) XXX_Size() int {
	return m.Size()
}
func (m *E2MeasCell) XXX_DiscardUnknown() {
	xxx_messageInfo_E2MeasCell.DiscardUnknown(m)
}

var xxx_messageInfo_E2MeasCell proto.InternalMessageInfo

func (m *E2MeasCell) GetPci() string {
	if m != nil {
		return m.Pci
	}
	return ""
}

func (m *E2MeasCell) GetCellIndividualOffset() string {
	if m != nil {
		return m.CellIndividualOffset
	}
	return ""
}

type E2MeasObject struct {
	DlFreq    string        `protobuf:"bytes,1,opt,name=dlFreq,proto3" json:"dlFreq,omitempty"`
	MeasCells []*E2MeasCell `protobuf:"bytes,2,rep,name=measCells,proto3" json:"measCells,omitempty"`
}

func (m *E2MeasObject) Reset()         { *m = E2MeasObject{} }
func (m *E2MeasObject) String() string { return proto.CompactTextString(m) }
func (*E2MeasObject) ProtoMessage()    {}
func (*E2MeasObject) Descriptor() ([]byte, []int) {
	return fileDescriptor_01d4ac3ab6ba660b, []int{26}
}
func (m *E2MeasObject) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *E2MeasObject) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_E2MeasObject.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *E2MeasObject) XXX_Merge(src proto.Message) {
	xxx_messageInfo_E2MeasObject.Merge(m, src)
}
func (m *E2MeasObject) XXX_Size() int {
	return m.Size()
}
func (m *E2MeasObject) XXX_DiscardUnknown() {
	xxx_messageInfo_E2MeasObject.DiscardUnknown(m)
}

var xxx_messageInfo_E2MeasObject proto.InternalMessageInfo

func (m *E2MeasObject) GetDlFreq() string {
	if m != nil {
		return m.DlFreq
	}
	return ""
}

func (m *E2MeasObject) GetMeasCells() []*E2MeasCell {
	if m != nil {
		return m.MeasCells
	}
	return nil
}

type E2ReportParamChoice struct {
	// Types that are valid to be assigned to Choice:
	//	*E2ReportParamChoice_PerParam
	//	*E2ReportParamChoice_A1Param
	//	*E2ReportParamChoice_A2Param
	//	*E2ReportParamChoice_A3Param
	//	*E2ReportParamChoice_A4Param
	//	*E2ReportParamChoice_A5Param
	//	*E2ReportParamChoice_A6Param
	Choice isE2ReportParamChoice_Choice `protobuf_oneof:"choice"`
}

func (m *E2ReportParamChoice) Reset()         { *m = E2ReportParamChoice{} }
func (m *E2ReportParamChoice) String() string { return proto.CompactTextString(m) }
func (*E2ReportParamChoice) ProtoMessage()    {}
func (*E2ReportParamChoice) Descriptor() ([]byte, []int) {
	return fileDescriptor_01d4ac3ab6ba660b, []int{27}
}
func (m *E2ReportParamChoice) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *E2ReportParamChoice) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_E2ReportParamChoice.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *E2ReportParamChoice) XXX_Merge(src proto.Message) {
	xxx_messageInfo_E2ReportParamChoice.Merge(m, src)
}
func (m *E2ReportParamChoice) XXX_Size() int {
	return m.Size()
}
func (m *E2ReportParamChoice) XXX_DiscardUnknown() {
	xxx_messageInfo_E2ReportParamChoice.DiscardUnknown(m)
}

var xxx_messageInfo_E2ReportParamChoice proto.InternalMessageInfo

type isE2ReportParamChoice_Choice interface {
	isE2ReportParamChoice_Choice()
	MarshalTo([]byte) (int, error)
	Size() int
}

type E2ReportParamChoice_PerParam struct {
	PerParam *E2PerParam `protobuf:"bytes,1,opt,name=perParam,proto3,oneof" json:"perParam,omitempty"`
}
type E2ReportParamChoice_A1Param struct {
	A1Param *E2A1Param `protobuf:"bytes,2,opt,name=a1Param,proto3,oneof" json:"a1Param,omitempty"`
}
type E2ReportParamChoice_A2Param struct {
	A2Param *E2A2Param `protobuf:"bytes,3,opt,name=a2Param,proto3,oneof" json:"a2Param,omitempty"`
}
type E2ReportParamChoice_A3Param struct {
	A3Param *E2A3Param `protobuf:"bytes,4,opt,name=a3Param,proto3,oneof" json:"a3Param,omitempty"`
}
type E2ReportParamChoice_A4Param struct {
	A4Param *E2A4Param `protobuf:"bytes,5,opt,name=a4Param,proto3,oneof" json:"a4Param,omitempty"`
}
type E2ReportParamChoice_A5Param struct {
	A5Param *E2A5Param `protobuf:"bytes,6,opt,name=a5Param,proto3,oneof" json:"a5Param,omitempty"`
}
type E2ReportParamChoice_A6Param struct {
	A6Param *E2A6Param `protobuf:"bytes,7,opt,name=a6Param,proto3,oneof" json:"a6Param,omitempty"`
}

func (*E2ReportParamChoice_PerParam) isE2ReportParamChoice_Choice() {}
func (*E2ReportParamChoice_A1Param) isE2ReportParamChoice_Choice()  {}
func (*E2ReportParamChoice_A2Param) isE2ReportParamChoice_Choice()  {}
func (*E2ReportParamChoice_A3Param) isE2ReportParamChoice_Choice()  {}
func (*E2ReportParamChoice_A4Param) isE2ReportParamChoice_Choice()  {}
func (*E2ReportParamChoice_A5Param) isE2ReportParamChoice_Choice()  {}
func (*E2ReportParamChoice_A6Param) isE2ReportParamChoice_Choice()  {}

func (m *E2ReportParamChoice) GetChoice() isE2ReportParamChoice_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (m *E2ReportParamChoice) GetPerParam() *E2PerParam {
	if x, ok := m.GetChoice().(*E2ReportParamChoice_PerParam); ok {
		return x.PerParam
	}
	return nil
}

func (m *E2ReportParamChoice) GetA1Param() *E2A1Param {
	if x, ok := m.GetChoice().(*E2ReportParamChoice_A1Param); ok {
		return x.A1Param
	}
	return nil
}

func (m *E2ReportParamChoice) GetA2Param() *E2A2Param {
	if x, ok := m.GetChoice().(*E2ReportParamChoice_A2Param); ok {
		return x.A2Param
	}
	return nil
}

func (m *E2ReportParamChoice) GetA3Param() *E2A3Param {
	if x, ok := m.GetChoice().(*E2ReportParamChoice_A3Param); ok {
		return x.A3Param
	}
	return nil
}

func (m *E2ReportParamChoice) GetA4Param() *E2A4Param {
	if x, ok := m.GetChoice().(*E2ReportParamChoice_A4Param); ok {
		return x.A4Param
	}
	return nil
}

func (m *E2ReportParamChoice) GetA5Param() *E2A5Param {
	if x, ok := m.GetChoice().(*E2ReportParamChoice_A5Param); ok {
		return x.A5Param
	}
	return nil
}

func (m *E2ReportParamChoice) GetA6Param() *E2A6Param {
	if x, ok := m.GetChoice().(*E2ReportParamChoice_A6Param); ok {
		return x.A6Param
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*E2ReportParamChoice) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*E2ReportParamChoice_PerParam)(nil),
		(*E2ReportParamChoice_A1Param)(nil),
		(*E2ReportParamChoice_A2Param)(nil),
		(*E2ReportParamChoice_A3Param)(nil),
		(*E2ReportParamChoice_A4Param)(nil),
		(*E2ReportParamChoice_A5Param)(nil),
		(*E2ReportParamChoice_A6Param)(nil),
	}
}

type E2ThresholdEUTRAChoice struct {
	// Types that are valid to be assigned to Choice:
	//	*E2ThresholdEUTRAChoice_ThresholdRSRP
	//	*E2ThresholdEUTRAChoice_ThresholdRSRQ
	Choice isE2ThresholdEUTRAChoice_Choice `protobuf_oneof:"choice"`
}

func (m *E2ThresholdEUTRAChoice) Reset()         { *m = E2ThresholdEUTRAChoice{} }
func (m *E2ThresholdEUTRAChoice) String() string { return proto.CompactTextString(m) }
func (*E2ThresholdEUTRAChoice) ProtoMessage()    {}
func (*E2ThresholdEUTRAChoice) Descriptor() ([]byte, []int) {
	return fileDescriptor_01d4ac3ab6ba660b, []int{28}
}
func (m *E2ThresholdEUTRAChoice) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *E2ThresholdEUTRAChoice) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_E2ThresholdEUTRAChoice.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *E2ThresholdEUTRAChoice) XXX_Merge(src proto.Message) {
	xxx_messageInfo_E2ThresholdEUTRAChoice.Merge(m, src)
}
func (m *E2ThresholdEUTRAChoice) XXX_Size() int {
	return m.Size()
}
func (m *E2ThresholdEUTRAChoice) XXX_DiscardUnknown() {
	xxx_messageInfo_E2ThresholdEUTRAChoice.DiscardUnknown(m)
}

var xxx_messageInfo_E2ThresholdEUTRAChoice proto.InternalMessageInfo

type isE2ThresholdEUTRAChoice_Choice interface {
	isE2ThresholdEUTRAChoice_Choice()
	MarshalTo([]byte) (int, error)
	Size() int
}

type E2ThresholdEUTRAChoice_ThresholdRSRP struct {
	ThresholdRSRP string `protobuf:"bytes,1,opt,name=thresholdRSRP,proto3,oneof" json:"thresholdRSRP,omitempty"`
}
type E2ThresholdEUTRAChoice_ThresholdRSRQ struct {
	ThresholdRSRQ string `protobuf:"bytes,2,opt,name=thresholdRSRQ,proto3,oneof" json:"thresholdRSRQ,omitempty"`
}

func (*E2ThresholdEUTRAChoice_ThresholdRSRP) isE2ThresholdEUTRAChoice_Choice() {}
func (*E2ThresholdEUTRAChoice_ThresholdRSRQ) isE2ThresholdEUTRAChoice_Choice() {}

func (m *E2ThresholdEUTRAChoice) GetChoice() isE2ThresholdEUTRAChoice_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (m *E2ThresholdEUTRAChoice) GetThresholdRSRP() string {
	if x, ok := m.GetChoice().(*E2ThresholdEUTRAChoice_ThresholdRSRP); ok {
		return x.ThresholdRSRP
	}
	return ""
}

func (m *E2ThresholdEUTRAChoice) GetThresholdRSRQ() string {
	if x, ok := m.GetChoice().(*E2ThresholdEUTRAChoice_ThresholdRSRQ); ok {
		return x.ThresholdRSRQ
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*E2ThresholdEUTRAChoice) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*E2ThresholdEUTRAChoice_ThresholdRSRP)(nil),
		(*E2ThresholdEUTRAChoice_ThresholdRSRQ)(nil),
	}
}

type E2ThreasholdEUTRA struct {
	Present E2ThresholdEUTRAPR      `protobuf:"varint,1,opt,name=present,proto3,enum=ran.e2.E2ThresholdEUTRAPR" json:"present,omitempty"`
	Choice  *E2ThresholdEUTRAChoice `protobuf:"bytes,2,opt,name=choice,proto3" json:"choice,omitempty"`
}

func (m *E2ThreasholdEUTRA) Reset()         { *m = E2ThreasholdEUTRA{} }
func (m *E2ThreasholdEUTRA) String() string { return proto.CompactTextString(m) }
func (*E2ThreasholdEUTRA) ProtoMessage()    {}
func (*E2ThreasholdEUTRA) Descriptor() ([]byte, []int) {
	return fileDescriptor_01d4ac3ab6ba660b, []int{29}
}
func (m *E2ThreasholdEUTRA) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *E2ThreasholdEUTRA) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_E2ThreasholdEUTRA.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *E2ThreasholdEUTRA) XXX_Merge(src proto.Message) {
	xxx_messageInfo_E2ThreasholdEUTRA.Merge(m, src)
}
func (m *E2ThreasholdEUTRA) XXX_Size() int {
	return m.Size()
}
func (m *E2ThreasholdEUTRA) XXX_DiscardUnknown() {
	xxx_messageInfo_E2ThreasholdEUTRA.DiscardUnknown(m)
}

var xxx_messageInfo_E2ThreasholdEUTRA proto.InternalMessageInfo

func (m *E2ThreasholdEUTRA) GetPresent() E2ThresholdEUTRAPR {
	if m != nil {
		return m.Present
	}
	return E2ThresholdEUTRAPR_E2_THRESHOLDEUTRA_PR_NOTHING
}

func (m *E2ThreasholdEUTRA) GetChoice() *E2ThresholdEUTRAChoice {
	if m != nil {
		return m.Choice
	}
	return nil
}

type E2PerParam struct {
	ReportIntervalMs E2PerParamReportIntervalMs `protobuf:"varint,1,opt,name=reportIntervalMs,proto3,enum=ran.e2.E2PerParamReportIntervalMs" json:"reportIntervalMs,omitempty"`
}

func (m *E2PerParam) Reset()         { *m = E2PerParam{} }
func (m *E2PerParam) String() string { return proto.CompactTextString(m) }
func (*E2PerParam) ProtoMessage()    {}
func (*E2PerParam) Descriptor() ([]byte, []int) {
	return fileDescriptor_01d4ac3ab6ba660b, []int{30}
}
func (m *E2PerParam) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *E2PerParam) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_E2PerParam.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *E2PerParam) XXX_Merge(src proto.Message) {
	xxx_messageInfo_E2PerParam.Merge(m, src)
}
func (m *E2PerParam) XXX_Size() int {
	return m.Size()
}
func (m *E2PerParam) XXX_DiscardUnknown() {
	xxx_messageInfo_E2PerParam.DiscardUnknown(m)
}

var xxx_messageInfo_E2PerParam proto.InternalMessageInfo

func (m *E2PerParam) GetReportIntervalMs() E2PerParamReportIntervalMs {
	if m != nil {
		return m.ReportIntervalMs
	}
	return E2PerParamReportIntervalMs_E2_PERPARAM_MS_120
}

type E2A1Param struct {
	A1Threshold *E2ThreasholdEUTRA `protobuf:"bytes,1,opt,name=a1Threshold,proto3" json:"a1Threshold,omitempty"`
}

func (m *E2A1Param) Reset()         { *m = E2A1Param{} }
func (m *E2A1Param) String() string { return proto.CompactTextString(m) }
func (*E2A1Param) ProtoMessage()    {}
func (*E2A1Param) Descriptor() ([]byte, []int) {
	return fileDescriptor_01d4ac3ab6ba660b, []int{31}
}
func (m *E2A1Param) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *E2A1Param) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_E2A1Param.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *E2A1Param) XXX_Merge(src proto.Message) {
	xxx_messageInfo_E2A1Param.Merge(m, src)
}
func (m *E2A1Param) XXX_Size() int {
	return m.Size()
}
func (m *E2A1Param) XXX_DiscardUnknown() {
	xxx_messageInfo_E2A1Param.DiscardUnknown(m)
}

var xxx_messageInfo_E2A1Param proto.InternalMessageInfo

func (m *E2A1Param) GetA1Threshold() *E2ThreasholdEUTRA {
	if m != nil {
		return m.A1Threshold
	}
	return nil
}

type E2A2Param struct {
	A2Threshold *E2ThreasholdEUTRA `protobuf:"bytes,1,opt,name=a2Threshold,proto3" json:"a2Threshold,omitempty"`
}

func (m *E2A2Param) Reset()         { *m = E2A2Param{} }
func (m *E2A2Param) String() string { return proto.CompactTextString(m) }
func (*E2A2Param) ProtoMessage()    {}
func (*E2A2Param) Descriptor() ([]byte, []int) {
	return fileDescriptor_01d4ac3ab6ba660b, []int{32}
}
func (m *E2A2Param) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *E2A2Param) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_E2A2Param.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *E2A2Param) XXX_Merge(src proto.Message) {
	xxx_messageInfo_E2A2Param.Merge(m, src)
}
func (m *E2A2Param) XXX_Size() int {
	return m.Size()
}
func (m *E2A2Param) XXX_DiscardUnknown() {
	xxx_messageInfo_E2A2Param.DiscardUnknown(m)
}

var xxx_messageInfo_E2A2Param proto.InternalMessageInfo

func (m *E2A2Param) GetA2Threshold() *E2ThreasholdEUTRA {
	if m != nil {
		return m.A2Threshold
	}
	return nil
}

type E2A3Param struct {
	A3Offset string `protobuf:"bytes,1,opt,name=a3Offset,proto3" json:"a3Offset,omitempty"`
}

func (m *E2A3Param) Reset()         { *m = E2A3Param{} }
func (m *E2A3Param) String() string { return proto.CompactTextString(m) }
func (*E2A3Param) ProtoMessage()    {}
func (*E2A3Param) Descriptor() ([]byte, []int) {
	return fileDescriptor_01d4ac3ab6ba660b, []int{33}
}
func (m *E2A3Param) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *E2A3Param) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_E2A3Param.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *E2A3Param) XXX_Merge(src proto.Message) {
	xxx_messageInfo_E2A3Param.Merge(m, src)
}
func (m *E2A3Param) XXX_Size() int {
	return m.Size()
}
func (m *E2A3Param) XXX_DiscardUnknown() {
	xxx_messageInfo_E2A3Param.DiscardUnknown(m)
}

var xxx_messageInfo_E2A3Param proto.InternalMessageInfo

func (m *E2A3Param) GetA3Offset() string {
	if m != nil {
		return m.A3Offset
	}
	return ""
}

type E2A4Param struct {
	A4Threshold *E2ThreasholdEUTRA `protobuf:"bytes,1,opt,name=a4Threshold,proto3" json:"a4Threshold,omitempty"`
}

func (m *E2A4Param) Reset()         { *m = E2A4Param{} }
func (m *E2A4Param) String() string { return proto.CompactTextString(m) }
func (*E2A4Param) ProtoMessage()    {}
func (*E2A4Param) Descriptor() ([]byte, []int) {
	return fileDescriptor_01d4ac3ab6ba660b, []int{34}
}
func (m *E2A4Param) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *E2A4Param) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_E2A4Param.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *E2A4Param) XXX_Merge(src proto.Message) {
	xxx_messageInfo_E2A4Param.Merge(m, src)
}
func (m *E2A4Param) XXX_Size() int {
	return m.Size()
}
func (m *E2A4Param) XXX_DiscardUnknown() {
	xxx_messageInfo_E2A4Param.DiscardUnknown(m)
}

var xxx_messageInfo_E2A4Param proto.InternalMessageInfo

func (m *E2A4Param) GetA4Threshold() *E2ThreasholdEUTRA {
	if m != nil {
		return m.A4Threshold
	}
	return nil
}

type E2A5Param struct {
	A5Threshold1 *E2ThreasholdEUTRA `protobuf:"bytes,1,opt,name=a5Threshold1,proto3" json:"a5Threshold1,omitempty"`
	A5Threshold2 *E2ThreasholdEUTRA `protobuf:"bytes,2,opt,name=a5Threshold2,proto3" json:"a5Threshold2,omitempty"`
}

func (m *E2A5Param) Reset()         { *m = E2A5Param{} }
func (m *E2A5Param) String() string { return proto.CompactTextString(m) }
func (*E2A5Param) ProtoMessage()    {}
func (*E2A5Param) Descriptor() ([]byte, []int) {
	return fileDescriptor_01d4ac3ab6ba660b, []int{35}
}
func (m *E2A5Param) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *E2A5Param) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_E2A5Param.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *E2A5Param) XXX_Merge(src proto.Message) {
	xxx_messageInfo_E2A5Param.Merge(m, src)
}
func (m *E2A5Param) XXX_Size() int {
	return m.Size()
}
func (m *E2A5Param) XXX_DiscardUnknown() {
	xxx_messageInfo_E2A5Param.DiscardUnknown(m)
}

var xxx_messageInfo_E2A5Param proto.InternalMessageInfo

func (m *E2A5Param) GetA5Threshold1() *E2ThreasholdEUTRA {
	if m != nil {
		return m.A5Threshold1
	}
	return nil
}

func (m *E2A5Param) GetA5Threshold2() *E2ThreasholdEUTRA {
	if m != nil {
		return m.A5Threshold2
	}
	return nil
}

type E2A6Param struct {
	A6Offset string `protobuf:"bytes,1,opt,name=a6Offset,proto3" json:"a6Offset,omitempty"`
}

func (m *E2A6Param) Reset()         { *m = E2A6Param{} }
func (m *E2A6Param) String() string { return proto.CompactTextString(m) }
func (*E2A6Param) ProtoMessage()    {}
func (*E2A6Param) Descriptor() ([]byte, []int) {
	return fileDescriptor_01d4ac3ab6ba660b, []int{36}
}
func (m *E2A6Param) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *E2A6Param) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_E2A6Param.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *E2A6Param) XXX_Merge(src proto.Message) {
	xxx_messageInfo_E2A6Param.Merge(m, src)
}
func (m *E2A6Param) XXX_Size() int {
	return m.Size()
}
func (m *E2A6Param) XXX_DiscardUnknown() {
	xxx_messageInfo_E2A6Param.DiscardUnknown(m)
}

var xxx_messageInfo_E2A6Param proto.InternalMessageInfo

func (m *E2A6Param) GetA6Offset() string {
	if m != nil {
		return m.A6Offset
	}
	return ""
}

type E2ReportParam struct {
	Present       E2ReportParamPR      `protobuf:"varint,1,opt,name=present,proto3,enum=ran.e2.E2ReportParamPR" json:"present,omitempty"`
	Choice        *E2ReportParamChoice `protobuf:"bytes,2,opt,name=choice,proto3" json:"choice,omitempty"`
	Hysteresis    string               `protobuf:"bytes,3,opt,name=hysteresis,proto3" json:"hysteresis,omitempty"`
	Timetotrigger E2TimeToTrigger      `protobuf:"varint,4,opt,name=timetotrigger,proto3,enum=ran.e2.E2TimeToTrigger" json:"timetotrigger,omitempty"`
}

func (m *E2ReportParam) Reset()         { *m = E2ReportParam{} }
func (m *E2ReportParam) String() string { return proto.CompactTextString(m) }
func (*E2ReportParam) ProtoMessage()    {}
func (*E2ReportParam) Descriptor() ([]byte, []int) {
	return fileDescriptor_01d4ac3ab6ba660b, []int{37}
}
func (m *E2ReportParam) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *E2ReportParam) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_E2ReportParam.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *E2ReportParam) XXX_Merge(src proto.Message) {
	xxx_messageInfo_E2ReportParam.Merge(m, src)
}
func (m *E2ReportParam) XXX_Size() int {
	return m.Size()
}
func (m *E2ReportParam) XXX_DiscardUnknown() {
	xxx_messageInfo_E2ReportParam.DiscardUnknown(m)
}

var xxx_messageInfo_E2ReportParam proto.InternalMessageInfo

func (m *E2ReportParam) GetPresent() E2ReportParamPR {
	if m != nil {
		return m.Present
	}
	return E2ReportParamPR_E2_REPORTPARAM_PR_NOTHING
}

func (m *E2ReportParam) GetChoice() *E2ReportParamChoice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (m *E2ReportParam) GetHysteresis() string {
	if m != nil {
		return m.Hysteresis
	}
	return ""
}

func (m *E2ReportParam) GetTimetotrigger() E2TimeToTrigger {
	if m != nil {
		return m.Timetotrigger
	}
	return E2TimeToTrigger_E2_TTT_MS0
}

type E2ReportConfig struct {
	ReportParams    *E2ReportParam    `protobuf:"bytes,1,opt,name=reportParams,proto3" json:"reportParams,omitempty"`
	TriggerQuantity E2TriggerQuantity `protobuf:"varint,2,opt,name=triggerQuantity,proto3,enum=ran.e2.E2TriggerQuantity" json:"triggerQuantity,omitempty"`
	ReportQuality   E2ReportQuality   `protobuf:"varint,3,opt,name=reportQuality,proto3,enum=ran.e2.E2ReportQuality" json:"reportQuality,omitempty"`
}

func (m *E2ReportConfig) Reset()         { *m = E2ReportConfig{} }
func (m *E2ReportConfig) String() string { return proto.CompactTextString(m) }
func (*E2ReportConfig) ProtoMessage()    {}
func (*E2ReportConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_01d4ac3ab6ba660b, []int{38}
}
func (m *E2ReportConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *E2ReportConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_E2ReportConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *E2ReportConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_E2ReportConfig.Merge(m, src)
}
func (m *E2ReportConfig) XXX_Size() int {
	return m.Size()
}
func (m *E2ReportConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_E2ReportConfig.DiscardUnknown(m)
}

var xxx_messageInfo_E2ReportConfig proto.InternalMessageInfo

func (m *E2ReportConfig) GetReportParams() *E2ReportParam {
	if m != nil {
		return m.ReportParams
	}
	return nil
}

func (m *E2ReportConfig) GetTriggerQuantity() E2TriggerQuantity {
	if m != nil {
		return m.TriggerQuantity
	}
	return E2TriggerQuantity_E2_TQ_RSRP
}

func (m *E2ReportConfig) GetReportQuality() E2ReportQuality {
	if m != nil {
		return m.ReportQuality
	}
	return E2ReportQuality_E2_RQ_SAME
}

type E2AddMeasId struct {
	AddMeasId []string `protobuf:"bytes,1,rep,name=addMeasId,proto3" json:"addMeasId,omitempty"`
}

func (m *E2AddMeasId) Reset()         { *m = E2AddMeasId{} }
func (m *E2AddMeasId) String() string { return proto.CompactTextString(m) }
func (*E2AddMeasId) ProtoMessage()    {}
func (*E2AddMeasId) Descriptor() ([]byte, []int) {
	return fileDescriptor_01d4ac3ab6ba660b, []int{39}
}
func (m *E2AddMeasId) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *E2AddMeasId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_E2AddMeasId.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *E2AddMeasId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_E2AddMeasId.Merge(m, src)
}
func (m *E2AddMeasId) XXX_Size() int {
	return m.Size()
}
func (m *E2AddMeasId) XXX_DiscardUnknown() {
	xxx_messageInfo_E2AddMeasId.DiscardUnknown(m)
}

var xxx_messageInfo_E2AddMeasId proto.InternalMessageInfo

func (m *E2AddMeasId) GetAddMeasId() []string {
	if m != nil {
		return m.AddMeasId
	}
	return nil
}

type E2DelMeasId struct {
	DelMeasId []string `protobuf:"bytes,1,rep,name=delMeasId,proto3" json:"delMeasId,omitempty"`
}

func (m *E2DelMeasId) Reset()         { *m = E2DelMeasId{} }
func (m *E2DelMeasId) String() string { return proto.CompactTextString(m) }
func (*E2DelMeasId) ProtoMessage()    {}
func (*E2DelMeasId) Descriptor() ([]byte, []int) {
	return fileDescriptor_01d4ac3ab6ba660b, []int{40}
}
func (m *E2DelMeasId) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *E2DelMeasId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_E2DelMeasId.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *E2DelMeasId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_E2DelMeasId.Merge(m, src)
}
func (m *E2DelMeasId) XXX_Size() int {
	return m.Size()
}
func (m *E2DelMeasId) XXX_DiscardUnknown() {
	xxx_messageInfo_E2DelMeasId.DiscardUnknown(m)
}

var xxx_messageInfo_E2DelMeasId proto.InternalMessageInfo

func (m *E2DelMeasId) GetDelMeasId() []string {
	if m != nil {
		return m.DelMeasId
	}
	return nil
}

type E2MeasIdActionChoice struct {
	// Types that are valid to be assigned to Choice:
	//	*E2MeasIdActionChoice_AddMeasId
	//	*E2MeasIdActionChoice_DelMeasId
	//	*E2MeasIdActionChoice_Hototarget
	Choice isE2MeasIdActionChoice_Choice `protobuf_oneof:"choice"`
}

func (m *E2MeasIdActionChoice) Reset()         { *m = E2MeasIdActionChoice{} }
func (m *E2MeasIdActionChoice) String() string { return proto.CompactTextString(m) }
func (*E2MeasIdActionChoice) ProtoMessage()    {}
func (*E2MeasIdActionChoice) Descriptor() ([]byte, []int) {
	return fileDescriptor_01d4ac3ab6ba660b, []int{41}
}
func (m *E2MeasIdActionChoice) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *E2MeasIdActionChoice) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_E2MeasIdActionChoice.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *E2MeasIdActionChoice) XXX_Merge(src proto.Message) {
	xxx_messageInfo_E2MeasIdActionChoice.Merge(m, src)
}
func (m *E2MeasIdActionChoice) XXX_Size() int {
	return m.Size()
}
func (m *E2MeasIdActionChoice) XXX_DiscardUnknown() {
	xxx_messageInfo_E2MeasIdActionChoice.DiscardUnknown(m)
}

var xxx_messageInfo_E2MeasIdActionChoice proto.InternalMessageInfo

type isE2MeasIdActionChoice_Choice interface {
	isE2MeasIdActionChoice_Choice()
	MarshalTo([]byte) (int, error)
	Size() int
}

type E2MeasIdActionChoice_AddMeasId struct {
	AddMeasId *E2AddMeasId `protobuf:"bytes,1,opt,name=addMeasId,proto3,oneof" json:"addMeasId,omitempty"`
}
type E2MeasIdActionChoice_DelMeasId struct {
	DelMeasId *E2DelMeasId `protobuf:"bytes,2,opt,name=delMeasId,proto3,oneof" json:"delMeasId,omitempty"`
}
type E2MeasIdActionChoice_Hototarget struct {
	Hototarget string `protobuf:"bytes,3,opt,name=hototarget,proto3,oneof" json:"hototarget,omitempty"`
}

func (*E2MeasIdActionChoice_AddMeasId) isE2MeasIdActionChoice_Choice()  {}
func (*E2MeasIdActionChoice_DelMeasId) isE2MeasIdActionChoice_Choice()  {}
func (*E2MeasIdActionChoice_Hototarget) isE2MeasIdActionChoice_Choice() {}

func (m *E2MeasIdActionChoice) GetChoice() isE2MeasIdActionChoice_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (m *E2MeasIdActionChoice) GetAddMeasId() *E2AddMeasId {
	if x, ok := m.GetChoice().(*E2MeasIdActionChoice_AddMeasId); ok {
		return x.AddMeasId
	}
	return nil
}

func (m *E2MeasIdActionChoice) GetDelMeasId() *E2DelMeasId {
	if x, ok := m.GetChoice().(*E2MeasIdActionChoice_DelMeasId); ok {
		return x.DelMeasId
	}
	return nil
}

func (m *E2MeasIdActionChoice) GetHototarget() string {
	if x, ok := m.GetChoice().(*E2MeasIdActionChoice_Hototarget); ok {
		return x.Hototarget
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*E2MeasIdActionChoice) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*E2MeasIdActionChoice_AddMeasId)(nil),
		(*E2MeasIdActionChoice_DelMeasId)(nil),
		(*E2MeasIdActionChoice_Hototarget)(nil),
	}
}

type E2MeasIdAction struct {
	Present E2MeasIdActionPR      `protobuf:"varint,1,opt,name=present,proto3,enum=ran.e2.E2MeasIdActionPR" json:"present,omitempty"`
	Choice  *E2MeasIdActionChoice `protobuf:"bytes,2,opt,name=choice,proto3" json:"choice,omitempty"`
}

func (m *E2MeasIdAction) Reset()         { *m = E2MeasIdAction{} }
func (m *E2MeasIdAction) String() string { return proto.CompactTextString(m) }
func (*E2MeasIdAction) ProtoMessage()    {}
func (*E2MeasIdAction) Descriptor() ([]byte, []int) {
	return fileDescriptor_01d4ac3ab6ba660b, []int{42}
}
func (m *E2MeasIdAction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *E2MeasIdAction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_E2MeasIdAction.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *E2MeasIdAction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_E2MeasIdAction.Merge(m, src)
}
func (m *E2MeasIdAction) XXX_Size() int {
	return m.Size()
}
func (m *E2MeasIdAction) XXX_DiscardUnknown() {
	xxx_messageInfo_E2MeasIdAction.DiscardUnknown(m)
}

var xxx_messageInfo_E2MeasIdAction proto.InternalMessageInfo

func (m *E2MeasIdAction) GetPresent() E2MeasIdActionPR {
	if m != nil {
		return m.Present
	}
	return E2MeasIdActionPR_E2_MEASIDACTION_PR_NOTHING
}

func (m *E2MeasIdAction) GetChoice() *E2MeasIdActionChoice {
	if m != nil {
		return m.Choice
	}
	return nil
}

type E2MeasID struct {
	MeasObjectId   string          `protobuf:"bytes,1,opt,name=measObjectId,proto3" json:"measObjectId,omitempty"`
	ReportConfigId string          `protobuf:"bytes,2,opt,name=reportConfigId,proto3" json:"reportConfigId,omitempty"`
	Action         *E2MeasIdAction `protobuf:"bytes,3,opt,name=action,proto3" json:"action,omitempty"`
}

func (m *E2MeasID) Reset()         { *m = E2MeasID{} }
func (m *E2MeasID) String() string { return proto.CompactTextString(m) }
func (*E2MeasID) ProtoMessage()    {}
func (*E2MeasID) Descriptor() ([]byte, []int) {
	return fileDescriptor_01d4ac3ab6ba660b, []int{43}
}
func (m *E2MeasID) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *E2MeasID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_E2MeasID.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *E2MeasID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_E2MeasID.Merge(m, src)
}
func (m *E2MeasID) XXX_Size() int {
	return m.Size()
}
func (m *E2MeasID) XXX_DiscardUnknown() {
	xxx_messageInfo_E2MeasID.DiscardUnknown(m)
}

var xxx_messageInfo_E2MeasID proto.InternalMessageInfo

func (m *E2MeasID) GetMeasObjectId() string {
	if m != nil {
		return m.MeasObjectId
	}
	return ""
}

func (m *E2MeasID) GetReportConfigId() string {
	if m != nil {
		return m.ReportConfigId
	}
	return ""
}

func (m *E2MeasID) GetAction() *E2MeasIdAction {
	if m != nil {
		return m.Action
	}
	return nil
}

// RRCMeasConfig message
type E2RRCMeasConfigAttribute struct {
	Ecgi          *E2ECGI           `protobuf:"bytes,1,opt,name=ecgi,proto3" json:"ecgi,omitempty"`
	Crnti         []string          `protobuf:"bytes,2,rep,name=crnti,proto3" json:"crnti,omitempty"`
	MeasObjects   []*E2MeasObject   `protobuf:"bytes,3,rep,name=measObjects,proto3" json:"measObjects,omitempty"`
	ReportConfigs []*E2ReportConfig `protobuf:"bytes,4,rep,name=reportConfigs,proto3" json:"reportConfigs,omitempty"`
	MeasIds       []*E2MeasID       `protobuf:"bytes,5,rep,name=measIds,proto3" json:"measIds,omitempty"`
}

func (m *E2RRCMeasConfigAttribute) Reset()         { *m = E2RRCMeasConfigAttribute{} }
func (m *E2RRCMeasConfigAttribute) String() string { return proto.CompactTextString(m) }
func (*E2RRCMeasConfigAttribute) ProtoMessage()    {}
func (*E2RRCMeasConfigAttribute) Descriptor() ([]byte, []int) {
	return fileDescriptor_01d4ac3ab6ba660b, []int{44}
}
func (m *E2RRCMeasConfigAttribute) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *E2RRCMeasConfigAttribute) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_E2RRCMeasConfigAttribute.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *E2RRCMeasConfigAttribute) XXX_Merge(src proto.Message) {
	xxx_messageInfo_E2RRCMeasConfigAttribute.Merge(m, src)
}
func (m *E2RRCMeasConfigAttribute) XXX_Size() int {
	return m.Size()
}
func (m *E2RRCMeasConfigAttribute) XXX_DiscardUnknown() {
	xxx_messageInfo_E2RRCMeasConfigAttribute.DiscardUnknown(m)
}

var xxx_messageInfo_E2RRCMeasConfigAttribute proto.InternalMessageInfo

func (m *E2RRCMeasConfigAttribute) GetEcgi() *E2ECGI {
	if m != nil {
		return m.Ecgi
	}
	return nil
}

func (m *E2RRCMeasConfigAttribute) GetCrnti() []string {
	if m != nil {
		return m.Crnti
	}
	return nil
}

func (m *E2RRCMeasConfigAttribute) GetMeasObjects() []*E2MeasObject {
	if m != nil {
		return m.MeasObjects
	}
	return nil
}

func (m *E2RRCMeasConfigAttribute) GetReportConfigs() []*E2ReportConfig {
	if m != nil {
		return m.ReportConfigs
	}
	return nil
}

func (m *E2RRCMeasConfigAttribute) GetMeasIds() []*E2MeasID {
	if m != nil {
		return m.MeasIds
	}
	return nil
}

type E2PCIARFCN struct {
	Pci      string `protobuf:"bytes,1,opt,name=pci,proto3" json:"pci,omitempty"`
	EarfcnDl string `protobuf:"bytes,2,opt,name=earfcnDl,proto3" json:"earfcnDl,omitempty"`
}

func (m *E2PCIARFCN) Reset()         { *m = E2PCIARFCN{} }
func (m *E2PCIARFCN) String() string { return proto.CompactTextString(m) }
func (*E2PCIARFCN) ProtoMessage()    {}
func (*E2PCIARFCN) Descriptor() ([]byte, []int) {
	return fileDescriptor_01d4ac3ab6ba660b, []int{45}
}
func (m *E2PCIARFCN) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *E2PCIARFCN) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_E2PCIARFCN.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *E2PCIARFCN) XXX_Merge(src proto.Message) {
	xxx_messageInfo_E2PCIARFCN.Merge(m, src)
}
func (m *E2PCIARFCN) XXX_Size() int {
	return m.Size()
}
func (m *E2PCIARFCN) XXX_DiscardUnknown() {
	xxx_messageInfo_E2PCIARFCN.DiscardUnknown(m)
}

var xxx_messageInfo_E2PCIARFCN proto.InternalMessageInfo

func (m *E2PCIARFCN) GetPci() string {
	if m != nil {
		return m.Pci
	}
	return ""
}

func (m *E2PCIARFCN) GetEarfcnDl() string {
	if m != nil {
		return m.EarfcnDl
	}
	return ""
}

type E2RXSigReport struct {
	PciArfcn *E2PCIARFCN `protobuf:"bytes,1,opt,name=pciArfcn,proto3" json:"pciArfcn,omitempty"`
	Ecgi     *E2ECGI     `protobuf:"bytes,2,opt,name=ecgi,proto3" json:"ecgi,omitempty"`
	Rsrp     string      `protobuf:"bytes,3,opt,name=rsrp,proto3" json:"rsrp,omitempty"`
	Rsrq     string      `protobuf:"bytes,4,opt,name=rsrq,proto3" json:"rsrq,omitempty"`
}

func (m *E2RXSigReport) Reset()         { *m = E2RXSigReport{} }
func (m *E2RXSigReport) String() string { return proto.CompactTextString(m) }
func (*E2RXSigReport) ProtoMessage()    {}
func (*E2RXSigReport) Descriptor() ([]byte, []int) {
	return fileDescriptor_01d4ac3ab6ba660b, []int{46}
}
func (m *E2RXSigReport) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *E2RXSigReport) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_E2RXSigReport.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *E2RXSigReport) XXX_Merge(src proto.Message) {
	xxx_messageInfo_E2RXSigReport.Merge(m, src)
}
func (m *E2RXSigReport) XXX_Size() int {
	return m.Size()
}
func (m *E2RXSigReport) XXX_DiscardUnknown() {
	xxx_messageInfo_E2RXSigReport.DiscardUnknown(m)
}

var xxx_messageInfo_E2RXSigReport proto.InternalMessageInfo

func (m *E2RXSigReport) GetPciArfcn() *E2PCIARFCN {
	if m != nil {
		return m.PciArfcn
	}
	return nil
}

func (m *E2RXSigReport) GetEcgi() *E2ECGI {
	if m != nil {
		return m.Ecgi
	}
	return nil
}

func (m *E2RXSigReport) GetRsrp() string {
	if m != nil {
		return m.Rsrp
	}
	return ""
}

func (m *E2RXSigReport) GetRsrq() string {
	if m != nil {
		return m.Rsrq
	}
	return ""
}

// RxSigMeasReport message
type E2RxSigMeasReportAttribute struct {
	Crnti          []string         `protobuf:"bytes,1,rep,name=crnti,proto3" json:"crnti,omitempty"`
	Ecgi           *E2ECGI          `protobuf:"bytes,2,opt,name=ecgi,proto3" json:"ecgi,omitempty"`
	CellMeasReport []*E2RXSigReport `protobuf:"bytes,3,rep,name=cellMeasReport,proto3" json:"cellMeasReport,omitempty"`
}

func (m *E2RxSigMeasReportAttribute) Reset()         { *m = E2RxSigMeasReportAttribute{} }
func (m *E2RxSigMeasReportAttribute) String() string { return proto.CompactTextString(m) }
func (*E2RxSigMeasReportAttribute) ProtoMessage()    {}
func (*E2RxSigMeasReportAttribute) Descriptor() ([]byte, []int) {
	return fileDescriptor_01d4ac3ab6ba660b, []int{47}
}
func (m *E2RxSigMeasReportAttribute) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *E2RxSigMeasReportAttribute) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_E2RxSigMeasReportAttribute.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *E2RxSigMeasReportAttribute) XXX_Merge(src proto.Message) {
	xxx_messageInfo_E2RxSigMeasReportAttribute.Merge(m, src)
}
func (m *E2RxSigMeasReportAttribute) XXX_Size() int {
	return m.Size()
}
func (m *E2RxSigMeasReportAttribute) XXX_DiscardUnknown() {
	xxx_messageInfo_E2RxSigMeasReportAttribute.DiscardUnknown(m)
}

var xxx_messageInfo_E2RxSigMeasReportAttribute proto.InternalMessageInfo

func (m *E2RxSigMeasReportAttribute) GetCrnti() []string {
	if m != nil {
		return m.Crnti
	}
	return nil
}

func (m *E2RxSigMeasReportAttribute) GetEcgi() *E2ECGI {
	if m != nil {
		return m.Ecgi
	}
	return nil
}

func (m *E2RxSigMeasReportAttribute) GetCellMeasReport() []*E2RXSigReport {
	if m != nil {
		return m.CellMeasReport
	}
	return nil
}

type E2L2ReportInterval struct {
	TRadioMeasReportPerUe   E2L2MeasReportIntervals `protobuf:"varint,1,opt,name=tRadioMeasReportPerUe,proto3,enum=ran.e2.E2L2MeasReportIntervals" json:"tRadioMeasReportPerUe,omitempty"`
	TRadioMeasReportPerCell E2L2MeasReportIntervals `protobuf:"varint,2,opt,name=tRadioMeasReportPerCell,proto3,enum=ran.e2.E2L2MeasReportIntervals" json:"tRadioMeasReportPerCell,omitempty"`
	TSchedMeasReportPerUe   E2L2MeasReportIntervals `protobuf:"varint,3,opt,name=tSchedMeasReportPerUe,proto3,enum=ran.e2.E2L2MeasReportIntervals" json:"tSchedMeasReportPerUe,omitempty"`
	TSchedMeasReportPerCell E2L2MeasReportIntervals `protobuf:"varint,4,opt,name=tSchedMeasReportPerCell,proto3,enum=ran.e2.E2L2MeasReportIntervals" json:"tSchedMeasReportPerCell,omitempty"`
	TPdcpMeasReportPerUe    E2L2MeasReportIntervals `protobuf:"varint,5,opt,name=tPdcpMeasReportPerUe,proto3,enum=ran.e2.E2L2MeasReportIntervals" json:"tPdcpMeasReportPerUe,omitempty"`
}

func (m *E2L2ReportInterval) Reset()         { *m = E2L2ReportInterval{} }
func (m *E2L2ReportInterval) String() string { return proto.CompactTextString(m) }
func (*E2L2ReportInterval) ProtoMessage()    {}
func (*E2L2ReportInterval) Descriptor() ([]byte, []int) {
	return fileDescriptor_01d4ac3ab6ba660b, []int{48}
}
func (m *E2L2ReportInterval) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *E2L2ReportInterval) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_E2L2ReportInterval.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *E2L2ReportInterval) XXX_Merge(src proto.Message) {
	xxx_messageInfo_E2L2ReportInterval.Merge(m, src)
}
func (m *E2L2ReportInterval) XXX_Size() int {
	return m.Size()
}
func (m *E2L2ReportInterval) XXX_DiscardUnknown() {
	xxx_messageInfo_E2L2ReportInterval.DiscardUnknown(m)
}

var xxx_messageInfo_E2L2ReportInterval proto.InternalMessageInfo

func (m *E2L2ReportInterval) GetTRadioMeasReportPerUe() E2L2MeasReportIntervals {
	if m != nil {
		return m.TRadioMeasReportPerUe
	}
	return E2L2MeasReportIntervals_E2_L2MEASREPORTINTERVAL_NO_REPORT
}

func (m *E2L2ReportInterval) GetTRadioMeasReportPerCell() E2L2MeasReportIntervals {
	if m != nil {
		return m.TRadioMeasReportPerCell
	}
	return E2L2MeasReportIntervals_E2_L2MEASREPORTINTERVAL_NO_REPORT
}

func (m *E2L2ReportInterval) GetTSchedMeasReportPerUe() E2L2MeasReportIntervals {
	if m != nil {
		return m.TSchedMeasReportPerUe
	}
	return E2L2MeasReportIntervals_E2_L2MEASREPORTINTERVAL_NO_REPORT
}

func (m *E2L2ReportInterval) GetTSchedMeasReportPerCell() E2L2MeasReportIntervals {
	if m != nil {
		return m.TSchedMeasReportPerCell
	}
	return E2L2MeasReportIntervals_E2_L2MEASREPORTINTERVAL_NO_REPORT
}

func (m *E2L2ReportInterval) GetTPdcpMeasReportPerUe() E2L2MeasReportIntervals {
	if m != nil {
		return m.TPdcpMeasReportPerUe
	}
	return E2L2MeasReportIntervals_E2_L2MEASREPORTINTERVAL_NO_REPORT
}

// L2MeasConfig message
type E2L2MeasConfigAttribute struct {
	Ecgi            *E2ECGI             `protobuf:"bytes,1,opt,name=ecgi,proto3" json:"ecgi,omitempty"`
	Crnti           []string            `protobuf:"bytes,2,rep,name=crnti,proto3" json:"crnti,omitempty"`
	ReportIntervals *E2L2ReportInterval `protobuf:"bytes,3,opt,name=reportIntervals,proto3" json:"reportIntervals,omitempty"`
}

func (m *E2L2MeasConfigAttribute) Reset()         { *m = E2L2MeasConfigAttribute{} }
func (m *E2L2MeasConfigAttribute) String() string { return proto.CompactTextString(m) }
func (*E2L2MeasConfigAttribute) ProtoMessage()    {}
func (*E2L2MeasConfigAttribute) Descriptor() ([]byte, []int) {
	return fileDescriptor_01d4ac3ab6ba660b, []int{49}
}
func (m *E2L2MeasConfigAttribute) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *E2L2MeasConfigAttribute) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_E2L2MeasConfigAttribute.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *E2L2MeasConfigAttribute) XXX_Merge(src proto.Message) {
	xxx_messageInfo_E2L2MeasConfigAttribute.Merge(m, src)
}
func (m *E2L2MeasConfigAttribute) XXX_Size() int {
	return m.Size()
}
func (m *E2L2MeasConfigAttribute) XXX_DiscardUnknown() {
	xxx_messageInfo_E2L2MeasConfigAttribute.DiscardUnknown(m)
}

var xxx_messageInfo_E2L2MeasConfigAttribute proto.InternalMessageInfo

func (m *E2L2MeasConfigAttribute) GetEcgi() *E2ECGI {
	if m != nil {
		return m.Ecgi
	}
	return nil
}

func (m *E2L2MeasConfigAttribute) GetCrnti() []string {
	if m != nil {
		return m.Crnti
	}
	return nil
}

func (m *E2L2MeasConfigAttribute) GetReportIntervals() *E2L2ReportInterval {
	if m != nil {
		return m.ReportIntervals
	}
	return nil
}

// L2MeasureReports (periodic) messages
type E2RadioRepPerServCell struct {
	Ecgi          *E2ECGI  `protobuf:"bytes,1,opt,name=ecgi,proto3" json:"ecgi,omitempty"`
	CqiHist       []string `protobuf:"bytes,2,rep,name=cqiHist,proto3" json:"cqiHist,omitempty"`
	RiHist        []string `protobuf:"bytes,3,rep,name=riHist,proto3" json:"riHist,omitempty"`
	PuschSinrHist []string `protobuf:"bytes,4,rep,name=puschSinrHist,proto3" json:"puschSinrHist,omitempty"`
	PucchSinrHist []string `protobuf:"bytes,5,rep,name=pucchSinrHist,proto3" json:"pucchSinrHist,omitempty"`
}

func (m *E2RadioRepPerServCell) Reset()         { *m = E2RadioRepPerServCell{} }
func (m *E2RadioRepPerServCell) String() string { return proto.CompactTextString(m) }
func (*E2RadioRepPerServCell) ProtoMessage()    {}
func (*E2RadioRepPerServCell) Descriptor() ([]byte, []int) {
	return fileDescriptor_01d4ac3ab6ba660b, []int{50}
}
func (m *E2RadioRepPerServCell) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *E2RadioRepPerServCell) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_E2RadioRepPerServCell.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *E2RadioRepPerServCell) XXX_Merge(src proto.Message) {
	xxx_messageInfo_E2RadioRepPerServCell.Merge(m, src)
}
func (m *E2RadioRepPerServCell) XXX_Size() int {
	return m.Size()
}
func (m *E2RadioRepPerServCell) XXX_DiscardUnknown() {
	xxx_messageInfo_E2RadioRepPerServCell.DiscardUnknown(m)
}

var xxx_messageInfo_E2RadioRepPerServCell proto.InternalMessageInfo

func (m *E2RadioRepPerServCell) GetEcgi() *E2ECGI {
	if m != nil {
		return m.Ecgi
	}
	return nil
}

func (m *E2RadioRepPerServCell) GetCqiHist() []string {
	if m != nil {
		return m.CqiHist
	}
	return nil
}

func (m *E2RadioRepPerServCell) GetRiHist() []string {
	if m != nil {
		return m.RiHist
	}
	return nil
}

func (m *E2RadioRepPerServCell) GetPuschSinrHist() []string {
	if m != nil {
		return m.PuschSinrHist
	}
	return nil
}

func (m *E2RadioRepPerServCell) GetPucchSinrHist() []string {
	if m != nil {
		return m.PucchSinrHist
	}
	return nil
}

// RadioMeasReportPerUE message
type E2RadioMeasReportPerUEAttribute struct {
	Ecgi                 *E2ECGI                  `protobuf:"bytes,1,opt,name=ecgi,proto3" json:"ecgi,omitempty"`
	Crnti                string                   `protobuf:"bytes,2,opt,name=crnti,proto3" json:"crnti,omitempty"`
	RadioReportServCells []*E2RadioRepPerServCell `protobuf:"bytes,3,rep,name=radioReportServCells,proto3" json:"radioReportServCells,omitempty"`
}

func (m *E2RadioMeasReportPerUEAttribute) Reset()         { *m = E2RadioMeasReportPerUEAttribute{} }
func (m *E2RadioMeasReportPerUEAttribute) String() string { return proto.CompactTextString(m) }
func (*E2RadioMeasReportPerUEAttribute) ProtoMessage()    {}
func (*E2RadioMeasReportPerUEAttribute) Descriptor() ([]byte, []int) {
	return fileDescriptor_01d4ac3ab6ba660b, []int{51}
}
func (m *E2RadioMeasReportPerUEAttribute) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *E2RadioMeasReportPerUEAttribute) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_E2RadioMeasReportPerUEAttribute.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *E2RadioMeasReportPerUEAttribute) XXX_Merge(src proto.Message) {
	xxx_messageInfo_E2RadioMeasReportPerUEAttribute.Merge(m, src)
}
func (m *E2RadioMeasReportPerUEAttribute) XXX_Size() int {
	return m.Size()
}
func (m *E2RadioMeasReportPerUEAttribute) XXX_DiscardUnknown() {
	xxx_messageInfo_E2RadioMeasReportPerUEAttribute.DiscardUnknown(m)
}

var xxx_messageInfo_E2RadioMeasReportPerUEAttribute proto.InternalMessageInfo

func (m *E2RadioMeasReportPerUEAttribute) GetEcgi() *E2ECGI {
	if m != nil {
		return m.Ecgi
	}
	return nil
}

func (m *E2RadioMeasReportPerUEAttribute) GetCrnti() string {
	if m != nil {
		return m.Crnti
	}
	return ""
}

func (m *E2RadioMeasReportPerUEAttribute) GetRadioReportServCells() []*E2RadioRepPerServCell {
	if m != nil {
		return m.RadioReportServCells
	}
	return nil
}

// RadioMeasReportPerCell message
type E2RadioMeasReportPerCellAttribute struct {
	Ecgi               *E2ECGI  `protobuf:"bytes,1,opt,name=ecgi,proto3" json:"ecgi,omitempty"`
	PuschIntfPwrHist   []string `protobuf:"bytes,2,rep,name=puschIntfPwrHist,proto3" json:"puschIntfPwrHist,omitempty"`
	PucchIntfPowerHist []string `protobuf:"bytes,3,rep,name=pucchIntfPowerHist,proto3" json:"pucchIntfPowerHist,omitempty"`
}

func (m *E2RadioMeasReportPerCellAttribute) Reset()         { *m = E2RadioMeasReportPerCellAttribute{} }
func (m *E2RadioMeasReportPerCellAttribute) String() string { return proto.CompactTextString(m) }
func (*E2RadioMeasReportPerCellAttribute) ProtoMessage()    {}
func (*E2RadioMeasReportPerCellAttribute) Descriptor() ([]byte, []int) {
	return fileDescriptor_01d4ac3ab6ba660b, []int{52}
}
func (m *E2RadioMeasReportPerCellAttribute) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *E2RadioMeasReportPerCellAttribute) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_E2RadioMeasReportPerCellAttribute.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *E2RadioMeasReportPerCellAttribute) XXX_Merge(src proto.Message) {
	xxx_messageInfo_E2RadioMeasReportPerCellAttribute.Merge(m, src)
}
func (m *E2RadioMeasReportPerCellAttribute) XXX_Size() int {
	return m.Size()
}
func (m *E2RadioMeasReportPerCellAttribute) XXX_DiscardUnknown() {
	xxx_messageInfo_E2RadioMeasReportPerCellAttribute.DiscardUnknown(m)
}

var xxx_messageInfo_E2RadioMeasReportPerCellAttribute proto.InternalMessageInfo

func (m *E2RadioMeasReportPerCellAttribute) GetEcgi() *E2ECGI {
	if m != nil {
		return m.Ecgi
	}
	return nil
}

func (m *E2RadioMeasReportPerCellAttribute) GetPuschIntfPwrHist() []string {
	if m != nil {
		return m.PuschIntfPwrHist
	}
	return nil
}

func (m *E2RadioMeasReportPerCellAttribute) GetPucchIntfPowerHist() []string {
	if m != nil {
		return m.PucchIntfPowerHist
	}
	return nil
}

type E2PRBUsage struct {
	PrbUsageDl []string `protobuf:"bytes,1,rep,name=prbUsageDl,proto3" json:"prbUsageDl,omitempty"`
	PrbUsageUl []string `protobuf:"bytes,2,rep,name=prbUsageUl,proto3" json:"prbUsageUl,omitempty"`
}

func (m *E2PRBUsage) Reset()         { *m = E2PRBUsage{} }
func (m *E2PRBUsage) String() string { return proto.CompactTextString(m) }
func (*E2PRBUsage) ProtoMessage()    {}
func (*E2PRBUsage) Descriptor() ([]byte, []int) {
	return fileDescriptor_01d4ac3ab6ba660b, []int{53}
}
func (m *E2PRBUsage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *E2PRBUsage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_E2PRBUsage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *E2PRBUsage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_E2PRBUsage.Merge(m, src)
}
func (m *E2PRBUsage) XXX_Size() int {
	return m.Size()
}
func (m *E2PRBUsage) XXX_DiscardUnknown() {
	xxx_messageInfo_E2PRBUsage.DiscardUnknown(m)
}

var xxx_messageInfo_E2PRBUsage proto.InternalMessageInfo

func (m *E2PRBUsage) GetPrbUsageDl() []string {
	if m != nil {
		return m.PrbUsageDl
	}
	return nil
}

func (m *E2PRBUsage) GetPrbUsageUl() []string {
	if m != nil {
		return m.PrbUsageUl
	}
	return nil
}

type E2SchedMeasRepPerServCell struct {
	Ecgi           *E2ECGI     `protobuf:"bytes,1,opt,name=ecgi,proto3" json:"ecgi,omitempty"`
	QciVals        []string    `protobuf:"bytes,2,rep,name=qciVals,proto3" json:"qciVals,omitempty"`
	PrbUsage       *E2PRBUsage `protobuf:"bytes,3,opt,name=prbUsage,proto3" json:"prbUsage,omitempty"`
	McsDl          []string    `protobuf:"bytes,4,rep,name=mcsDl,proto3" json:"mcsDl,omitempty"`
	NumSchedTtisDl []string    `protobuf:"bytes,5,rep,name=numSchedTtisDl,proto3" json:"numSchedTtisDl,omitempty"`
	McsUl          []string    `protobuf:"bytes,6,rep,name=mcsUl,proto3" json:"mcsUl,omitempty"`
	NumSchedTtisUl []string    `protobuf:"bytes,7,rep,name=numSchedTtisUl,proto3" json:"numSchedTtisUl,omitempty"`
	RankDl1        []string    `protobuf:"bytes,8,rep,name=rankDl1,proto3" json:"rankDl1,omitempty"`
	RankDl2        []string    `protobuf:"bytes,9,rep,name=rankDl2,proto3" json:"rankDl2,omitempty"`
}

func (m *E2SchedMeasRepPerServCell) Reset()         { *m = E2SchedMeasRepPerServCell{} }
func (m *E2SchedMeasRepPerServCell) String() string { return proto.CompactTextString(m) }
func (*E2SchedMeasRepPerServCell) ProtoMessage()    {}
func (*E2SchedMeasRepPerServCell) Descriptor() ([]byte, []int) {
	return fileDescriptor_01d4ac3ab6ba660b, []int{54}
}
func (m *E2SchedMeasRepPerServCell) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *E2SchedMeasRepPerServCell) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_E2SchedMeasRepPerServCell.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *E2SchedMeasRepPerServCell) XXX_Merge(src proto.Message) {
	xxx_messageInfo_E2SchedMeasRepPerServCell.Merge(m, src)
}
func (m *E2SchedMeasRepPerServCell) XXX_Size() int {
	return m.Size()
}
func (m *E2SchedMeasRepPerServCell) XXX_DiscardUnknown() {
	xxx_messageInfo_E2SchedMeasRepPerServCell.DiscardUnknown(m)
}

var xxx_messageInfo_E2SchedMeasRepPerServCell proto.InternalMessageInfo

func (m *E2SchedMeasRepPerServCell) GetEcgi() *E2ECGI {
	if m != nil {
		return m.Ecgi
	}
	return nil
}

func (m *E2SchedMeasRepPerServCell) GetQciVals() []string {
	if m != nil {
		return m.QciVals
	}
	return nil
}

func (m *E2SchedMeasRepPerServCell) GetPrbUsage() *E2PRBUsage {
	if m != nil {
		return m.PrbUsage
	}
	return nil
}

func (m *E2SchedMeasRepPerServCell) GetMcsDl() []string {
	if m != nil {
		return m.McsDl
	}
	return nil
}

func (m *E2SchedMeasRepPerServCell) GetNumSchedTtisDl() []string {
	if m != nil {
		return m.NumSchedTtisDl
	}
	return nil
}

func (m *E2SchedMeasRepPerServCell) GetMcsUl() []string {
	if m != nil {
		return m.McsUl
	}
	return nil
}

func (m *E2SchedMeasRepPerServCell) GetNumSchedTtisUl() []string {
	if m != nil {
		return m.NumSchedTtisUl
	}
	return nil
}

func (m *E2SchedMeasRepPerServCell) GetRankDl1() []string {
	if m != nil {
		return m.RankDl1
	}
	return nil
}

func (m *E2SchedMeasRepPerServCell) GetRankDl2() []string {
	if m != nil {
		return m.RankDl2
	}
	return nil
}

// SchedMeasReportPerUE message
type E2SchedMeasReportPerUEAttribute struct {
	Ecgi                 *E2ECGI                      `protobuf:"bytes,1,opt,name=ecgi,proto3" json:"ecgi,omitempty"`
	Crnti                string                       `protobuf:"bytes,2,opt,name=crnti,proto3" json:"crnti,omitempty"`
	SchedReportServCells []*E2SchedMeasRepPerServCell `protobuf:"bytes,3,rep,name=schedReportServCells,proto3" json:"schedReportServCells,omitempty"`
}

func (m *E2SchedMeasReportPerUEAttribute) Reset()         { *m = E2SchedMeasReportPerUEAttribute{} }
func (m *E2SchedMeasReportPerUEAttribute) String() string { return proto.CompactTextString(m) }
func (*E2SchedMeasReportPerUEAttribute) ProtoMessage()    {}
func (*E2SchedMeasReportPerUEAttribute) Descriptor() ([]byte, []int) {
	return fileDescriptor_01d4ac3ab6ba660b, []int{55}
}
func (m *E2SchedMeasReportPerUEAttribute) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *E2SchedMeasReportPerUEAttribute) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_E2SchedMeasReportPerUEAttribute.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *E2SchedMeasReportPerUEAttribute) XXX_Merge(src proto.Message) {
	xxx_messageInfo_E2SchedMeasReportPerUEAttribute.Merge(m, src)
}
func (m *E2SchedMeasReportPerUEAttribute) XXX_Size() int {
	return m.Size()
}
func (m *E2SchedMeasReportPerUEAttribute) XXX_DiscardUnknown() {
	xxx_messageInfo_E2SchedMeasReportPerUEAttribute.DiscardUnknown(m)
}

var xxx_messageInfo_E2SchedMeasReportPerUEAttribute proto.InternalMessageInfo

func (m *E2SchedMeasReportPerUEAttribute) GetEcgi() *E2ECGI {
	if m != nil {
		return m.Ecgi
	}
	return nil
}

func (m *E2SchedMeasReportPerUEAttribute) GetCrnti() string {
	if m != nil {
		return m.Crnti
	}
	return ""
}

func (m *E2SchedMeasReportPerUEAttribute) GetSchedReportServCells() []*E2SchedMeasRepPerServCell {
	if m != nil {
		return m.SchedReportServCells
	}
	return nil
}

// SchedMeasReportPerCell message
type E2SchedMeasReportPerCellAttribute struct {
	Ecgi          *E2ECGI     `protobuf:"bytes,1,opt,name=ecgi,proto3" json:"ecgi,omitempty"`
	QciVals       []string    `protobuf:"bytes,2,rep,name=qciVals,proto3" json:"qciVals,omitempty"`
	PrbUsagePcell *E2PRBUsage `protobuf:"bytes,3,opt,name=prbUsagePcell,proto3" json:"prbUsagePcell,omitempty"`
	PrbUsageScell *E2PRBUsage `protobuf:"bytes,4,opt,name=prbUsageScell,proto3" json:"prbUsageScell,omitempty"`
}

func (m *E2SchedMeasReportPerCellAttribute) Reset()         { *m = E2SchedMeasReportPerCellAttribute{} }
func (m *E2SchedMeasReportPerCellAttribute) String() string { return proto.CompactTextString(m) }
func (*E2SchedMeasReportPerCellAttribute) ProtoMessage()    {}
func (*E2SchedMeasReportPerCellAttribute) Descriptor() ([]byte, []int) {
	return fileDescriptor_01d4ac3ab6ba660b, []int{56}
}
func (m *E2SchedMeasReportPerCellAttribute) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *E2SchedMeasReportPerCellAttribute) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_E2SchedMeasReportPerCellAttribute.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *E2SchedMeasReportPerCellAttribute) XXX_Merge(src proto.Message) {
	xxx_messageInfo_E2SchedMeasReportPerCellAttribute.Merge(m, src)
}
func (m *E2SchedMeasReportPerCellAttribute) XXX_Size() int {
	return m.Size()
}
func (m *E2SchedMeasReportPerCellAttribute) XXX_DiscardUnknown() {
	xxx_messageInfo_E2SchedMeasReportPerCellAttribute.DiscardUnknown(m)
}

var xxx_messageInfo_E2SchedMeasReportPerCellAttribute proto.InternalMessageInfo

func (m *E2SchedMeasReportPerCellAttribute) GetEcgi() *E2ECGI {
	if m != nil {
		return m.Ecgi
	}
	return nil
}

func (m *E2SchedMeasReportPerCellAttribute) GetQciVals() []string {
	if m != nil {
		return m.QciVals
	}
	return nil
}

func (m *E2SchedMeasReportPerCellAttribute) GetPrbUsagePcell() *E2PRBUsage {
	if m != nil {
		return m.PrbUsagePcell
	}
	return nil
}

func (m *E2SchedMeasReportPerCellAttribute) GetPrbUsageScell() *E2PRBUsage {
	if m != nil {
		return m.PrbUsageScell
	}
	return nil
}

// PdcpMeasReportPerUE message
type E2PDCPMeasReportPerUeAttribute struct {
	Ecgi             *E2ECGI  `protobuf:"bytes,1,opt,name=ecgi,proto3" json:"ecgi,omitempty"`
	Crnti            string   `protobuf:"bytes,2,opt,name=crnti,proto3" json:"crnti,omitempty"`
	QciVals          []string `protobuf:"bytes,3,rep,name=qciVals,proto3" json:"qciVals,omitempty"`
	DataVolDl        []string `protobuf:"bytes,4,rep,name=dataVolDl,proto3" json:"dataVolDl,omitempty"`
	DataVolUl        []string `protobuf:"bytes,5,rep,name=dataVolUl,proto3" json:"dataVolUl,omitempty"`
	PktDelayDl       []string `protobuf:"bytes,6,rep,name=pktDelayDl,proto3" json:"pktDelayDl,omitempty"`
	PktDiscardRateDl []string `protobuf:"bytes,7,rep,name=pktDiscardRateDl,proto3" json:"pktDiscardRateDl,omitempty"`
	PktLossRateDl    []string `protobuf:"bytes,8,rep,name=pktLossRateDl,proto3" json:"pktLossRateDl,omitempty"`
	PktLossRateUl    []string `protobuf:"bytes,9,rep,name=pktLossRateUl,proto3" json:"pktLossRateUl,omitempty"`
	ThroughputDl     []string `protobuf:"bytes,10,rep,name=throughputDl,proto3" json:"throughputDl,omitempty"`
	ThroughputUl     []string `protobuf:"bytes,11,rep,name=throughputUl,proto3" json:"throughputUl,omitempty"`
}

func (m *E2PDCPMeasReportPerUeAttribute) Reset()         { *m = E2PDCPMeasReportPerUeAttribute{} }
func (m *E2PDCPMeasReportPerUeAttribute) String() string { return proto.CompactTextString(m) }
func (*E2PDCPMeasReportPerUeAttribute) ProtoMessage()    {}
func (*E2PDCPMeasReportPerUeAttribute) Descriptor() ([]byte, []int) {
	return fileDescriptor_01d4ac3ab6ba660b, []int{57}
}
func (m *E2PDCPMeasReportPerUeAttribute) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *E2PDCPMeasReportPerUeAttribute) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_E2PDCPMeasReportPerUeAttribute.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *E2PDCPMeasReportPerUeAttribute) XXX_Merge(src proto.Message) {
	xxx_messageInfo_E2PDCPMeasReportPerUeAttribute.Merge(m, src)
}
func (m *E2PDCPMeasReportPerUeAttribute) XXX_Size() int {
	return m.Size()
}
func (m *E2PDCPMeasReportPerUeAttribute) XXX_DiscardUnknown() {
	xxx_messageInfo_E2PDCPMeasReportPerUeAttribute.DiscardUnknown(m)
}

var xxx_messageInfo_E2PDCPMeasReportPerUeAttribute proto.InternalMessageInfo

func (m *E2PDCPMeasReportPerUeAttribute) GetEcgi() *E2ECGI {
	if m != nil {
		return m.Ecgi
	}
	return nil
}

func (m *E2PDCPMeasReportPerUeAttribute) GetCrnti() string {
	if m != nil {
		return m.Crnti
	}
	return ""
}

func (m *E2PDCPMeasReportPerUeAttribute) GetQciVals() []string {
	if m != nil {
		return m.QciVals
	}
	return nil
}

func (m *E2PDCPMeasReportPerUeAttribute) GetDataVolDl() []string {
	if m != nil {
		return m.DataVolDl
	}
	return nil
}

func (m *E2PDCPMeasReportPerUeAttribute) GetDataVolUl() []string {
	if m != nil {
		return m.DataVolUl
	}
	return nil
}

func (m *E2PDCPMeasReportPerUeAttribute) GetPktDelayDl() []string {
	if m != nil {
		return m.PktDelayDl
	}
	return nil
}

func (m *E2PDCPMeasReportPerUeAttribute) GetPktDiscardRateDl() []string {
	if m != nil {
		return m.PktDiscardRateDl
	}
	return nil
}

func (m *E2PDCPMeasReportPerUeAttribute) GetPktLossRateDl() []string {
	if m != nil {
		return m.PktLossRateDl
	}
	return nil
}

func (m *E2PDCPMeasReportPerUeAttribute) GetPktLossRateUl() []string {
	if m != nil {
		return m.PktLossRateUl
	}
	return nil
}

func (m *E2PDCPMeasReportPerUeAttribute) GetThroughputDl() []string {
	if m != nil {
		return m.ThroughputDl
	}
	return nil
}

func (m *E2PDCPMeasReportPerUeAttribute) GetThroughputUl() []string {
	if m != nil {
		return m.ThroughputUl
	}
	return nil
}

// RRMConfig message
type E2RRMConfigAttribute struct {
	Ecgi              *E2ECGI     `protobuf:"bytes,1,opt,name=ecgi,proto3" json:"ecgi,omitempty"`
	Crnti             []string    `protobuf:"bytes,2,rep,name=crnti,proto3" json:"crnti,omitempty"`
	PciArfcn          *E2PCIARFCN `protobuf:"bytes,3,opt,name=pciArfcn,proto3" json:"pciArfcn,omitempty"`
	PA                []E2XICICPA `protobuf:"varint,4,rep,packed,name=pA,proto3,enum=ran.e2.E2XICICPA" json:"pA,omitempty"`
	StartPrbDl        []string    `protobuf:"bytes,5,rep,name=startPrbDl,proto3" json:"startPrbDl,omitempty"`
	EndPrbDl          []string    `protobuf:"bytes,6,rep,name=endPrbDl,proto3" json:"endPrbDl,omitempty"`
	SubFrameBitmaskDl []string    `protobuf:"bytes,7,rep,name=subFrameBitmaskDl,proto3" json:"subFrameBitmaskDl,omitempty"`
	P0UePusch         []string    `protobuf:"bytes,8,rep,name=p0UePusch,proto3" json:"p0UePusch,omitempty"`
	StartPrbUl        []string    `protobuf:"bytes,9,rep,name=startPrbUl,proto3" json:"startPrbUl,omitempty"`
	EndPrbUl          []string    `protobuf:"bytes,10,rep,name=endPrbUl,proto3" json:"endPrbUl,omitempty"`
	SubFrameBitmaskUl []string    `protobuf:"bytes,11,rep,name=subFrameBitmaskUl,proto3" json:"subFrameBitmaskUl,omitempty"`
}

func (m *E2RRMConfigAttribute) Reset()         { *m = E2RRMConfigAttribute{} }
func (m *E2RRMConfigAttribute) String() string { return proto.CompactTextString(m) }
func (*E2RRMConfigAttribute) ProtoMessage()    {}
func (*E2RRMConfigAttribute) Descriptor() ([]byte, []int) {
	return fileDescriptor_01d4ac3ab6ba660b, []int{58}
}
func (m *E2RRMConfigAttribute) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *E2RRMConfigAttribute) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_E2RRMConfigAttribute.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *E2RRMConfigAttribute) XXX_Merge(src proto.Message) {
	xxx_messageInfo_E2RRMConfigAttribute.Merge(m, src)
}
func (m *E2RRMConfigAttribute) XXX_Size() int {
	return m.Size()
}
func (m *E2RRMConfigAttribute) XXX_DiscardUnknown() {
	xxx_messageInfo_E2RRMConfigAttribute.DiscardUnknown(m)
}

var xxx_messageInfo_E2RRMConfigAttribute proto.InternalMessageInfo

func (m *E2RRMConfigAttribute) GetEcgi() *E2ECGI {
	if m != nil {
		return m.Ecgi
	}
	return nil
}

func (m *E2RRMConfigAttribute) GetCrnti() []string {
	if m != nil {
		return m.Crnti
	}
	return nil
}

func (m *E2RRMConfigAttribute) GetPciArfcn() *E2PCIARFCN {
	if m != nil {
		return m.PciArfcn
	}
	return nil
}

func (m *E2RRMConfigAttribute) GetPA() []E2XICICPA {
	if m != nil {
		return m.PA
	}
	return nil
}

func (m *E2RRMConfigAttribute) GetStartPrbDl() []string {
	if m != nil {
		return m.StartPrbDl
	}
	return nil
}

func (m *E2RRMConfigAttribute) GetEndPrbDl() []string {
	if m != nil {
		return m.EndPrbDl
	}
	return nil
}

func (m *E2RRMConfigAttribute) GetSubFrameBitmaskDl() []string {
	if m != nil {
		return m.SubFrameBitmaskDl
	}
	return nil
}

func (m *E2RRMConfigAttribute) GetP0UePusch() []string {
	if m != nil {
		return m.P0UePusch
	}
	return nil
}

func (m *E2RRMConfigAttribute) GetStartPrbUl() []string {
	if m != nil {
		return m.StartPrbUl
	}
	return nil
}

func (m *E2RRMConfigAttribute) GetEndPrbUl() []string {
	if m != nil {
		return m.EndPrbUl
	}
	return nil
}

func (m *E2RRMConfigAttribute) GetSubFrameBitmaskUl() []string {
	if m != nil {
		return m.SubFrameBitmaskUl
	}
	return nil
}

// RRMConfigStatus message
type E2RRMConfigStatusAttribute struct {
	Ecgi   *E2ECGI              `protobuf:"bytes,1,opt,name=ecgi,proto3" json:"ecgi,omitempty"`
	Crnti  []string             `protobuf:"bytes,2,rep,name=crnti,proto3" json:"crnti,omitempty"`
	Status []E2SuccessOrFailure `protobuf:"varint,3,rep,packed,name=status,proto3,enum=ran.e2.E2SuccessOrFailure" json:"status,omitempty"`
}

func (m *E2RRMConfigStatusAttribute) Reset()         { *m = E2RRMConfigStatusAttribute{} }
func (m *E2RRMConfigStatusAttribute) String() string { return proto.CompactTextString(m) }
func (*E2RRMConfigStatusAttribute) ProtoMessage()    {}
func (*E2RRMConfigStatusAttribute) Descriptor() ([]byte, []int) {
	return fileDescriptor_01d4ac3ab6ba660b, []int{59}
}
func (m *E2RRMConfigStatusAttribute) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *E2RRMConfigStatusAttribute) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_E2RRMConfigStatusAttribute.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *E2RRMConfigStatusAttribute) XXX_Merge(src proto.Message) {
	xxx_messageInfo_E2RRMConfigStatusAttribute.Merge(m, src)
}
func (m *E2RRMConfigStatusAttribute) XXX_Size() int {
	return m.Size()
}
func (m *E2RRMConfigStatusAttribute) XXX_DiscardUnknown() {
	xxx_messageInfo_E2RRMConfigStatusAttribute.DiscardUnknown(m)
}

var xxx_messageInfo_E2RRMConfigStatusAttribute proto.InternalMessageInfo

func (m *E2RRMConfigStatusAttribute) GetEcgi() *E2ECGI {
	if m != nil {
		return m.Ecgi
	}
	return nil
}

func (m *E2RRMConfigStatusAttribute) GetCrnti() []string {
	if m != nil {
		return m.Crnti
	}
	return nil
}

func (m *E2RRMConfigStatusAttribute) GetStatus() []E2SuccessOrFailure {
	if m != nil {
		return m.Status
	}
	return nil
}

type E2CACap struct {
	Band              string         `protobuf:"bytes,1,opt,name=band,proto3" json:"band,omitempty"`
	Caclassdl         E2CACapClassDl `protobuf:"varint,2,opt,name=caclassdl,proto3,enum=ran.e2.E2CACapClassDl" json:"caclassdl,omitempty"`
	Caclassul         E2CACapClassUl `protobuf:"varint,3,opt,name=caclassul,proto3,enum=ran.e2.E2CACapClassUl" json:"caclassul,omitempty"`
	CrossCarrierSched string         `protobuf:"bytes,4,opt,name=crossCarrierSched,proto3" json:"crossCarrierSched,omitempty"`
}

func (m *E2CACap) Reset()         { *m = E2CACap{} }
func (m *E2CACap) String() string { return proto.CompactTextString(m) }
func (*E2CACap) ProtoMessage()    {}
func (*E2CACap) Descriptor() ([]byte, []int) {
	return fileDescriptor_01d4ac3ab6ba660b, []int{60}
}
func (m *E2CACap) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *E2CACap) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_E2CACap.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *E2CACap) XXX_Merge(src proto.Message) {
	xxx_messageInfo_E2CACap.Merge(m, src)
}
func (m *E2CACap) XXX_Size() int {
	return m.Size()
}
func (m *E2CACap) XXX_DiscardUnknown() {
	xxx_messageInfo_E2CACap.DiscardUnknown(m)
}

var xxx_messageInfo_E2CACap proto.InternalMessageInfo

func (m *E2CACap) GetBand() string {
	if m != nil {
		return m.Band
	}
	return ""
}

func (m *E2CACap) GetCaclassdl() E2CACapClassDl {
	if m != nil {
		return m.Caclassdl
	}
	return E2CACapClassDl_E2_CACAP_CLASSDL_A
}

func (m *E2CACap) GetCaclassul() E2CACapClassUl {
	if m != nil {
		return m.Caclassul
	}
	return E2CACapClassUl_E2_CACAP_CLASSUL_A
}

func (m *E2CACap) GetCrossCarrierSched() string {
	if m != nil {
		return m.CrossCarrierSched
	}
	return ""
}

type E2DCCap struct {
	DrbTypeSplit E2DCCapDrbType `protobuf:"varint,1,opt,name=drbTypeSplit,proto3,enum=ran.e2.E2DCCapDrbType" json:"drbTypeSplit,omitempty"`
}

func (m *E2DCCap) Reset()         { *m = E2DCCap{} }
func (m *E2DCCap) String() string { return proto.CompactTextString(m) }
func (*E2DCCap) ProtoMessage()    {}
func (*E2DCCap) Descriptor() ([]byte, []int) {
	return fileDescriptor_01d4ac3ab6ba660b, []int{61}
}
func (m *E2DCCap) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *E2DCCap) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_E2DCCap.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *E2DCCap) XXX_Merge(src proto.Message) {
	xxx_messageInfo_E2DCCap.Merge(m, src)
}
func (m *E2DCCap) XXX_Size() int {
	return m.Size()
}
func (m *E2DCCap) XXX_DiscardUnknown() {
	xxx_messageInfo_E2DCCap.DiscardUnknown(m)
}

var xxx_messageInfo_E2DCCap proto.InternalMessageInfo

func (m *E2DCCap) GetDrbTypeSplit() E2DCCapDrbType {
	if m != nil {
		return m.DrbTypeSplit
	}
	return E2DCCapDrbType_E2_DCCAP_DRBTYPE_SUPPORTED
}

// UECapabilityEnqyuiry message
type E2UECapabilityEnquiryAttribute struct {
	Crnti string  `protobuf:"bytes,1,opt,name=crnti,proto3" json:"crnti,omitempty"`
	Ecgi  *E2ECGI `protobuf:"bytes,2,opt,name=ecgi,proto3" json:"ecgi,omitempty"`
}

func (m *E2UECapabilityEnquiryAttribute) Reset()         { *m = E2UECapabilityEnquiryAttribute{} }
func (m *E2UECapabilityEnquiryAttribute) String() string { return proto.CompactTextString(m) }
func (*E2UECapabilityEnquiryAttribute) ProtoMessage()    {}
func (*E2UECapabilityEnquiryAttribute) Descriptor() ([]byte, []int) {
	return fileDescriptor_01d4ac3ab6ba660b, []int{62}
}
func (m *E2UECapabilityEnquiryAttribute) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *E2UECapabilityEnquiryAttribute) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_E2UECapabilityEnquiryAttribute.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *E2UECapabilityEnquiryAttribute) XXX_Merge(src proto.Message) {
	xxx_messageInfo_E2UECapabilityEnquiryAttribute.Merge(m, src)
}
func (m *E2UECapabilityEnquiryAttribute) XXX_Size() int {
	return m.Size()
}
func (m *E2UECapabilityEnquiryAttribute) XXX_DiscardUnknown() {
	xxx_messageInfo_E2UECapabilityEnquiryAttribute.DiscardUnknown(m)
}

var xxx_messageInfo_E2UECapabilityEnquiryAttribute proto.InternalMessageInfo

func (m *E2UECapabilityEnquiryAttribute) GetCrnti() string {
	if m != nil {
		return m.Crnti
	}
	return ""
}

func (m *E2UECapabilityEnquiryAttribute) GetEcgi() *E2ECGI {
	if m != nil {
		return m.Ecgi
	}
	return nil
}

// UECapabilityInfo message
type E2UECapabilityInfoAttribute struct {
	Crnti string   `protobuf:"bytes,1,opt,name=crnti,proto3" json:"crnti,omitempty"`
	Ecgi  *E2ECGI  `protobuf:"bytes,2,opt,name=ecgi,proto3" json:"ecgi,omitempty"`
	CaCap *E2CACap `protobuf:"bytes,3,opt,name=caCap,proto3" json:"caCap,omitempty"`
	DcCap *E2DCCap `protobuf:"bytes,4,opt,name=dcCap,proto3" json:"dcCap,omitempty"`
}

func (m *E2UECapabilityInfoAttribute) Reset()         { *m = E2UECapabilityInfoAttribute{} }
func (m *E2UECapabilityInfoAttribute) String() string { return proto.CompactTextString(m) }
func (*E2UECapabilityInfoAttribute) ProtoMessage()    {}
func (*E2UECapabilityInfoAttribute) Descriptor() ([]byte, []int) {
	return fileDescriptor_01d4ac3ab6ba660b, []int{63}
}
func (m *E2UECapabilityInfoAttribute) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *E2UECapabilityInfoAttribute) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_E2UECapabilityInfoAttribute.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *E2UECapabilityInfoAttribute) XXX_Merge(src proto.Message) {
	xxx_messageInfo_E2UECapabilityInfoAttribute.Merge(m, src)
}
func (m *E2UECapabilityInfoAttribute) XXX_Size() int {
	return m.Size()
}
func (m *E2UECapabilityInfoAttribute) XXX_DiscardUnknown() {
	xxx_messageInfo_E2UECapabilityInfoAttribute.DiscardUnknown(m)
}

var xxx_messageInfo_E2UECapabilityInfoAttribute proto.InternalMessageInfo

func (m *E2UECapabilityInfoAttribute) GetCrnti() string {
	if m != nil {
		return m.Crnti
	}
	return ""
}

func (m *E2UECapabilityInfoAttribute) GetEcgi() *E2ECGI {
	if m != nil {
		return m.Ecgi
	}
	return nil
}

func (m *E2UECapabilityInfoAttribute) GetCaCap() *E2CACap {
	if m != nil {
		return m.CaCap
	}
	return nil
}

func (m *E2UECapabilityInfoAttribute) GetDcCap() *E2DCCap {
	if m != nil {
		return m.DcCap
	}
	return nil
}

type E2PropScell struct {
	PciArfcn                *E2PCIARFCN   `protobuf:"bytes,1,opt,name=pciArfcn,proto3" json:"pciArfcn,omitempty"`
	CrossCarrierSchedEnable string        `protobuf:"bytes,2,opt,name=crossCarrierSchedEnable,proto3" json:"crossCarrierSchedEnable,omitempty"`
	CaDirection             E2CADirection `protobuf:"varint,3,opt,name=caDirection,proto3,enum=ran.e2.E2CADirection" json:"caDirection,omitempty"`
	DeactTimer              string        `protobuf:"bytes,4,opt,name=deactTimer,proto3" json:"deactTimer,omitempty"`
}

func (m *E2PropScell) Reset()         { *m = E2PropScell{} }
func (m *E2PropScell) String() string { return proto.CompactTextString(m) }
func (*E2PropScell) ProtoMessage()    {}
func (*E2PropScell) Descriptor() ([]byte, []int) {
	return fileDescriptor_01d4ac3ab6ba660b, []int{64}
}
func (m *E2PropScell) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *E2PropScell) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_E2PropScell.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *E2PropScell) XXX_Merge(src proto.Message) {
	xxx_messageInfo_E2PropScell.Merge(m, src)
}
func (m *E2PropScell) XXX_Size() int {
	return m.Size()
}
func (m *E2PropScell) XXX_DiscardUnknown() {
	xxx_messageInfo_E2PropScell.DiscardUnknown(m)
}

var xxx_messageInfo_E2PropScell proto.InternalMessageInfo

func (m *E2PropScell) GetPciArfcn() *E2PCIARFCN {
	if m != nil {
		return m.PciArfcn
	}
	return nil
}

func (m *E2PropScell) GetCrossCarrierSchedEnable() string {
	if m != nil {
		return m.CrossCarrierSchedEnable
	}
	return ""
}

func (m *E2PropScell) GetCaDirection() E2CADirection {
	if m != nil {
		return m.CaDirection
	}
	return E2CADirection_E2_CADIRECTION_DL
}

func (m *E2PropScell) GetDeactTimer() string {
	if m != nil {
		return m.DeactTimer
	}
	return ""
}

// ScellAdd message
type E2ScellAddAttribute struct {
	Crnti      string         `protobuf:"bytes,1,opt,name=crnti,proto3" json:"crnti,omitempty"`
	Ecgi       *E2ECGI        `protobuf:"bytes,2,opt,name=ecgi,proto3" json:"ecgi,omitempty"`
	ScellsProp []*E2PropScell `protobuf:"bytes,3,rep,name=scellsProp,proto3" json:"scellsProp,omitempty"`
}

func (m *E2ScellAddAttribute) Reset()         { *m = E2ScellAddAttribute{} }
func (m *E2ScellAddAttribute) String() string { return proto.CompactTextString(m) }
func (*E2ScellAddAttribute) ProtoMessage()    {}
func (*E2ScellAddAttribute) Descriptor() ([]byte, []int) {
	return fileDescriptor_01d4ac3ab6ba660b, []int{65}
}
func (m *E2ScellAddAttribute) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *E2ScellAddAttribute) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_E2ScellAddAttribute.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *E2ScellAddAttribute) XXX_Merge(src proto.Message) {
	xxx_messageInfo_E2ScellAddAttribute.Merge(m, src)
}
func (m *E2ScellAddAttribute) XXX_Size() int {
	return m.Size()
}
func (m *E2ScellAddAttribute) XXX_DiscardUnknown() {
	xxx_messageInfo_E2ScellAddAttribute.DiscardUnknown(m)
}

var xxx_messageInfo_E2ScellAddAttribute proto.InternalMessageInfo

func (m *E2ScellAddAttribute) GetCrnti() string {
	if m != nil {
		return m.Crnti
	}
	return ""
}

func (m *E2ScellAddAttribute) GetEcgi() *E2ECGI {
	if m != nil {
		return m.Ecgi
	}
	return nil
}

func (m *E2ScellAddAttribute) GetScellsProp() []*E2PropScell {
	if m != nil {
		return m.ScellsProp
	}
	return nil
}

// ScellAddStatus message
type E2ScellAddStatusAttribute struct {
	Crnti     string               `protobuf:"bytes,1,opt,name=crnti,proto3" json:"crnti,omitempty"`
	Ecgi      *E2ECGI              `protobuf:"bytes,2,opt,name=ecgi,proto3" json:"ecgi,omitempty"`
	ScellsInd []*E2PCIARFCN        `protobuf:"bytes,3,rep,name=scellsInd,proto3" json:"scellsInd,omitempty"`
	Status    []E2SuccessOrFailure `protobuf:"varint,4,rep,packed,name=status,proto3,enum=ran.e2.E2SuccessOrFailure" json:"status,omitempty"`
}

func (m *E2ScellAddStatusAttribute) Reset()         { *m = E2ScellAddStatusAttribute{} }
func (m *E2ScellAddStatusAttribute) String() string { return proto.CompactTextString(m) }
func (*E2ScellAddStatusAttribute) ProtoMessage()    {}
func (*E2ScellAddStatusAttribute) Descriptor() ([]byte, []int) {
	return fileDescriptor_01d4ac3ab6ba660b, []int{66}
}
func (m *E2ScellAddStatusAttribute) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *E2ScellAddStatusAttribute) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_E2ScellAddStatusAttribute.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *E2ScellAddStatusAttribute) XXX_Merge(src proto.Message) {
	xxx_messageInfo_E2ScellAddStatusAttribute.Merge(m, src)
}
func (m *E2ScellAddStatusAttribute) XXX_Size() int {
	return m.Size()
}
func (m *E2ScellAddStatusAttribute) XXX_DiscardUnknown() {
	xxx_messageInfo_E2ScellAddStatusAttribute.DiscardUnknown(m)
}

var xxx_messageInfo_E2ScellAddStatusAttribute proto.InternalMessageInfo

func (m *E2ScellAddStatusAttribute) GetCrnti() string {
	if m != nil {
		return m.Crnti
	}
	return ""
}

func (m *E2ScellAddStatusAttribute) GetEcgi() *E2ECGI {
	if m != nil {
		return m.Ecgi
	}
	return nil
}

func (m *E2ScellAddStatusAttribute) GetScellsInd() []*E2PCIARFCN {
	if m != nil {
		return m.ScellsInd
	}
	return nil
}

func (m *E2ScellAddStatusAttribute) GetStatus() []E2SuccessOrFailure {
	if m != nil {
		return m.Status
	}
	return nil
}

// ScellDelete message
type E2ScellDeleteAttribute struct {
	Crnti     string        `protobuf:"bytes,1,opt,name=crnti,proto3" json:"crnti,omitempty"`
	Ecgi      *E2ECGI       `protobuf:"bytes,2,opt,name=ecgi,proto3" json:"ecgi,omitempty"`
	ScellsInd []*E2PCIARFCN `protobuf:"bytes,3,rep,name=scellsInd,proto3" json:"scellsInd,omitempty"`
}

func (m *E2ScellDeleteAttribute) Reset()         { *m = E2ScellDeleteAttribute{} }
func (m *E2ScellDeleteAttribute) String() string { return proto.CompactTextString(m) }
func (*E2ScellDeleteAttribute) ProtoMessage()    {}
func (*E2ScellDeleteAttribute) Descriptor() ([]byte, []int) {
	return fileDescriptor_01d4ac3ab6ba660b, []int{67}
}
func (m *E2ScellDeleteAttribute) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *E2ScellDeleteAttribute) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_E2ScellDeleteAttribute.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *E2ScellDeleteAttribute) XXX_Merge(src proto.Message) {
	xxx_messageInfo_E2ScellDeleteAttribute.Merge(m, src)
}
func (m *E2ScellDeleteAttribute) XXX_Size() int {
	return m.Size()
}
func (m *E2ScellDeleteAttribute) XXX_DiscardUnknown() {
	xxx_messageInfo_E2ScellDeleteAttribute.DiscardUnknown(m)
}

var xxx_messageInfo_E2ScellDeleteAttribute proto.InternalMessageInfo

func (m *E2ScellDeleteAttribute) GetCrnti() string {
	if m != nil {
		return m.Crnti
	}
	return ""
}

func (m *E2ScellDeleteAttribute) GetEcgi() *E2ECGI {
	if m != nil {
		return m.Ecgi
	}
	return nil
}

func (m *E2ScellDeleteAttribute) GetScellsInd() []*E2PCIARFCN {
	if m != nil {
		return m.ScellsInd
	}
	return nil
}

// SeNBAdd message
type E2SeNBAddAttribute struct {
	Crnti string  `protobuf:"bytes,1,opt,name=crnti,proto3" json:"crnti,omitempty"`
	MEcgi *E2ECGI `protobuf:"bytes,2,opt,name=mEcgi,proto3" json:"mEcgi,omitempty"`
	SEcgi *E2ECGI `protobuf:"bytes,3,opt,name=sEcgi,proto3" json:"sEcgi,omitempty"`
}

func (m *E2SeNBAddAttribute) Reset()         { *m = E2SeNBAddAttribute{} }
func (m *E2SeNBAddAttribute) String() string { return proto.CompactTextString(m) }
func (*E2SeNBAddAttribute) ProtoMessage()    {}
func (*E2SeNBAddAttribute) Descriptor() ([]byte, []int) {
	return fileDescriptor_01d4ac3ab6ba660b, []int{68}
}
func (m *E2SeNBAddAttribute) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *E2SeNBAddAttribute) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_E2SeNBAddAttribute.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *E2SeNBAddAttribute) XXX_Merge(src proto.Message) {
	xxx_messageInfo_E2SeNBAddAttribute.Merge(m, src)
}
func (m *E2SeNBAddAttribute) XXX_Size() int {
	return m.Size()
}
func (m *E2SeNBAddAttribute) XXX_DiscardUnknown() {
	xxx_messageInfo_E2SeNBAddAttribute.DiscardUnknown(m)
}

var xxx_messageInfo_E2SeNBAddAttribute proto.InternalMessageInfo

func (m *E2SeNBAddAttribute) GetCrnti() string {
	if m != nil {
		return m.Crnti
	}
	return ""
}

func (m *E2SeNBAddAttribute) GetMEcgi() *E2ECGI {
	if m != nil {
		return m.MEcgi
	}
	return nil
}

func (m *E2SeNBAddAttribute) GetSEcgi() *E2ECGI {
	if m != nil {
		return m.SEcgi
	}
	return nil
}

// SeNBAddStatus message
type E2SeNBAddStatusAttribute struct {
	Crnti  string             `protobuf:"bytes,1,opt,name=crnti,proto3" json:"crnti,omitempty"`
	Ecgi   *E2ECGI            `protobuf:"bytes,2,opt,name=ecgi,proto3" json:"ecgi,omitempty"`
	Status E2SuccessOrFailure `protobuf:"varint,3,opt,name=status,proto3,enum=ran.e2.E2SuccessOrFailure" json:"status,omitempty"`
}

func (m *E2SeNBAddStatusAttribute) Reset()         { *m = E2SeNBAddStatusAttribute{} }
func (m *E2SeNBAddStatusAttribute) String() string { return proto.CompactTextString(m) }
func (*E2SeNBAddStatusAttribute) ProtoMessage()    {}
func (*E2SeNBAddStatusAttribute) Descriptor() ([]byte, []int) {
	return fileDescriptor_01d4ac3ab6ba660b, []int{69}
}
func (m *E2SeNBAddStatusAttribute) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *E2SeNBAddStatusAttribute) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_E2SeNBAddStatusAttribute.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *E2SeNBAddStatusAttribute) XXX_Merge(src proto.Message) {
	xxx_messageInfo_E2SeNBAddStatusAttribute.Merge(m, src)
}
func (m *E2SeNBAddStatusAttribute) XXX_Size() int {
	return m.Size()
}
func (m *E2SeNBAddStatusAttribute) XXX_DiscardUnknown() {
	xxx_messageInfo_E2SeNBAddStatusAttribute.DiscardUnknown(m)
}

var xxx_messageInfo_E2SeNBAddStatusAttribute proto.InternalMessageInfo

func (m *E2SeNBAddStatusAttribute) GetCrnti() string {
	if m != nil {
		return m.Crnti
	}
	return ""
}

func (m *E2SeNBAddStatusAttribute) GetEcgi() *E2ECGI {
	if m != nil {
		return m.Ecgi
	}
	return nil
}

func (m *E2SeNBAddStatusAttribute) GetStatus() E2SuccessOrFailure {
	if m != nil {
		return m.Status
	}
	return E2SuccessOrFailure_E2_SUCCESS
}

// SeNBDelete message
type E2SeNBDeleteAttribute struct {
	Crnti string  `protobuf:"bytes,1,opt,name=crnti,proto3" json:"crnti,omitempty"`
	MEcgi *E2ECGI `protobuf:"bytes,2,opt,name=mEcgi,proto3" json:"mEcgi,omitempty"`
	SEcgi *E2ECGI `protobuf:"bytes,3,opt,name=sEcgi,proto3" json:"sEcgi,omitempty"`
}

func (m *E2SeNBDeleteAttribute) Reset()         { *m = E2SeNBDeleteAttribute{} }
func (m *E2SeNBDeleteAttribute) String() string { return proto.CompactTextString(m) }
func (*E2SeNBDeleteAttribute) ProtoMessage()    {}
func (*E2SeNBDeleteAttribute) Descriptor() ([]byte, []int) {
	return fileDescriptor_01d4ac3ab6ba660b, []int{70}
}
func (m *E2SeNBDeleteAttribute) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *E2SeNBDeleteAttribute) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_E2SeNBDeleteAttribute.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *E2SeNBDeleteAttribute) XXX_Merge(src proto.Message) {
	xxx_messageInfo_E2SeNBDeleteAttribute.Merge(m, src)
}
func (m *E2SeNBDeleteAttribute) XXX_Size() int {
	return m.Size()
}
func (m *E2SeNBDeleteAttribute) XXX_DiscardUnknown() {
	xxx_messageInfo_E2SeNBDeleteAttribute.DiscardUnknown(m)
}

var xxx_messageInfo_E2SeNBDeleteAttribute proto.InternalMessageInfo

func (m *E2SeNBDeleteAttribute) GetCrnti() string {
	if m != nil {
		return m.Crnti
	}
	return ""
}

func (m *E2SeNBDeleteAttribute) GetMEcgi() *E2ECGI {
	if m != nil {
		return m.MEcgi
	}
	return nil
}

func (m *E2SeNBDeleteAttribute) GetSEcgi() *E2ECGI {
	if m != nil {
		return m.SEcgi
	}
	return nil
}

type E2TrafficSplitPercentage struct {
	Ecgi                *E2ECGI `protobuf:"bytes,1,opt,name=ecgi,proto3" json:"ecgi,omitempty"`
	TrafficPercentageDl string  `protobuf:"bytes,2,opt,name=trafficPercentageDl,proto3" json:"trafficPercentageDl,omitempty"`
	TrafficPercentageUl string  `protobuf:"bytes,3,opt,name=trafficPercentageUl,proto3" json:"trafficPercentageUl,omitempty"`
}

func (m *E2TrafficSplitPercentage) Reset()         { *m = E2TrafficSplitPercentage{} }
func (m *E2TrafficSplitPercentage) String() string { return proto.CompactTextString(m) }
func (*E2TrafficSplitPercentage) ProtoMessage()    {}
func (*E2TrafficSplitPercentage) Descriptor() ([]byte, []int) {
	return fileDescriptor_01d4ac3ab6ba660b, []int{71}
}
func (m *E2TrafficSplitPercentage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *E2TrafficSplitPercentage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_E2TrafficSplitPercentage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *E2TrafficSplitPercentage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_E2TrafficSplitPercentage.Merge(m, src)
}
func (m *E2TrafficSplitPercentage) XXX_Size() int {
	return m.Size()
}
func (m *E2TrafficSplitPercentage) XXX_DiscardUnknown() {
	xxx_messageInfo_E2TrafficSplitPercentage.DiscardUnknown(m)
}

var xxx_messageInfo_E2TrafficSplitPercentage proto.InternalMessageInfo

func (m *E2TrafficSplitPercentage) GetEcgi() *E2ECGI {
	if m != nil {
		return m.Ecgi
	}
	return nil
}

func (m *E2TrafficSplitPercentage) GetTrafficPercentageDl() string {
	if m != nil {
		return m.TrafficPercentageDl
	}
	return ""
}

func (m *E2TrafficSplitPercentage) GetTrafficPercentageUl() string {
	if m != nil {
		return m.TrafficPercentageUl
	}
	return ""
}

// TrafficSplitConfig message
type E2TrafficSplitConfigAttribute struct {
	Crnti                  string                      `protobuf:"bytes,1,opt,name=crnti,proto3" json:"crnti,omitempty"`
	Ecgi                   *E2ECGI                     `protobuf:"bytes,2,opt,name=ecgi,proto3" json:"ecgi,omitempty"`
	TrafficSplitPercentage []*E2TrafficSplitPercentage `protobuf:"bytes,3,rep,name=trafficSplitPercentage,proto3" json:"trafficSplitPercentage,omitempty"`
}

func (m *E2TrafficSplitConfigAttribute) Reset()         { *m = E2TrafficSplitConfigAttribute{} }
func (m *E2TrafficSplitConfigAttribute) String() string { return proto.CompactTextString(m) }
func (*E2TrafficSplitConfigAttribute) ProtoMessage()    {}
func (*E2TrafficSplitConfigAttribute) Descriptor() ([]byte, []int) {
	return fileDescriptor_01d4ac3ab6ba660b, []int{72}
}
func (m *E2TrafficSplitConfigAttribute) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *E2TrafficSplitConfigAttribute) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_E2TrafficSplitConfigAttribute.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *E2TrafficSplitConfigAttribute) XXX_Merge(src proto.Message) {
	xxx_messageInfo_E2TrafficSplitConfigAttribute.Merge(m, src)
}
func (m *E2TrafficSplitConfigAttribute) XXX_Size() int {
	return m.Size()
}
func (m *E2TrafficSplitConfigAttribute) XXX_DiscardUnknown() {
	xxx_messageInfo_E2TrafficSplitConfigAttribute.DiscardUnknown(m)
}

var xxx_messageInfo_E2TrafficSplitConfigAttribute proto.InternalMessageInfo

func (m *E2TrafficSplitConfigAttribute) GetCrnti() string {
	if m != nil {
		return m.Crnti
	}
	return ""
}

func (m *E2TrafficSplitConfigAttribute) GetEcgi() *E2ECGI {
	if m != nil {
		return m.Ecgi
	}
	return nil
}

func (m *E2TrafficSplitConfigAttribute) GetTrafficSplitPercentage() []*E2TrafficSplitPercentage {
	if m != nil {
		return m.TrafficSplitPercentage
	}
	return nil
}

func init() {
	proto.RegisterEnum("ran.e2.E2MessageType", E2MessageType_name, E2MessageType_value)
	proto.RegisterEnum("ran.e2.E2AdmEstCause", E2AdmEstCause_name, E2AdmEstCause_value)
	proto.RegisterEnum("ran.e2.E2SuccessOrFailure", E2SuccessOrFailure_name, E2SuccessOrFailure_value)
	proto.RegisterEnum("ran.e2.E2ReconfigCause", E2ReconfigCause_name, E2ReconfigCause_value)
	proto.RegisterEnum("ran.e2.E2ReleaseCause", E2ReleaseCause_name, E2ReleaseCause_value)
	proto.RegisterEnum("ran.e2.E2ERABDirection", E2ERABDirection_name, E2ERABDirection_value)
	proto.RegisterEnum("ran.e2.E2ERABType", E2ERABType_name, E2ERABType_value)
	proto.RegisterEnum("ran.e2.E2ReportParamPR", E2ReportParamPR_name, E2ReportParamPR_value)
	proto.RegisterEnum("ran.e2.E2PerParamReportIntervalMs", E2PerParamReportIntervalMs_name, E2PerParamReportIntervalMs_value)
	proto.RegisterEnum("ran.e2.E2ThresholdEUTRAPR", E2ThresholdEUTRAPR_name, E2ThresholdEUTRAPR_value)
	proto.RegisterEnum("ran.e2.E2TimeToTrigger", E2TimeToTrigger_name, E2TimeToTrigger_value)
	proto.RegisterEnum("ran.e2.E2TriggerQuantity", E2TriggerQuantity_name, E2TriggerQuantity_value)
	proto.RegisterEnum("ran.e2.E2ReportQuality", E2ReportQuality_name, E2ReportQuality_value)
	proto.RegisterEnum("ran.e2.E2MeasIdActionPR", E2MeasIdActionPR_name, E2MeasIdActionPR_value)
	proto.RegisterEnum("ran.e2.E2L2MeasReportIntervals", E2L2MeasReportIntervals_name, E2L2MeasReportIntervals_value)
	proto.RegisterEnum("ran.e2.E2XICICPA", E2XICICPA_name, E2XICICPA_value)
	proto.RegisterEnum("ran.e2.E2CACapClassDl", E2CACapClassDl_name, E2CACapClassDl_value)
	proto.RegisterEnum("ran.e2.E2CACapClassUl", E2CACapClassUl_name, E2CACapClassUl_value)
	proto.RegisterEnum("ran.e2.E2DCCapDrbType", E2DCCapDrbType_name, E2DCCapDrbType_value)
	proto.RegisterEnum("ran.e2.E2CADirection", E2CADirection_name, E2CADirection_value)
	proto.RegisterType((*E2MessageHeader)(nil), "ran.e2.E2MessageHeader")
	proto.RegisterType((*E2MessagePayload)(nil), "ran.e2.E2MessagePayload")
	proto.RegisterType((*E2Message)(nil), "ran.e2.E2Message")
	proto.RegisterType((*ServiceResult)(nil), "ran.e2.ServiceResult")
	proto.RegisterType((*E2ECGI)(nil), "ran.e2.E2ECGI")
	proto.RegisterType((*E2CandScell)(nil), "ran.e2.E2CandScell")
	proto.RegisterType((*E2CellConfigRequestAttribute)(nil), "ran.e2.E2CellConfigRequestAttribute")
	proto.RegisterType((*E2CellConfigReportAttribute)(nil), "ran.e2.E2CellConfigReportAttribute")
	proto.RegisterType((*E2UEAdmissionRequestAttribute)(nil), "ran.e2.E2UEAdmissionRequestAttribute")
	proto.RegisterType((*E2UEAdmissionResponseAttribute)(nil), "ran.e2.E2UEAdmissionResponseAttribute")
	proto.RegisterType((*E2UEAdmissionStatusAttribute)(nil), "ran.e2.E2UEAdmissionStatusAttribute")
	proto.RegisterType((*E2UEContextUpdateAttribute)(nil), "ran.e2.E2UEContextUpdateAttribute")
	proto.RegisterType((*E2UEReconfigIndAttribute)(nil), "ran.e2.E2UEReconfigIndAttribute")
	proto.RegisterType((*E2UEReleaseIndAttribute)(nil), "ran.e2.E2UEReleaseIndAttribute")
	proto.RegisterType((*E2UEAMBR)(nil), "ran.e2.E2UEAMBR")
	proto.RegisterType((*E2ERABParamsItem)(nil), "ran.e2.E2ERABParamsItem")
	proto.RegisterType((*E2ERABResponseItem)(nil), "ran.e2.E2ERABResponseItem")
	proto.RegisterType((*E2BearerAdmissionRequestAttribute)(nil), "ran.e2.E2BearerAdmissionRequestAttribute")
	proto.RegisterType((*E2BearerAdmissionResponseAttribute)(nil), "ran.e2.E2BearerAdmissionResponseAttribute")
	proto.RegisterType((*E2BearerAdmissionStatusAttribute)(nil), "ran.e2.E2BearerAdmissionStatusAttribute")
	proto.RegisterType((*E2BearerReleaseIndAttribute)(nil), "ran.e2.E2BearerReleaseIndAttribute")
	proto.RegisterType((*E2HORequestAttribute)(nil), "ran.e2.E2HORequestAttribute")
	proto.RegisterType((*E2HOFailureAttribute)(nil), "ran.e2.E2HOFailureAttribute")
	proto.RegisterType((*E2HOCompleteAttribute)(nil), "ran.e2.E2HOCompleteAttribute")
	proto.RegisterType((*E2HOCauseAttribute)(nil), "ran.e2.E2HOCauseAttribute")
	proto.RegisterType((*E2MeasCell)(nil), "ran.e2.E2MeasCell")
	proto.RegisterType((*E2MeasObject)(nil), "ran.e2.E2MeasObject")
	proto.RegisterType((*E2ReportParamChoice)(nil), "ran.e2.E2ReportParamChoice")
	proto.RegisterType((*E2ThresholdEUTRAChoice)(nil), "ran.e2.E2ThresholdEUTRAChoice")
	proto.RegisterType((*E2ThreasholdEUTRA)(nil), "ran.e2.E2ThreasholdEUTRA")
	proto.RegisterType((*E2PerParam)(nil), "ran.e2.E2PerParam")
	proto.RegisterType((*E2A1Param)(nil), "ran.e2.E2A1Param")
	proto.RegisterType((*E2A2Param)(nil), "ran.e2.E2A2Param")
	proto.RegisterType((*E2A3Param)(nil), "ran.e2.E2A3Param")
	proto.RegisterType((*E2A4Param)(nil), "ran.e2.E2A4Param")
	proto.RegisterType((*E2A5Param)(nil), "ran.e2.E2A5Param")
	proto.RegisterType((*E2A6Param)(nil), "ran.e2.E2A6Param")
	proto.RegisterType((*E2ReportParam)(nil), "ran.e2.E2ReportParam")
	proto.RegisterType((*E2ReportConfig)(nil), "ran.e2.E2ReportConfig")
	proto.RegisterType((*E2AddMeasId)(nil), "ran.e2.E2AddMeasId")
	proto.RegisterType((*E2DelMeasId)(nil), "ran.e2.E2DelMeasId")
	proto.RegisterType((*E2MeasIdActionChoice)(nil), "ran.e2.E2MeasIdActionChoice")
	proto.RegisterType((*E2MeasIdAction)(nil), "ran.e2.E2MeasIdAction")
	proto.RegisterType((*E2MeasID)(nil), "ran.e2.E2MeasID")
	proto.RegisterType((*E2RRCMeasConfigAttribute)(nil), "ran.e2.E2RRCMeasConfigAttribute")
	proto.RegisterType((*E2PCIARFCN)(nil), "ran.e2.E2PCIARFCN")
	proto.RegisterType((*E2RXSigReport)(nil), "ran.e2.E2RXSigReport")
	proto.RegisterType((*E2RxSigMeasReportAttribute)(nil), "ran.e2.E2RxSigMeasReportAttribute")
	proto.RegisterType((*E2L2ReportInterval)(nil), "ran.e2.E2L2ReportInterval")
	proto.RegisterType((*E2L2MeasConfigAttribute)(nil), "ran.e2.E2L2MeasConfigAttribute")
	proto.RegisterType((*E2RadioRepPerServCell)(nil), "ran.e2.E2RadioRepPerServCell")
	proto.RegisterType((*E2RadioMeasReportPerUEAttribute)(nil), "ran.e2.E2RadioMeasReportPerUEAttribute")
	proto.RegisterType((*E2RadioMeasReportPerCellAttribute)(nil), "ran.e2.E2RadioMeasReportPerCellAttribute")
	proto.RegisterType((*E2PRBUsage)(nil), "ran.e2.E2PRBUsage")
	proto.RegisterType((*E2SchedMeasRepPerServCell)(nil), "ran.e2.E2SchedMeasRepPerServCell")
	proto.RegisterType((*E2SchedMeasReportPerUEAttribute)(nil), "ran.e2.E2SchedMeasReportPerUEAttribute")
	proto.RegisterType((*E2SchedMeasReportPerCellAttribute)(nil), "ran.e2.E2SchedMeasReportPerCellAttribute")
	proto.RegisterType((*E2PDCPMeasReportPerUeAttribute)(nil), "ran.e2.E2PDCPMeasReportPerUeAttribute")
	proto.RegisterType((*E2RRMConfigAttribute)(nil), "ran.e2.E2RRMConfigAttribute")
	proto.RegisterType((*E2RRMConfigStatusAttribute)(nil), "ran.e2.E2RRMConfigStatusAttribute")
	proto.RegisterType((*E2CACap)(nil), "ran.e2.E2CACap")
	proto.RegisterType((*E2DCCap)(nil), "ran.e2.E2DCCap")
	proto.RegisterType((*E2UECapabilityEnquiryAttribute)(nil), "ran.e2.E2UECapabilityEnquiryAttribute")
	proto.RegisterType((*E2UECapabilityInfoAttribute)(nil), "ran.e2.E2UECapabilityInfoAttribute")
	proto.RegisterType((*E2PropScell)(nil), "ran.e2.E2PropScell")
	proto.RegisterType((*E2ScellAddAttribute)(nil), "ran.e2.E2ScellAddAttribute")
	proto.RegisterType((*E2ScellAddStatusAttribute)(nil), "ran.e2.E2ScellAddStatusAttribute")
	proto.RegisterType((*E2ScellDeleteAttribute)(nil), "ran.e2.E2ScellDeleteAttribute")
	proto.RegisterType((*E2SeNBAddAttribute)(nil), "ran.e2.E2SeNBAddAttribute")
	proto.RegisterType((*E2SeNBAddStatusAttribute)(nil), "ran.e2.E2SeNBAddStatusAttribute")
	proto.RegisterType((*E2SeNBDeleteAttribute)(nil), "ran.e2.E2SeNBDeleteAttribute")
	proto.RegisterType((*E2TrafficSplitPercentage)(nil), "ran.e2.E2TrafficSplitPercentage")
	proto.RegisterType((*E2TrafficSplitConfigAttribute)(nil), "ran.e2.E2TrafficSplitConfigAttribute")
}

func init() { proto.RegisterFile("api/e2/e2.proto", fileDescriptor_01d4ac3ab6ba660b) }

var fileDescriptor_01d4ac3ab6ba660b = []byte{
	// 5206 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x7c, 0x4d, 0x6c, 0x24, 0x49,
	0x56, 0x7f, 0x65, 0x95, 0xbf, 0x2a, 0xec, 0x6e, 0x67, 0x47, 0xbb, 0xdd, 0xd5, 0xee, 0x6e, 0xb7,
	0x3b, 0x67, 0x76, 0x76, 0xfe, 0xfe, 0x43, 0x6f, 0x39, 0xfd, 0x31, 0x4d, 0x2f, 0x83, 0x94, 0xce,
	0x4a, 0x77, 0xd5, 0x6e, 0xb9, 0xaa, 0x1c, 0x59, 0xd9, 0xd3, 0xb3, 0x2c, 0xaa, 0x4d, 0x57, 0xa5,
	0xdb, 0xc9, 0x64, 0x7d, 0x74, 0x66, 0xd6, 0x4c, 0xf7, 0x5e, 0x10, 0xd2, 0x0a, 0x01, 0x7b, 0x60,
	0x2f, 0x7b, 0xd8, 0x0b, 0x42, 0x0b, 0x5c, 0x10, 0x5a, 0x21, 0x10, 0x42, 0x2b, 0x38, 0x21, 0x21,
	0x21, 0x24, 0xc4, 0x5c, 0xf8, 0xba, 0xa1, 0x99, 0x03, 0x07, 0x2e, 0x9c, 0x10, 0x17, 0x24, 0x14,
	0x1f, 0x99, 0x19, 0xf9, 0x55, 0x76, 0x8f, 0x99, 0xbd, 0x55, 0xbc, 0xf7, 0x7b, 0x2f, 0x5e, 0x44,
	0xbc, 0x7c, 0x2f, 0x5e, 0x44, 0xd8, 0x60, 0xd5, 0x9c, 0xd8, 0x5f, 0xb3, 0xe4, 0xaf, 0x59, 0xf2,
	0xa3, 0x89, 0x3b, 0xf6, 0xc7, 0x70, 0xc1, 0x35, 0x47, 0x8f, 0x2c, 0x59, 0xfa, 0x06, 0x58, 0xd5,
	0xe4, 0x63, 0xcb, 0xf3, 0xcc, 0x17, 0x56, 0xdd, 0x32, 0x07, 0x96, 0x0b, 0xdf, 0x03, 0xcb, 0x43,
	0x4a, 0xe8, 0xbe, 0x9e, 0x58, 0x15, 0x61, 0x4b, 0x78, 0xf7, 0xba, 0x7c, 0xeb, 0x11, 0x15, 0x78,
	0x14, 0xa2, 0x31, 0x13, 0xf1, 0x48, 0xe9, 0xbf, 0x37, 0x80, 0x18, 0xb2, 0x3b, 0xe6, 0x6b, 0x67,
	0x6c, 0x0e, 0xe0, 0x19, 0xd8, 0xe8, 0x5b, 0x8e, 0xa3, 0x8e, 0x47, 0x67, 0xf6, 0x0b, 0x64, 0xbd,
	0x9c, 0x5a, 0x9e, 0xaf, 0xf8, 0xbe, 0x6b, 0x9f, 0x4e, 0x7d, 0xaa, 0x7c, 0x59, 0x7e, 0x3b, 0x52,
	0xae, 0xe6, 0x62, 0xeb, 0x05, 0x34, 0x43, 0x13, 0xec, 0x83, 0x3b, 0x3c, 0x77, 0x32, 0x76, 0xb9,
	0x6e, 0x8a, 0xa4, 0x9b, 0xb7, 0xb2, 0xbb, 0x89, 0x41, 0xeb, 0x05, 0x94, 0xaf, 0x07, 0xda, 0xe0,
	0xee, 0x54, 0x53, 0x06, 0x43, 0xdb, 0xf3, 0xec, 0xf1, 0x28, 0x35, 0x9a, 0x12, 0xe9, 0xe6, 0x2b,
	0x51, 0x37, 0x46, 0x3e, 0xb8, 0x5e, 0x40, 0xb3, 0x74, 0x41, 0x07, 0xdc, 0x8b, 0xb1, 0xbd, 0xc9,
	0x78, 0xe4, 0x59, 0x51, 0x5f, 0x73, 0xa4, 0xaf, 0x77, 0x72, 0xfa, 0x4a, 0xa0, 0xeb, 0x05, 0x34,
	0x53, 0x1b, 0x5e, 0x25, 0x8e, 0xaf, 0xfb, 0xa6, 0x3f, 0xf5, 0xa2, 0xbe, 0xe6, 0x93, 0xab, 0x64,
	0xe4, 0x62, 0xf1, 0x2a, 0xe5, 0x6b, 0x82, 0xdf, 0x01, 0x95, 0xa9, 0xa6, 0x8e, 0x47, 0xbe, 0xf5,
	0xca, 0x37, 0x26, 0x03, 0xd3, 0xe7, 0x46, 0xb4, 0x40, 0x7a, 0x91, 0xf8, 0x5e, 0xb2, 0x91, 0xf5,
	0x02, 0xca, 0xd5, 0x02, 0xbf, 0x05, 0xd6, 0xa7, 0x1a, 0xb2, 0xfa, 0x64, 0xfd, 0x1a, 0xa3, 0x41,
	0xa4, 0x7f, 0x91, 0xe8, 0xdf, 0xe2, 0xf5, 0x67, 0xe1, 0xea, 0x05, 0x94, 0xa3, 0x01, 0x7e, 0x00,
	0x6e, 0x61, 0x8e, 0x63, 0x99, 0x9e, 0x15, 0x53, 0xbd, 0x44, 0x54, 0x3f, 0x88, 0xab, 0x4e, 0xc1,
	0xea, 0x05, 0x94, 0x2d, 0x0f, 0xa7, 0xe0, 0xc1, 0xa9, 0x65, 0xba, 0x96, 0x9b, 0xef, 0x5b, 0x65,
	0xd2, 0xc5, 0xff, 0x8b, 0xba, 0x38, 0x9c, 0x2d, 0x50, 0x2f, 0xa0, 0x8b, 0x74, 0xc2, 0x57, 0x60,
	0x2b, 0x05, 0x49, 0xfa, 0x19, 0x20, 0xfd, 0x6e, 0xcf, 0xe8, 0x37, 0xed, 0x6b, 0x17, 0x6a, 0x85,
	0x2e, 0xd8, 0x4c, 0x60, 0x92, 0x3e, 0xb7, 0x4c, 0xfa, 0x7d, 0x37, 0xb7, 0xdf, 0xb4, 0xdf, 0x5d,
	0xa0, 0x11, 0x47, 0x08, 0x8a, 0xc8, 0x5a, 0xc1, 0x95, 0x64, 0x84, 0x38, 0xcc, 0x83, 0xe2, 0x08,
	0x91, 0xab, 0x07, 0xb6, 0x00, 0x3c, 0x6f, 0xa7, 0x16, 0xef, 0x1a, 0xd1, 0x7e, 0x2f, 0xd2, 0x5e,
	0x6f, 0x67, 0xac, 0x57, 0x86, 0x24, 0xd5, 0x77, 0x64, 0xda, 0xce, 0xd4, 0xe5, 0x16, 0xe5, 0x7a,
	0x5a, 0x5f, 0x12, 0x43, 0xf5, 0x25, 0xa9, 0xf0, 0x04, 0xdc, 0x3c, 0x6f, 0xab, 0xe3, 0xe1, 0xc4,
	0xb1, 0xf8, 0x6f, 0x6f, 0x95, 0x28, 0xbc, 0xcf, 0x2b, 0x4c, 0x81, 0xea, 0x05, 0x94, 0x25, 0x0b,
	0xeb, 0x40, 0x3c, 0x6f, 0xab, 0xe6, 0x94, 0xf7, 0x1a, 0x91, 0xe8, 0xdb, 0x88, 0xe9, 0x8b, 0x21,
	0xea, 0x05, 0x94, 0x92, 0xc2, 0xdf, 0xae, 0x8b, 0xd4, 0x63, 0xcb, 0xf4, 0x68, 0xf8, 0x8d, 0xf4,
	0xdd, 0x48, 0x7e, 0xbb, 0x28, 0x13, 0x87, 0xbf, 0xdd, 0x6c, 0x0d, 0x38, 0xf2, 0xb8, 0xaf, 0x74,
	0xfb, 0x05, 0xe6, 0x25, 0xd3, 0x03, 0x4c, 0x46, 0x1e, 0x94, 0x83, 0xc4, 0x91, 0x27, 0x4f, 0x0b,
	0x8e, 0x0e, 0x8e, 0x9c, 0x65, 0xfc, 0xcd, 0x64, 0x74, 0x68, 0xca, 0xd9, 0xb6, 0x67, 0xcb, 0xc3,
	0x5f, 0x06, 0x37, 0x5d, 0x73, 0x60, 0x8f, 0xa3, 0x4e, 0x3b, 0x96, 0x6b, 0x54, 0xd6, 0x88, 0xda,
	0xaf, 0x72, 0x56, 0xa7, 0x41, 0x5a, 0x6c, 0xf5, 0x32, 0xb4, 0xe0, 0xd0, 0x93, 0x26, 0xe3, 0xf4,
	0x18, 0xd9, 0x7f, 0x2b, 0x19, 0x7a, 0xd0, 0x6c, 0x01, 0x1c, 0x7a, 0x2e, 0xd0, 0x09, 0xc7, 0xe0,
	0xbe, 0xd7, 0x3f, 0xb7, 0x06, 0x79, 0xe6, 0x56, 0xd6, 0x93, 0xa3, 0xd3, 0x67, 0xc1, 0xeb, 0x05,
	0x34, 0x5b, 0x1f, 0x1e, 0x67, 0x1a, 0x10, 0x1f, 0xe7, 0xed, 0xe4, 0x38, 0xf5, 0xd9, 0x02, 0x78,
	0x9c, 0x17, 0xe8, 0xc4, 0x69, 0x7c, 0x52, 0x53, 0x3b, 0x71, 0xb3, 0xb8, 0x0f, 0xa5, 0x92, 0x4c,
	0xe3, 0x9d, 0x19, 0x68, 0x9c, 0xc6, 0x67, 0x69, 0xc3, 0xd1, 0xc2, 0x45, 0xc7, 0x49, 0xff, 0xbb,
	0x93, 0x8c, 0x16, 0x28, 0x85, 0xc1, 0xd1, 0x22, 0x2d, 0x49, 0x3e, 0x9a, 0x80, 0x9a, 0x0c, 0xd0,
	0x1b, 0xa9, 0x8f, 0x26, 0x07, 0x49, 0x3e, 0x9a, 0x1c, 0x1e, 0xdd, 0xe6, 0xa8, 0xe6, 0xc4, 0x3c,
	0xb5, 0x1d, 0xdb, 0x7f, 0xad, 0x8d, 0x5e, 0x4e, 0x6d, 0xf7, 0x75, 0xd4, 0xcb, 0xdd, 0xf4, 0x36,
	0x27, 0x1f, 0x4d, 0xb7, 0x39, 0xf9, 0x7c, 0x9c, 0x02, 0x78, 0x7e, 0x63, 0x74, 0x36, 0x8e, 0xba,
	0xba, 0x97, 0x4c, 0x01, 0x46, 0x1e, 0x14, 0xa7, 0x80, 0x5c, 0x3d, 0xf0, 0x9b, 0xe0, 0x86, 0x87,
	0xb7, 0x90, 0xca, 0x80, 0xcb, 0x2f, 0xf7, 0x89, 0xf2, 0xbb, 0xbc, 0x6f, 0x25, 0x20, 0xf5, 0x02,
	0x4a, 0xcb, 0xc1, 0x5f, 0x01, 0xb7, 0x03, 0x62, 0x72, 0x01, 0x36, 0x89, 0xca, 0x87, 0x69, 0x95,
	0xe9, 0xf9, 0xcf, 0xd3, 0x01, 0xbb, 0x60, 0x8d, 0xb0, 0x6a, 0x56, 0x3c, 0x1f, 0x3c, 0x20, 0xba,
	0x37, 0x13, 0xba, 0x13, 0xa8, 0x7a, 0x01, 0x65, 0x4a, 0xe3, 0x8c, 0xe0, 0x59, 0xad, 0xc3, 0xd8,
	0x04, 0x6c, 0x25, 0x33, 0x82, 0x9e, 0x40, 0xe0, 0x8c, 0x90, 0x94, 0xc2, 0x19, 0x81, 0xd1, 0x92,
	0xa3, 0x7f, 0x98, 0xcc, 0x08, 0x7a, 0x26, 0x0e, 0x67, 0x84, 0x6c, 0x0d, 0x38, 0x15, 0x62, 0x4e,
	0x72, 0xe8, 0x52, 0x32, 0x15, 0xea, 0x69, 0x10, 0x0e, 0xa6, 0x19, 0xb2, 0xb8, 0x3e, 0xf0, 0x5d,
	0xf3, 0xec, 0xcc, 0xee, 0xeb, 0x13, 0xc7, 0xf6, 0x93, 0x1f, 0xe2, 0x5b, 0xc9, 0xfa, 0xa0, 0x9b,
	0x0f, 0xc6, 0xf5, 0xc1, 0x0c, 0x5d, 0x87, 0x2b, 0x00, 0x98, 0x41, 0xc3, 0x93, 0x26, 0xa0, 0x1c,
	0x56, 0x5e, 0xf0, 0x6b, 0x60, 0xe1, 0x9c, 0x94, 0x72, 0xac, 0xbc, 0xba, 0x9d, 0xaa, 0xdd, 0x68,
	0xa5, 0x87, 0x18, 0x0c, 0xca, 0x60, 0x71, 0x42, 0xcb, 0x35, 0x56, 0x29, 0x55, 0x52, 0x12, 0xac,
	0x9c, 0x43, 0x01, 0x50, 0x32, 0xc0, 0x35, 0xdd, 0x72, 0x3f, 0xb6, 0xfb, 0x16, 0xb2, 0xbc, 0xa9,
	0xe3, 0xc3, 0x4d, 0x00, 0x5c, 0xf2, 0x4b, 0x1d, 0x0f, 0x68, 0x61, 0x37, 0x8f, 0x38, 0x0a, 0x7c,
	0x1b, 0x5c, 0xa3, 0x2d, 0xa6, 0x91, 0x74, 0x55, 0x46, 0x71, 0xa2, 0xb4, 0x07, 0x16, 0x34, 0x59,
	0x53, 0x9f, 0x36, 0xe0, 0x3a, 0x58, 0x98, 0x38, 0xc3, 0x51, 0x63, 0x40, 0x74, 0x95, 0x11, 0x6b,
	0x41, 0x08, 0xe6, 0xac, 0xbe, 0x3d, 0x60, 0xe2, 0xe4, 0xb7, 0xf4, 0x75, 0xb0, 0xac, 0xc9, 0xaa,
	0x39, 0x1a, 0x10, 0x37, 0x85, 0x22, 0x28, 0x4d, 0xfa, 0x36, 0x93, 0xc3, 0x3f, 0xe1, 0x06, 0x58,
	0xb2, 0x4c, 0xf7, 0xac, 0x3f, 0xaa, 0x39, 0x4c, 0x30, 0x6c, 0x4b, 0x87, 0xe0, 0xde, 0xac, 0xba,
	0x13, 0x4a, 0xb8, 0xc3, 0x17, 0x36, 0x9b, 0xcc, 0xeb, 0xd1, 0xd4, 0x60, 0x33, 0x11, 0xe1, 0x49,
	0x7f, 0x37, 0x07, 0xee, 0xce, 0xa8, 0x2a, 0x2f, 0xa3, 0x23, 0xb0, 0xba, 0x18, 0x59, 0xbd, 0x0b,
	0x40, 0x3f, 0x18, 0x94, 0x57, 0x29, 0x6d, 0x95, 0xde, 0x5d, 0x96, 0x6f, 0x72, 0x45, 0x6c, 0xc0,
	0x43, 0x1c, 0x2c, 0x36, 0xd4, 0xb9, 0xf8, 0x50, 0x23, 0x9e, 0xe1, 0x90, 0xa2, 0x2e, 0xe4, 0x19,
	0x0e, 0xdc, 0x02, 0xcb, 0xee, 0xa9, 0xd7, 0xb1, 0xdc, 0xae, 0x6f, 0xd7, 0x1c, 0x52, 0x8d, 0x95,
	0x11, 0x4f, 0x8a, 0x21, 0x0c, 0x87, 0xd4, 0x53, 0x3c, 0xc2, 0x70, 0xa0, 0x04, 0x56, 0x46, 0xd3,
	0x61, 0xf7, 0x95, 0x32, 0xf2, 0xad, 0xd1, 0xc8, 0x24, 0x75, 0x51, 0x19, 0xc5, 0x68, 0xd8, 0x4f,
	0x06, 0xd3, 0x89, 0x63, 0xbd, 0x3a, 0xc6, 0x7e, 0x52, 0x26, 0x08, 0x8e, 0x02, 0x1f, 0x01, 0x38,
	0x34, 0x5f, 0xb5, 0xa6, 0x43, 0x75, 0x3c, 0x1a, 0x59, 0x7d, 0xdf, 0x1a, 0x18, 0x96, 0x47, 0xca,
	0x90, 0x32, 0xca, 0xe0, 0xc0, 0x03, 0xb0, 0x9e, 0xa0, 0xd2, 0xad, 0xbb, 0x47, 0x4a, 0x88, 0x32,
	0xca, 0xe1, 0x46, 0x72, 0x86, 0xe5, 0x91, 0x44, 0x1f, 0x0e, 0x7d, 0x85, 0x97, 0x4b, 0x72, 0xf3,
	0xe4, 0x0c, 0x87, 0xec, 0xf2, 0x73, 0xe4, 0x0c, 0x07, 0xbe, 0x0b, 0x56, 0x07, 0xce, 0x19, 0x25,
	0x6a, 0x23, 0xf3, 0xd4, 0xa1, 0xdb, 0xf8, 0x32, 0x4a, 0x92, 0xa5, 0xdf, 0x15, 0xc0, 0xfd, 0x99,
	0x67, 0x07, 0x70, 0x0d, 0xcc, 0xf7, 0xdd, 0x91, 0x1f, 0xb8, 0x38, 0x6d, 0x84, 0x4e, 0x56, 0x9c,
	0xe1, 0x64, 0x2a, 0xb8, 0x61, 0x06, 0x6a, 0x35, 0xcf, 0x27, 0x1b, 0x70, 0x72, 0x6e, 0x11, 0x3b,
	0xe2, 0x51, 0x06, 0xc3, 0x80, 0x89, 0xd2, 0x78, 0xe9, 0x8f, 0x04, 0xb0, 0x39, 0xfb, 0xc0, 0xe1,
	0x0a, 0x16, 0xb6, 0xc0, 0x1a, 0xdf, 0x63, 0xa0, 0x9a, 0x19, 0xc9, 0x27, 0x90, 0x69, 0xbf, 0x6f,
	0x79, 0x5e, 0xdb, 0x65, 0x45, 0x0e, 0xca, 0x94, 0x93, 0xfe, 0x40, 0xc0, 0xdf, 0x77, 0xfe, 0x89,
	0xc5, 0x15, 0x4c, 0xfd, 0x06, 0x80, 0x7c, 0x97, 0x54, 0xf1, 0x25, 0x0c, 0xcd, 0x90, 0x92, 0x7e,
	0x22, 0x80, 0x8d, 0xfc, 0x23, 0x8f, 0x2b, 0x18, 0xb9, 0x05, 0x96, 0x87, 0x43, 0xcb, 0xb0, 0xf4,
	0x1d, 0x73, 0xd2, 0x18, 0x10, 0xeb, 0xca, 0x88, 0x27, 0x61, 0x84, 0x35, 0x3a, 0x0d, 0x11, 0x34,
	0x68, 0xf0, 0x24, 0x1c, 0x73, 0xed, 0xa1, 0x67, 0xb3, 0x98, 0x41, 0x7e, 0x4b, 0x7f, 0x2e, 0x80,
	0x4a, 0xde, 0x19, 0x0a, 0x0e, 0x34, 0xc4, 0xc2, 0xb6, 0x13, 0x84, 0xef, 0xb0, 0x7d, 0x29, 0xa3,
	0x03, 0xf9, 0x96, 0xf5, 0x09, 0xb3, 0x38, 0x6c, 0xc3, 0xf7, 0x71, 0x22, 0xa1, 0x7d, 0x52, 0xf7,
	0x9d, 0x23, 0x13, 0xce, 0x65, 0x39, 0xc4, 0xb3, 0x51, 0x1c, 0x2d, 0xfd, 0x8e, 0x00, 0x6e, 0xe7,
	0x1c, 0xd0, 0x5c, 0x61, 0x96, 0x9f, 0x80, 0x15, 0x97, 0x2a, 0xe4, 0x3f, 0xa9, 0x75, 0xde, 0xa6,
	0x88, 0x8b, 0x62, 0x58, 0xe9, 0x09, 0x58, 0x22, 0x0e, 0x7a, 0x7c, 0x88, 0x70, 0xd6, 0x33, 0x87,
	0xa7, 0x6e, 0xcd, 0x09, 0xb2, 0x1e, 0x6d, 0x05, 0x74, 0x23, 0x48, 0x5f, 0xac, 0x25, 0xfd, 0x8f,
	0x00, 0x44, 0x4d, 0xd6, 0x90, 0x72, 0xd8, 0x31, 0x5d, 0x73, 0xe8, 0x35, 0x7c, 0x6b, 0x08, 0xaf,
	0x83, 0xa2, 0x1d, 0xcc, 0x7b, 0xd1, 0x1e, 0xc0, 0x7d, 0x50, 0x1e, 0xd8, 0xae, 0xd5, 0xf7, 0xed,
	0xf1, 0x88, 0xc8, 0xc7, 0x66, 0x0b, 0x0b, 0xd7, 0x02, 0x36, 0x8a, 0x90, 0xf0, 0x1d, 0x30, 0xe7,
	0xbf, 0x9e, 0x04, 0x63, 0x81, 0x71, 0x09, 0x72, 0xfc, 0x4b, 0xf8, 0x38, 0x71, 0xbd, 0xec, 0xdb,
	0xcc, 0x6f, 0xf0, 0x4f, 0x4c, 0x31, 0xdd, 0x09, 0x73, 0x17, 0xfc, 0x13, 0xcf, 0xec, 0x0b, 0x32,
	0x2c, 0x9a, 0x57, 0x68, 0x83, 0x51, 0xc3, 0x5c, 0x42, 0x1b, 0x98, 0x4a, 0xa7, 0x80, 0xa6, 0x0f,
	0xda, 0x60, 0x54, 0xc3, 0x61, 0x29, 0x83, 0x36, 0xa4, 0x6f, 0x03, 0x48, 0xed, 0x09, 0xbe, 0xf7,
	0xcc, 0x09, 0x38, 0x00, 0x4b, 0x03, 0xab, 0x6f, 0x7b, 0xd1, 0xf8, 0x67, 0x7d, 0x9e, 0x21, 0x56,
	0xfa, 0x77, 0x01, 0x3c, 0xbc, 0xf0, 0xa4, 0xed, 0x0a, 0x5e, 0xf3, 0x2e, 0x58, 0x98, 0x5a, 0xca,
	0xf0, 0xd4, 0x65, 0x47, 0xc7, 0x62, 0xec, 0x88, 0xf5, 0xf8, 0x10, 0x21, 0xc6, 0x67, 0x99, 0x55,
	0x73, 0xcd, 0x53, 0xaf, 0x69, 0x7b, 0x3e, 0x9b, 0xec, 0x18, 0x0d, 0x3e, 0x01, 0xcb, 0x16, 0x6e,
	0x50, 0x4f, 0xa8, 0xcc, 0x93, 0xfd, 0x42, 0x25, 0xbe, 0x6c, 0x91, 0x97, 0x20, 0x1e, 0x2c, 0xfd,
	0xb5, 0x00, 0xa4, 0x8b, 0xcf, 0xf6, 0xae, 0x30, 0xd4, 0xe4, 0x00, 0x4a, 0x19, 0x03, 0xf8, 0x25,
	0xb0, 0x82, 0x6d, 0x0a, 0x43, 0xfe, 0x1c, 0x19, 0xc1, 0x46, 0x7c, 0x04, 0xfc, 0x42, 0xa3, 0x18,
	0x5e, 0xfa, 0x2b, 0x01, 0x6c, 0x5d, 0x74, 0x50, 0xf8, 0x25, 0x0f, 0xe1, 0x09, 0x00, 0xd8, 0x24,
	0x96, 0x0a, 0x2e, 0x1e, 0x00, 0x87, 0x96, 0x7e, 0x28, 0xe0, 0x4d, 0x64, 0xee, 0xc1, 0xe3, 0x97,
	0x6c, 0x79, 0x05, 0x2c, 0x62, 0x5b, 0x1a, 0x03, 0x6a, 0x76, 0x19, 0x05, 0x4d, 0xe9, 0x15, 0x58,
	0xcb, 0x3a, 0xb1, 0xcc, 0xb1, 0xe7, 0x6d, 0x30, 0x8f, 0xfb, 0xd4, 0x73, 0x0c, 0xa2, 0xcc, 0x00,
	0xd5, 0x65, 0x8e, 0x9f, 0x89, 0xea, 0x4a, 0xdf, 0xa5, 0x3d, 0xa7, 0x4e, 0x31, 0xaf, 0xd2, 0xf3,
	0x3b, 0xe0, 0xfa, 0xf9, 0x98, 0x69, 0x8c, 0x62, 0x75, 0x19, 0x25, 0xa8, 0xd2, 0xaf, 0x81, 0x5b,
	0x99, 0xc7, 0xa0, 0xb1, 0xdc, 0x24, 0x24, 0x72, 0xd3, 0xff, 0xe5, 0xe0, 0xff, 0x46, 0xc0, 0xb1,
	0x2d, 0x79, 0x70, 0xfa, 0xe5, 0xcf, 0x3a, 0xf6, 0x84, 0xf3, 0x71, 0x94, 0x5a, 0xcb, 0x28, 0x68,
	0xc2, 0x5d, 0x50, 0x3e, 0x1f, 0x77, 0x5d, 0xfb, 0xc5, 0x0b, 0xcb, 0x65, 0xf1, 0x85, 0xdb, 0x35,
	0xa2, 0xe7, 0x7a, 0x50, 0xf9, 0xa0, 0x08, 0x27, 0x21, 0x00, 0x34, 0x7a, 0xae, 0x99, 0x5d, 0x9b,
	0xc9, 0x60, 0x0d, 0x57, 0x2e, 0x8d, 0xd1, 0xc0, 0xfe, 0xd8, 0x1e, 0x4c, 0x4d, 0xa7, 0x7d, 0x76,
	0xe6, 0x59, 0x3e, 0x4b, 0x74, 0x99, 0x3c, 0xe9, 0x39, 0x58, 0xa1, 0x3a, 0xdb, 0xa7, 0xbf, 0x6a,
	0xf5, 0x7d, 0x9c, 0x1e, 0x07, 0xce, 0x91, 0x6b, 0xbd, 0x0c, 0xd2, 0x26, 0x6d, 0xc1, 0x2a, 0x28,
	0x0f, 0x59, 0xcf, 0x5e, 0xa5, 0x48, 0x0c, 0x86, 0x7c, 0x6d, 0x4b, 0x59, 0x28, 0x02, 0x49, 0xff,
	0x51, 0x04, 0x37, 0x71, 0xb6, 0x26, 0xa7, 0x6b, 0x38, 0x36, 0xaa, 0xe7, 0x63, 0xbb, 0x6f, 0xc1,
	0x2a, 0x58, 0x9a, 0x58, 0x2e, 0xa1, 0xb0, 0x2a, 0x8e, 0x53, 0xd4, 0x61, 0x9c, 0x7a, 0x01, 0x85,
	0x28, 0xf8, 0xf3, 0x60, 0xd1, 0xdc, 0xa1, 0x02, 0x74, 0x51, 0x6e, 0x70, 0x1b, 0xec, 0x9d, 0x00,
	0x1f, 0x60, 0x08, 0x5c, 0xa6, 0xf0, 0x52, 0x0a, 0x2e, 0x47, 0x70, 0x39, 0x82, 0xef, 0x52, 0xf8,
	0x5c, 0x0a, 0xbe, 0x1b, 0xc1, 0x77, 0x23, 0xf8, 0x1e, 0x85, 0xcf, 0xa7, 0xe0, 0x7b, 0x11, 0x7c,
	0x2f, 0x82, 0xef, 0x53, 0xf8, 0x42, 0x0a, 0xbe, 0x1f, 0xc1, 0xf7, 0x23, 0xf8, 0x01, 0x85, 0x2f,
	0xa6, 0xe0, 0x07, 0x11, 0x9c, 0xfe, 0x3c, 0x5c, 0x02, 0x0b, 0x7d, 0x32, 0xab, 0x92, 0x0b, 0xd6,
	0x35, 0xb9, 0x7b, 0xee, 0x5a, 0xde, 0xf9, 0xd8, 0x19, 0x68, 0x46, 0x17, 0x29, 0x6c, 0xbe, 0xdf,
	0x01, 0xd7, 0xfc, 0x80, 0x8e, 0x74, 0xd4, 0xa1, 0x0b, 0x5b, 0x2f, 0xa0, 0x38, 0x39, 0x89, 0x3b,
	0xa1, 0x6e, 0x93, 0xc4, 0x9d, 0x70, 0x7d, 0xfe, 0xba, 0x00, 0x6e, 0xd0, 0x4e, 0xcd, 0xa8, 0x57,
	0xb8, 0x07, 0x16, 0x27, 0xae, 0xe5, 0x59, 0x23, 0x9f, 0xdd, 0x78, 0x73, 0x51, 0x3b, 0x6e, 0x60,
	0x07, 0xa1, 0x00, 0x0a, 0x0f, 0x02, 0xad, 0x6c, 0x89, 0x37, 0xf3, 0x84, 0xe8, 0xa8, 0x50, 0x60,
	0xc3, 0xb7, 0xf1, 0x37, 0x11, 0x78, 0x0d, 0x6c, 0x01, 0xd1, 0x25, 0x0e, 0xd7, 0x18, 0xf9, 0x96,
	0xfb, 0xb1, 0xe9, 0x1c, 0x7b, 0xcc, 0x08, 0x29, 0xed, 0x63, 0x28, 0x81, 0x44, 0x29, 0x59, 0xa9,
	0x0e, 0xca, 0xa1, 0x8b, 0xc1, 0xaf, 0x83, 0x65, 0x73, 0x27, 0x34, 0x86, 0xf9, 0xee, 0x9d, 0xb8,
	0x9d, 0xdc, 0x44, 0x20, 0x1e, 0xcd, 0x34, 0xc9, 0x91, 0x26, 0xf9, 0x8d, 0x34, 0x45, 0x68, 0xe9,
	0xab, 0x44, 0x13, 0xf3, 0xc6, 0x0d, 0xb0, 0x64, 0xee, 0xb2, 0xcf, 0x9c, 0x85, 0xd0, 0xa0, 0xcd,
	0xba, 0xdc, 0x8b, 0xba, 0xdc, 0x7b, 0xa3, 0x2e, 0x23, 0xb4, 0xf4, 0x5b, 0x02, 0x51, 0xc5, 0x7c,
	0xf4, 0x7d, 0xb0, 0x62, 0xee, 0x87, 0xcc, 0x9d, 0x8b, 0x75, 0xc5, 0xe0, 0x09, 0x71, 0x99, 0xad,
	0xf7, 0x25, 0xc5, 0x65, 0x36, 0xfc, 0x83, 0x68, 0xf8, 0x07, 0x89, 0xe1, 0xb3, 0xb6, 0xf4, 0x4f,
	0x02, 0xb8, 0x16, 0x8b, 0x3f, 0x70, 0x27, 0xe9, 0x99, 0xb1, 0x4a, 0x27, 0xc4, 0xf1, 0x6e, 0xb9,
	0x9b, 0x70, 0xcb, 0xbb, 0x99, 0x12, 0x71, 0x9f, 0x84, 0x9b, 0x00, 0x9c, 0xbf, 0xf6, 0x7c, 0xcb,
	0xb5, 0x3c, 0xdb, 0x63, 0x49, 0x91, 0xa3, 0xe0, 0xba, 0xcb, 0xb7, 0x87, 0x96, 0x3f, 0xf6, 0x59,
	0x02, 0x48, 0xd5, 0x5d, 0x5d, 0x7b, 0x68, 0x75, 0x83, 0xb8, 0x8f, 0xe2, 0x68, 0xe9, 0x1f, 0x04,
	0x70, 0x3d, 0xe8, 0x9e, 0x1e, 0x92, 0xc1, 0x5f, 0xc0, 0x45, 0x53, 0x68, 0x8e, 0xc7, 0x96, 0xe4,
	0x56, 0xa6, 0xb1, 0x28, 0x06, 0x85, 0x2a, 0x58, 0x65, 0x8a, 0x4f, 0xa6, 0xe6, 0xc8, 0xb7, 0xfd,
	0xd7, 0x6c, 0x63, 0xcf, 0xaf, 0x48, 0x1c, 0x80, 0x92, 0x12, 0xb4, 0x92, 0xc4, 0x4a, 0x4f, 0xa6,
	0xa6, 0x83, 0x55, 0x94, 0xb2, 0xe7, 0x97, 0xb1, 0x51, 0x1c, 0x2d, 0xfd, 0x7f, 0xb0, 0xac, 0xc9,
	0xca, 0x80, 0x5c, 0xff, 0x34, 0x06, 0xf0, 0x1e, 0x28, 0x9b, 0x41, 0xa3, 0x22, 0x90, 0x2d, 0x54,
	0x44, 0xa0, 0xe0, 0x9a, 0xe5, 0x44, 0xe0, 0x41, 0xd0, 0x08, 0xc0, 0x21, 0x41, 0xfa, 0x63, 0x01,
	0x6f, 0x7c, 0x68, 0x43, 0x21, 0xc5, 0x18, 0x8b, 0x8a, 0xbb, 0xf1, 0x3e, 0x84, 0xf8, 0x81, 0x60,
	0x68, 0x4b, 0xbd, 0xc0, 0x75, 0x8d, 0x85, 0xa2, 0xbe, 0x8a, 0x49, 0xa1, 0xd0, 0x26, 0x2c, 0x14,
	0xe2, 0xe0, 0x16, 0x00, 0xe7, 0x63, 0x7f, 0xec, 0x9b, 0xee, 0x0b, 0x8b, 0x6d, 0x18, 0xeb, 0x05,
	0xc4, 0xd1, 0xb8, 0x88, 0xfa, 0x5d, 0xbc, 0xb2, 0xbc, 0xb5, 0xe4, 0x44, 0x39, 0xe6, 0xb3, 0x95,
	0x78, 0xd6, 0x0d, 0x80, 0xbc, 0xd3, 0xee, 0x25, 0x9c, 0xf6, 0x5e, 0xb6, 0x48, 0x22, 0x92, 0xfe,
	0x86, 0x80, 0xab, 0x67, 0x02, 0xa8, 0xe1, 0x7d, 0xee, 0x30, 0xdc, 0x14, 0x84, 0x27, 0xc7, 0x31,
	0x1a, 0xde, 0xff, 0xb9, 0x9c, 0x13, 0x36, 0x82, 0x93, 0xe4, 0x04, 0x15, 0x3e, 0x02, 0x0b, 0x26,
	0xad, 0x98, 0x69, 0x3a, 0x5e, 0xcf, 0x36, 0x07, 0x31, 0x94, 0xf4, 0x5f, 0xe4, 0x3c, 0x24, 0xfb,
	0x5e, 0xfa, 0x52, 0xe7, 0xbf, 0xe1, 0xc6, 0xae, 0x48, 0xdc, 0x81, 0x6d, 0xec, 0x0e, 0xc0, 0x72,
	0x64, 0x7e, 0x70, 0x08, 0xbc, 0x16, 0xb7, 0x85, 0x32, 0x11, 0x0f, 0x84, 0xbf, 0x18, 0xf8, 0x36,
	0x35, 0x25, 0xa8, 0x45, 0xd6, 0x93, 0xbe, 0xcd, 0xce, 0xab, 0xe3, 0x60, 0xb8, 0x0d, 0x16, 0x87,
	0x64, 0x90, 0x41, 0x19, 0x29, 0x26, 0x46, 0x5f, 0x43, 0x01, 0x40, 0x7a, 0x42, 0x72, 0x99, 0xda,
	0x50, 0xd0, 0x91, 0xda, 0x7a, 0xc3, 0xb3, 0xf7, 0xef, 0xd3, 0x68, 0x17, 0x6d, 0x1c, 0xe1, 0x23,
	0xb0, 0x34, 0xe9, 0xdb, 0x0a, 0xe6, 0x67, 0xec, 0xb3, 0x58, 0x2f, 0x28, 0xc4, 0x5c, 0xaa, 0xfc,
	0x81, 0x60, 0xce, 0xf5, 0xdc, 0x09, 0x8b, 0x69, 0xe4, 0x37, 0xa3, 0xbd, 0x64, 0x3b, 0x5c, 0xf2,
	0x1b, 0x17, 0x60, 0x1b, 0xf9, 0x97, 0xff, 0xfc, 0xce, 0xbb, 0xf4, 0x66, 0xf5, 0xd7, 0xfb, 0xe0,
	0x3a, 0xde, 0xc6, 0x46, 0x4a, 0xd9, 0x3a, 0xe6, 0x6c, 0x9e, 0x13, 0x60, 0xe9, 0xef, 0x4b, 0xb8,
	0x12, 0x68, 0xca, 0xf1, 0xd4, 0x0f, 0x0d, 0x70, 0xcb, 0xcf, 0xb8, 0xf3, 0x0f, 0x9e, 0xec, 0xa5,
	0x1e, 0x1c, 0xc4, 0xc5, 0x3d, 0x94, 0x2d, 0x0d, 0x3f, 0x04, 0xb7, 0xfd, 0xec, 0x1b, 0x7e, 0x16,
	0x62, 0x2f, 0x54, 0x9c, 0x27, 0x4f, 0x2c, 0xce, 0xb8, 0xc7, 0x0f, 0x8e, 0x98, 0x2e, 0x61, 0x71,
	0x96, 0x34, 0xb1, 0x38, 0xfb, 0xae, 0x9e, 0xe5, 0xa8, 0x4b, 0x58, 0x9c, 0x2d, 0x0f, 0x75, 0xb0,
	0xe6, 0x77, 0x06, 0xfd, 0x49, 0xd2, 0xe0, 0xf9, 0xcb, 0xe9, 0xcd, 0x14, 0x96, 0x7e, 0x44, 0x8e,
	0x20, 0x33, 0x5f, 0x81, 0x5c, 0x21, 0x52, 0xd4, 0xc0, 0x6a, 0x7c, 0x27, 0xe8, 0xb1, 0xc8, 0xb5,
	0xc1, 0x5b, 0x19, 0xb7, 0x10, 0x25, 0x45, 0xa4, 0x9f, 0x0a, 0xb8, 0xee, 0x25, 0xeb, 0x87, 0xac,
	0x49, 0xc7, 0x72, 0x75, 0xcb, 0xfd, 0x98, 0x4c, 0xc5, 0x65, 0x2c, 0xab, 0x80, 0xc5, 0xfe, 0x4b,
	0xbb, 0x6e, 0x7b, 0x3e, 0xb3, 0x2d, 0x68, 0xe2, 0x0a, 0xcd, 0xa5, 0x8c, 0x12, 0x61, 0xb0, 0x16,
	0x7c, 0x1b, 0x5c, 0x9b, 0x4c, 0xbd, 0xfe, 0xb9, 0x6e, 0x8f, 0xdc, 0x3a, 0x3d, 0xd9, 0xc2, 0xec,
	0x38, 0x91, 0xa2, 0xfa, 0x1c, 0x6a, 0x3e, 0x40, 0x71, 0x44, 0xe9, 0x27, 0x02, 0x78, 0x70, 0xc1,
	0x33, 0x98, 0x37, 0x9d, 0x5f, 0xae, 0xc4, 0x3e, 0x01, 0x6b, 0x2e, 0x9b, 0x96, 0xb1, 0xeb, 0x07,
	0xd3, 0x12, 0x84, 0xe4, 0xfb, 0x89, 0xe7, 0x31, 0xf1, 0xc9, 0x43, 0x99, 0xa2, 0xd2, 0xef, 0x93,
	0xf3, 0xc5, 0x0b, 0x9e, 0xd3, 0x5c, 0xca, 0xe4, 0x6d, 0x20, 0x92, 0x19, 0x6b, 0x8c, 0xfc, 0xb3,
	0xce, 0x27, 0x2e, 0xb7, 0x02, 0x29, 0x3a, 0x7c, 0x04, 0x20, 0x99, 0x37, 0x42, 0x1b, 0x7f, 0x62,
	0xb9, 0xdc, 0xb2, 0x64, 0x70, 0xa4, 0x26, 0x09, 0xf0, 0xe8, 0xd0, 0x20, 0xb7, 0xcb, 0x9b, 0x00,
	0x4c, 0xdc, 0x53, 0xf2, 0x9b, 0x9c, 0x52, 0x63, 0x29, 0x8e, 0xc2, 0xf3, 0xc9, 0x69, 0x75, 0x8c,
	0x6f, 0x38, 0xd2, 0x4f, 0x8b, 0xe0, 0x4e, 0xfc, 0x69, 0xcd, 0x17, 0x70, 0xb2, 0x97, 0x7d, 0xfb,
	0x99, 0xc9, 0x4a, 0xfa, 0x32, 0x0a, 0x9a, 0x24, 0x79, 0xb0, 0x9e, 0x98, 0xef, 0xf3, 0xc9, 0x83,
	0x8d, 0x00, 0x85, 0x18, 0x72, 0xa6, 0xdc, 0xf7, 0xc8, 0x45, 0x29, 0xf9, 0x90, 0x48, 0x03, 0xef,
	0x10, 0x46, 0xd3, 0x21, 0xb1, 0xb0, 0xeb, 0xdb, 0x98, 0x4d, 0xbd, 0x2d, 0x41, 0x65, 0xd2, 0x86,
	0x53, 0x59, 0x08, 0xa5, 0x8d, 0x94, 0x34, 0x39, 0xdc, 0x4e, 0x49, 0x1b, 0x0e, 0x1e, 0x85, 0x6b,
	0x8e, 0x3e, 0xaa, 0x39, 0x3b, 0x95, 0x25, 0x3a, 0x0a, 0xd6, 0x8c, 0x38, 0x72, 0xa5, 0xcc, 0x73,
	0x64, 0xe9, 0x4f, 0x89, 0x83, 0xcf, 0x7c, 0x09, 0x75, 0x05, 0x07, 0x37, 0xc0, 0x1a, 0x79, 0xce,
	0x94, 0xed, 0xe0, 0x0f, 0xb3, 0xdf, 0x45, 0xc5, 0x9c, 0x3c, 0x4b, 0x5c, 0xfa, 0x47, 0xe2, 0xe4,
	0x17, 0xbc, 0xa5, 0xba, 0xe2, 0xc2, 0x3f, 0x06, 0xd7, 0x82, 0x45, 0xed, 0xe0, 0xe4, 0x39, 0x63,
	0xf5, 0xe3, 0x40, 0x5e, 0x92, 0x5c, 0xa0, 0xb3, 0xd3, 0x94, 0x99, 0x92, 0x04, 0x28, 0xfd, 0xa0,
	0x04, 0x36, 0x67, 0xbf, 0xd7, 0xba, 0xc2, 0x5a, 0x70, 0x43, 0x2d, 0xc5, 0x87, 0x8a, 0x2b, 0x07,
	0xd3, 0x37, 0x9f, 0x8d, 0x9d, 0xd0, 0x6f, 0x23, 0x02, 0xc7, 0x35, 0x02, 0xb7, 0x8d, 0x08, 0xe4,
	0xdb, 0xfc, 0xc8, 0xaf, 0x59, 0x8e, 0xf9, 0xba, 0x16, 0xb8, 0x2d, 0x47, 0x21, 0x51, 0xe4, 0x23,
	0xbf, 0x66, 0x7b, 0x7d, 0xd3, 0x1d, 0x20, 0xd3, 0xc7, 0x5f, 0xf8, 0x22, 0x8b, 0x22, 0x09, 0x3a,
	0x09, 0xc9, 0x1f, 0xf9, 0xcd, 0xb1, 0xe7, 0x31, 0xe0, 0x12, 0x0b, 0xc9, 0x3c, 0x31, 0x81, 0x22,
	0xb7, 0x37, 0x49, 0x14, 0x7d, 0x37, 0xe0, 0x9f, 0xbb, 0xe3, 0xe9, 0x8b, 0xf3, 0xc9, 0xd4, 0xaf,
	0x39, 0x15, 0x40, 0x40, 0x31, 0x5a, 0x1c, 0x63, 0x38, 0x95, 0xe5, 0x24, 0xc6, 0x70, 0xa4, 0x1f,
	0x96, 0x70, 0xdd, 0x94, 0x7e, 0xde, 0x76, 0x85, 0xac, 0xca, 0xef, 0x47, 0x4b, 0x97, 0xd8, 0x8f,
	0x3e, 0x04, 0xc5, 0x89, 0x42, 0xd6, 0xe5, 0x3a, 0x7f, 0x0a, 0xf6, 0xbc, 0xa1, 0x36, 0xd4, 0x8e,
	0x82, 0x8a, 0x13, 0x05, 0xaf, 0x82, 0xe7, 0x9b, 0xae, 0xdf, 0x71, 0x4f, 0xc3, 0xd8, 0xc2, 0x51,
	0xc8, 0x86, 0x79, 0x34, 0xa0, 0x5c, 0xba, 0x46, 0x61, 0x1b, 0xfe, 0x1c, 0xb8, 0xe1, 0x4d, 0x4f,
	0x8f, 0x5c, 0x73, 0x68, 0x1d, 0xda, 0xfe, 0xd0, 0xf4, 0x3e, 0x0a, 0x97, 0x28, 0xcd, 0xc0, 0xde,
	0x30, 0xa9, 0x1a, 0x56, 0x07, 0x67, 0x00, 0xb6, 0x3e, 0x11, 0x81, 0xb7, 0x23, 0x5c, 0x18, 0x8e,
	0x12, 0xd9, 0x61, 0x04, 0x2b, 0x12, 0xb6, 0x33, 0xec, 0x08, 0x97, 0x24, 0xcd, 0x90, 0x7e, 0x9b,
	0x6e, 0xac, 0xf3, 0x1e, 0x01, 0x7e, 0xf1, 0xd5, 0x91, 0xc1, 0x82, 0x17, 0xdc, 0xba, 0x97, 0x2e,
	0xb8, 0xd6, 0x63, 0x48, 0xe9, 0x2f, 0x04, 0xb0, 0xa8, 0xc9, 0xaa, 0xa2, 0x9a, 0xa4, 0x0a, 0x38,
	0x35, 0x47, 0x41, 0xa1, 0x48, 0x7e, 0xc3, 0x3d, 0x50, 0xee, 0x9b, 0x7d, 0xc7, 0xf4, 0xbc, 0x41,
	0xb0, 0xe3, 0xe5, 0xaa, 0x26, 0x22, 0xa7, 0x62, 0x6e, 0xcd, 0x41, 0x11, 0x90, 0x93, 0x9a, 0x3a,
	0xe9, 0xdb, 0xdf, 0x48, 0xca, 0x88, 0xa4, 0xa6, 0x64, 0x1a, 0xfb, 0xee, 0xd8, 0xf3, 0x54, 0xd3,
	0x75, 0x6d, 0xcb, 0x25, 0x41, 0x92, 0x95, 0x24, 0x69, 0x86, 0xa4, 0x61, 0xc3, 0x6b, 0x2a, 0x36,
	0xfc, 0x09, 0x58, 0x19, 0xb8, 0xa7, 0xdd, 0xd7, 0x13, 0x8b, 0xbc, 0x0e, 0x63, 0x5b, 0x7e, 0xae,
	0x47, 0x02, 0xab, 0x51, 0x08, 0x8a, 0x61, 0xa5, 0x6f, 0xd1, 0xd7, 0x1b, 0x33, 0xde, 0x49, 0x7e,
	0xe1, 0x9b, 0x26, 0xe9, 0x0f, 0xc9, 0x1d, 0x56, 0xee, 0xcb, 0xc9, 0x2b, 0xdc, 0x61, 0x7d, 0x05,
	0xcc, 0xf7, 0x4d, 0xd5, 0x9c, 0xb0, 0xaf, 0x70, 0x35, 0x31, 0xb9, 0x88, 0x72, 0x31, 0x6c, 0xd0,
	0xc7, 0xb0, 0xb9, 0x24, 0x8c, 0xcc, 0x08, 0xa2, 0x5c, 0xe9, 0x53, 0x01, 0x2c, 0x6b, 0x72, 0xc7,
	0x1d, 0x4f, 0xe8, 0x93, 0xb1, 0x37, 0x2d, 0x3b, 0x1f, 0x83, 0xdb, 0xa9, 0xf5, 0x61, 0xaf, 0x7a,
	0x68, 0x1c, 0xcf, 0x63, 0xc3, 0xf7, 0xc0, 0x72, 0xdf, 0x0c, 0xef, 0xdb, 0xd3, 0x6f, 0x6f, 0x54,
	0x25, 0xba, 0x8c, 0xe7, 0x91, 0xe4, 0xe1, 0x94, 0x65, 0xf6, 0xfd, 0xae, 0x3d, 0x64, 0x87, 0x6f,
	0x65, 0xc4, 0x51, 0xa4, 0xef, 0x09, 0xe0, 0x66, 0xc6, 0xbb, 0xd2, 0x2b, 0x4c, 0xf9, 0x2e, 0x00,
	0xe4, 0x7d, 0xa7, 0x87, 0xe7, 0x29, 0xfd, 0xfe, 0x2c, 0x9c, 0x3d, 0xc4, 0xc1, 0xa4, 0xbf, 0x14,
	0xe8, 0xfe, 0x2e, 0xfb, 0xc1, 0xe9, 0x17, 0x37, 0xa6, 0x0a, 0xca, 0xb4, 0x97, 0xc6, 0x68, 0xc0,
	0x6c, 0xc9, 0x5a, 0xa2, 0x08, 0xc4, 0x05, 0x87, 0xb9, 0x4b, 0x07, 0x87, 0xef, 0x09, 0x60, 0x3d,
	0xfb, 0xb5, 0xeb, 0xcf, 0xd2, 0x74, 0xe9, 0x63, 0x5c, 0xf0, 0x27, 0x5f, 0xc8, 0xe6, 0x5f, 0xfd,
	0x0d, 0xb5, 0x7c, 0x13, 0x28, 0x13, 0xa3, 0x3c, 0x82, 0xca, 0xb9, 0xfa, 0x23, 0x4c, 0xe9, 0x37,
	0xc9, 0x21, 0x56, 0xf6, 0x53, 0xda, 0x2b, 0x4c, 0x00, 0x1f, 0xa6, 0x85, 0x4b, 0xae, 0xc4, 0x6b,
	0x5c, 0x87, 0x66, 0xbc, 0xbd, 0xfd, 0x19, 0xcc, 0xc2, 0x8f, 0xc9, 0x2c, 0xf0, 0x8f, 0x73, 0x3b,
	0x96, 0xdb, 0xb7, 0x46, 0x3e, 0xae, 0x19, 0x2e, 0x93, 0xac, 0xaa, 0xe0, 0x26, 0x7b, 0xbb, 0x1b,
	0x09, 0x86, 0xa7, 0x5f, 0x59, 0xac, 0x4c, 0x09, 0xc3, 0x61, 0x27, 0x56, 0x59, 0x2c, 0xe9, 0xcf,
	0xc8, 0x2b, 0xc1, 0x19, 0x2f, 0x88, 0xaf, 0xb0, 0x5e, 0xcf, 0xc1, 0xba, 0x9f, 0x39, 0x7a, 0xe6,
	0xbd, 0x5b, 0xd9, 0x4f, 0x98, 0x23, 0x1c, 0xca, 0x91, 0xdf, 0xfe, 0xcf, 0x05, 0x70, 0x2d, 0xf6,
	0x27, 0xa4, 0xf0, 0x16, 0xb8, 0xa1, 0xc9, 0x3d, 0xa3, 0xf5, 0xcd, 0x56, 0xfb, 0x83, 0xd6, 0xb1,
	0xa6, 0xeb, 0xca, 0x53, 0x4d, 0x2c, 0xc0, 0x0a, 0xde, 0xc9, 0xf5, 0x54, 0xad, 0xd9, 0x54, 0xdb,
	0xad, 0xa3, 0xc6, 0x53, 0xa4, 0x9d, 0x18, 0x9a, 0xde, 0x15, 0x05, 0x78, 0x1b, 0x87, 0xb9, 0x18,
	0xa7, 0xd3, 0x46, 0x5d, 0xb1, 0x08, 0xef, 0x60, 0x8f, 0xe9, 0x19, 0x9a, 0x52, 0x3b, 0x6e, 0xe8,
	0x7a, 0xa3, 0xdd, 0x0a, 0x64, 0x4a, 0x70, 0x03, 0x7f, 0xd5, 0x71, 0x96, 0xde, 0x69, 0xb7, 0x74,
	0x4d, 0x9c, 0x63, 0x3d, 0x71, 0x3c, 0xbd, 0xab, 0x74, 0x0d, 0x5d, 0x9c, 0x87, 0xeb, 0xf8, 0x2b,
	0xec, 0x19, 0x9a, 0xda, 0x6e, 0x75, 0xb5, 0xe7, 0x5d, 0xa3, 0x53, 0x53, 0xba, 0x9a, 0xb8, 0x00,
	0xd7, 0x80, 0x48, 0xe8, 0x48, 0xa3, 0x16, 0x34, 0x5a, 0x35, 0x71, 0x11, 0xde, 0x04, 0xab, 0x8c,
	0xda, 0xd4, 0x14, 0x5d, 0xc3, 0xc4, 0x25, 0x78, 0x1f, 0x07, 0xc3, 0xde, 0xa1, 0xa6, 0x20, 0x0d,
	0xa5, 0xec, 0x2a, 0xc3, 0x4d, 0xbc, 0x2f, 0x4a, 0xb3, 0x99, 0x6d, 0x00, 0xde, 0xc3, 0x8e, 0x98,
	0xe4, 0x33, 0xfb, 0x96, 0xd9, 0x4c, 0x50, 0x2e, 0xd7, 0xeb, 0x0a, 0x14, 0xc1, 0x8a, 0x26, 0xf7,
	0xea, 0xed, 0xa0, 0xa3, 0x6b, 0x21, 0xe5, 0x48, 0x69, 0x34, 0x0d, 0xa4, 0x89, 0xd7, 0xe1, 0x0d,
	0xbc, 0x10, 0xbd, 0x7a, 0x5b, 0x6d, 0x1f, 0x77, 0x9a, 0x5a, 0x57, 0x13, 0x57, 0xd9, 0x78, 0xd1,
	0x73, 0xbd, 0xf1, 0xf4, 0x58, 0x53, 0x74, 0x36, 0xb1, 0x22, 0x1b, 0x59, 0x53, 0xc6, 0x44, 0x3a,
	0x62, 0xf1, 0x06, 0xbc, 0x0b, 0x6e, 0x63, 0xb0, 0x52, 0x6b, 0xb4, 0x23, 0x70, 0x47, 0x43, 0x86,
	0x26, 0x42, 0x36, 0xec, 0x34, 0x13, 0xaf, 0x9a, 0x78, 0x93, 0xc9, 0xea, 0x6a, 0x5d, 0xab, 0x25,
	0x65, 0xd7, 0x98, 0x6c, 0x9a, 0x49, 0x64, 0x6f, 0xb1, 0xa5, 0x24, 0x65, 0x57, 0x42, 0x74, 0x9d,
	0x4d, 0x88, 0xa1, 0xa9, 0x4a, 0x47, 0x39, 0x6c, 0x34, 0x1b, 0xdd, 0x0f, 0x1b, 0xad, 0xa3, 0xb6,
	0x78, 0x3b, 0x5c, 0xff, 0x88, 0xa1, 0xb5, 0x4e, 0x8c, 0x06, 0xfa, 0x50, 0xac, 0xc0, 0x55, 0xbc,
	0x13, 0xe8, 0xe9, 0x58, 0xbd, 0x52, 0xab, 0x89, 0x77, 0x98, 0x47, 0x06, 0x04, 0x36, 0xdb, 0x1b,
	0x10, 0x82, 0xeb, 0x01, 0xb9, 0xa6, 0x91, 0x19, 0xbb, 0xcb, 0xa6, 0x15, 0x6f, 0x6c, 0xe9, 0xb4,
	0xdc, 0x0b, 0xe6, 0x30, 0xa0, 0x30, 0xe9, 0xfb, 0xf0, 0x3a, 0x00, 0x58, 0x5a, 0x6b, 0x1d, 0xe2,
	0x4e, 0x36, 0x99, 0x0f, 0xb1, 0x36, 0x43, 0x3d, 0x60, 0x8b, 0x82, 0xa9, 0xac, 0x8b, 0x2d, 0xe6,
	0xd5, 0x5d, 0xa4, 0x1c, 0x1d, 0x35, 0x54, 0xbd, 0xd3, 0x6c, 0x74, 0x59, 0x5f, 0x0f, 0x99, 0xce,
	0x7a, 0x5b, 0x55, 0x0c, 0x5d, 0x13, 0x25, 0xa6, 0x13, 0x21, 0x95, 0x5b, 0xa8, 0xb7, 0xb6, 0xc7,
	0x58, 0x27, 0xf7, 0xa2, 0x97, 0x19, 0xad, 0x1d, 0x6b, 0xe8, 0xa9, 0xd6, 0x52, 0x3f, 0x14, 0x0b,
	0x4c, 0xb0, 0xde, 0x78, 0x5a, 0xaf, 0x77, 0x7a, 0x8a, 0xaa, 0x6a, 0xba, 0x2e, 0x0a, 0x0c, 0x77,
	0xdc, 0x0d, 0x28, 0x45, 0x86, 0x3b, 0x6e, 0xf7, 0xf4, 0xc6, 0xd3, 0x96, 0xd2, 0x6c, 0x36, 0x5a,
	0x4f, 0xc5, 0x12, 0x33, 0xe3, 0xb8, 0xdd, 0xab, 0x29, 0x5d, 0x45, 0x9c, 0xdb, 0xde, 0x23, 0xc9,
	0x2b, 0x11, 0xd7, 0x83, 0x09, 0x30, 0xa8, 0xae, 0x02, 0x6b, 0x07, 0xfe, 0x28, 0x6c, 0x7f, 0x80,
	0x9d, 0x2c, 0xf6, 0x72, 0x93, 0xf9, 0x5d, 0xf0, 0x95, 0xf5, 0x50, 0xf3, 0x48, 0x2c, 0xb0, 0x35,
	0x0e, 0x89, 0xf5, 0x36, 0xd1, 0x21, 0x0a, 0xc1, 0xcc, 0x07, 0x8c, 0x76, 0xb7, 0xae, 0x21, 0x5d,
	0x2c, 0x6e, 0x3f, 0xa3, 0xf7, 0x8e, 0xd1, 0x83, 0x4b, 0x36, 0xa5, 0xec, 0x8b, 0xe9, 0x35, 0x5a,
	0x8a, 0xda, 0x6d, 0x3c, 0x6b, 0x74, 0xf1, 0x4c, 0xd0, 0x45, 0x0e, 0x58, 0xb8, 0x47, 0x81, 0xf9,
	0x43, 0x40, 0x0b, 0xf5, 0xee, 0x61, 0xeb, 0x62, 0x8f, 0x27, 0x61, 0x19, 0xcc, 0x6b, 0x72, 0xaf,
	0xd6, 0x14, 0x0b, 0xec, 0xa7, 0x81, 0x0d, 0x5b, 0xc6, 0xdb, 0xf6, 0xde, 0x61, 0xbb, 0x5b, 0x17,
	0x8b, 0xdb, 0x8f, 0xf1, 0xb0, 0x83, 0x07, 0x94, 0x6c, 0x84, 0xb8, 0xd9, 0xab, 0x69, 0x47, 0x8a,
	0xd1, 0xec, 0x8a, 0x05, 0xd6, 0x1f, 0x23, 0xd6, 0x1a, 0xaa, 0xd2, 0xd5, 0x6a, 0xa2, 0xb0, 0xfd,
	0xfd, 0x22, 0x9d, 0x21, 0xee, 0xc6, 0x37, 0xf8, 0xce, 0xe8, 0x47, 0xa0, 0x20, 0xe5, 0xb8, 0xd7,
	0x41, 0xbd, 0x56, 0xbb, 0x5b, 0xc7, 0x2b, 0x53, 0x80, 0x0f, 0xf0, 0x66, 0x3c, 0xc9, 0xee, 0x68,
	0xa8, 0x47, 0x1a, 0xa2, 0x90, 0x2d, 0xaf, 0xec, 0x50, 0x76, 0x31, 0x87, 0x2d, 0x53, 0x76, 0x29,
	0x87, 0xbd, 0x4b, 0xd9, 0x73, 0x39, 0xec, 0x3d, 0xca, 0x9e, 0xcf, 0x61, 0xef, 0x53, 0xf6, 0x42,
	0x0e, 0xfb, 0x80, 0xb2, 0x17, 0xb7, 0xff, 0xb9, 0x88, 0x43, 0x67, 0xde, 0xa3, 0x08, 0xe6, 0x0c,
	0x1d, 0x0d, 0x51, 0xd1, 0x63, 0xbd, 0xb7, 0x23, 0x57, 0xc5, 0x42, 0x06, 0x5d, 0xde, 0xab, 0x86,
	0xce, 0xc3, 0xd3, 0xf7, 0x1e, 0x57, 0xc5, 0x62, 0x06, 0xfd, 0x60, 0xaf, 0x2a, 0x96, 0x98, 0x17,
	0xc6, 0xf4, 0x57, 0xe5, 0x3d, 0x71, 0x2e, 0x83, 0x21, 0x57, 0xf7, 0x1e, 0x8b, 0xf3, 0x19, 0x8c,
	0x7d, 0x6c, 0xd2, 0x02, 0xcb, 0x3f, 0x49, 0x55, 0x55, 0x71, 0x91, 0x39, 0x42, 0xc4, 0x69, 0xb4,
	0x7a, 0x3b, 0xe2, 0x52, 0x16, 0xf9, 0x40, 0x2c, 0xa7, 0x4c, 0xc5, 0x68, 0x59, 0x04, 0x59, 0xf4,
	0xdd, 0xaa, 0xb8, 0x9c, 0x45, 0x3f, 0xa8, 0x8a, 0x2b, 0xdb, 0x3e, 0xa6, 0x27, 0x9f, 0xbc, 0xc0,
	0x2d, 0x70, 0x0f, 0x87, 0xa1, 0x3a, 0xd2, 0xf4, 0x7a, 0xbb, 0x59, 0x23, 0xe4, 0xb8, 0xb3, 0xd1,
	0x05, 0x4b, 0x23, 0x90, 0x8e, 0x3a, 0xa1, 0xab, 0x65, 0xb2, 0x4f, 0xc4, 0xe2, 0xf6, 0x9f, 0x10,
	0xef, 0x8e, 0xbd, 0x20, 0x60, 0x21, 0xa2, 0xdb, 0xed, 0xf6, 0x8e, 0x75, 0xbc, 0x78, 0x34, 0x52,
	0xd3, 0x36, 0x59, 0x35, 0x9e, 0x70, 0xb0, 0x27, 0x16, 0x63, 0x84, 0xc7, 0x78, 0x9d, 0x68, 0x0c,
	0xa3, 0x84, 0x9d, 0x6a, 0x55, 0x9c, 0x8b, 0x53, 0x64, 0xbc, 0x32, 0x31, 0xca, 0x01, 0x5e, 0x12,
	0x9e, 0x22, 0xef, 0x1f, 0x88, 0x8b, 0x31, 0xca, 0xae, 0x5c, 0x15, 0x97, 0x62, 0x14, 0xec, 0x2b,
	0xe5, 0x18, 0x65, 0x9f, 0x4c, 0x3d, 0x4f, 0xc1, 0x7e, 0xb3, 0xcc, 0x02, 0x7c, 0x60, 0x8f, 0xbc,
	0x27, 0xae, 0xc4, 0x49, 0xf2, 0xe3, 0xaa, 0x78, 0x2d, 0x46, 0x92, 0xf7, 0x0f, 0xaa, 0x61, 0xba,
	0x0e, 0x95, 0x57, 0xc5, 0xd5, 0xed, 0x5d, 0xf2, 0x8e, 0x29, 0xf1, 0xa6, 0x81, 0xcd, 0xd9, 0x09,
	0x9d, 0xf6, 0x42, 0xac, 0x7d, 0x22, 0x0a, 0xdb, 0x3b, 0x51, 0x10, 0x61, 0xef, 0x18, 0x18, 0x04,
	0x9d, 0xf4, 0x74, 0xe5, 0x58, 0x0b, 0x45, 0xd0, 0x09, 0x0d, 0x59, 0xc2, 0xf6, 0x8f, 0x04, 0xfa,
	0x7f, 0x3d, 0xf8, 0x6b, 0x7b, 0xb6, 0x73, 0xc1, 0x89, 0xa6, 0x51, 0xc3, 0xf1, 0xb3, 0xdd, 0x8a,
	0x7b, 0x03, 0xf5, 0x97, 0x24, 0x5f, 0xa9, 0xd5, 0x28, 0x49, 0x14, 0x72, 0x10, 0x35, 0xad, 0xc9,
	0x10, 0x45, 0xf8, 0x10, 0xef, 0x70, 0x53, 0x88, 0x7a, 0xbb, 0xdb, 0xee, 0x2a, 0xe8, 0xa9, 0xd6,
	0x15, 0x4b, 0xdb, 0x3f, 0x2e, 0x45, 0x57, 0x69, 0x89, 0xcb, 0x37, 0xf8, 0x15, 0xf0, 0x30, 0xdc,
	0xb6, 0xd0, 0x38, 0xd2, 0x68, 0x75, 0x35, 0xf4, 0x4c, 0x69, 0xf6, 0x5a, 0x6d, 0x16, 0x59, 0xc4,
	0x02, 0xeb, 0x25, 0x13, 0x46, 0xbe, 0x45, 0x51, 0xb8, 0x00, 0xb2, 0x8f, 0x03, 0x85, 0x04, 0x36,
	0x67, 0x6a, 0xc1, 0xce, 0x38, 0x1b, 0x23, 0x13, 0xf7, 0x9c, 0x8d, 0xd9, 0xaf, 0x56, 0xc5, 0x79,
	0xf8, 0x16, 0x78, 0x30, 0xb3, 0x2f, 0x79, 0x4f, 0x5c, 0x60, 0xd3, 0x9b, 0x09, 0x22, 0xa3, 0x5a,
	0x9c, 0x39, 0x2a, 0x16, 0x6a, 0x2e, 0x80, 0xc8, 0x62, 0xf9, 0x22, 0xc8, 0xbe, 0x08, 0xb6, 0xff,
	0x95, 0x3c, 0xc4, 0x62, 0x47, 0xa0, 0x2c, 0xfb, 0x92, 0x56, 0xaf, 0xa3, 0xf4, 0x6a, 0x87, 0x18,
	0x67, 0xe8, 0x07, 0x62, 0x81, 0x39, 0x55, 0x92, 0xf5, 0x7c, 0xaf, 0xd6, 0xee, 0xbe, 0xf7, 0x9e,
	0x28, 0xe4, 0x89, 0xee, 0x8a, 0xc5, 0x1c, 0x51, 0x7d, 0x87, 0x8a, 0x96, 0xd8, 0xd6, 0x85, 0xe7,
	0xe3, 0xd9, 0x4e, 0x53, 0x77, 0xc4, 0xf9, 0x0c, 0xaa, 0x1c, 0xee, 0xfa, 0x79, 0xea, 0xae, 0xb8,
	0xb8, 0xfd, 0x7b, 0xe4, 0x59, 0x13, 0x7f, 0x2a, 0xc8, 0x02, 0xab, 0xaa, 0xa8, 0x4a, 0xa7, 0xa7,
	0x36, 0x15, 0x5d, 0xaf, 0x35, 0x7b, 0x4a, 0x98, 0x7b, 0xe2, 0xf4, 0xc3, 0x30, 0xf7, 0xc4, 0xe9,
	0x6a, 0x98, 0x7b, 0xe2, 0xf4, 0x9a, 0x58, 0xca, 0xa4, 0xe3, 0x42, 0x26, 0x8b, 0x7e, 0x24, 0xce,
	0xa7, 0x4c, 0x34, 0x32, 0x4c, 0x34, 0x72, 0x4c, 0x34, 0x72, 0x4c, 0x34, 0x72, 0x4c, 0x34, 0x72,
	0x4c, 0x34, 0x72, 0x4c, 0x34, 0xa8, 0x89, 0x55, 0x6c, 0x21, 0x7f, 0x64, 0xc9, 0xd6, 0xb3, 0xa6,
	0x62, 0x64, 0x0d, 0x1d, 0x76, 0x3f, 0xec, 0x68, 0x3d, 0xdd, 0xe8, 0x60, 0xff, 0xd2, 0x6a, 0x62,
	0x61, 0xfb, 0x19, 0x8e, 0x87, 0xdc, 0x59, 0x19, 0xcb, 0x8a, 0xaa, 0x52, 0x6b, 0x20, 0x8d, 0xc6,
	0x0a, 0xb2, 0x0f, 0x4b, 0x93, 0xc9, 0x9e, 0x8c, 0x15, 0x91, 0x1c, 0x99, 0xee, 0xcf, 0xe4, 0x33,
	0x50, 0xd4, 0x64, 0xf8, 0x1d, 0x70, 0x23, 0xf5, 0x17, 0xa1, 0xf0, 0x52, 0xff, 0xa6, 0x68, 0xe3,
	0x32, 0xff, 0x65, 0x48, 0x2a, 0x1c, 0x56, 0xfe, 0xf6, 0xb3, 0x4d, 0xe1, 0xd3, 0xcf, 0x36, 0x85,
	0x7f, 0xfb, 0x6c, 0x53, 0xf8, 0xc1, 0xe7, 0x9b, 0x85, 0x4f, 0x3f, 0xdf, 0x2c, 0xfc, 0xcb, 0xe7,
	0x9b, 0x85, 0xd3, 0x05, 0xf2, 0x1f, 0x9a, 0x76, 0xff, 0x37, 0x00, 0x00, 0xff, 0xff, 0x93, 0xc1,
	0x67, 0x49, 0xb4, 0x49, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// E2Client is the client API for E2 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type E2Client interface {
	CellConfigRequest(ctx context.Context, in *E2CellConfigRequestAttribute, opts ...grpc.CallOption) (*E2CellConfigReportAttribute, error)
}

type e2Client struct {
	cc *grpc.ClientConn
}

func NewE2Client(cc *grpc.ClientConn) E2Client {
	return &e2Client{cc}
}

func (c *e2Client) CellConfigRequest(ctx context.Context, in *E2CellConfigRequestAttribute, opts ...grpc.CallOption) (*E2CellConfigReportAttribute, error) {
	out := new(E2CellConfigReportAttribute)
	err := c.cc.Invoke(ctx, "/ran.e2.E2/CellConfigRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// E2Server is the server API for E2 service.
type E2Server interface {
	CellConfigRequest(context.Context, *E2CellConfigRequestAttribute) (*E2CellConfigReportAttribute, error)
}

// UnimplementedE2Server can be embedded to have forward compatible implementations.
type UnimplementedE2Server struct {
}

func (*UnimplementedE2Server) CellConfigRequest(ctx context.Context, req *E2CellConfigRequestAttribute) (*E2CellConfigReportAttribute, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CellConfigRequest not implemented")
}

func RegisterE2Server(s *grpc.Server, srv E2Server) {
	s.RegisterService(&_E2_serviceDesc, srv)
}

func _E2_CellConfigRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(E2CellConfigRequestAttribute)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(E2Server).CellConfigRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ran.e2.E2/CellConfigRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(E2Server).CellConfigRequest(ctx, req.(*E2CellConfigRequestAttribute))
	}
	return interceptor(ctx, in, info, handler)
}

var _E2_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ran.e2.E2",
	HandlerType: (*E2Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CellConfigRequest",
			Handler:    _E2_CellConfigRequest_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/e2/e2.proto",
}

func (m *E2MessageHeader) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *E2MessageHeader) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *E2MessageHeader) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MessageType != 0 {
		i = encodeVarintE2(dAtA, i, uint64(m.MessageType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *E2MessagePayload) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *E2MessagePayload) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *E2MessagePayload) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Attributes != nil {
		{
			size := m.Attributes.Size()
			i -= size
			if _, err := m.Attributes.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *E2MessagePayload_CellConfigRequestAttribute) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *E2MessagePayload_CellConfigRequestAttribute) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.CellConfigRequestAttribute != nil {
		{
			size, err := m.CellConfigRequestAttribute.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintE2(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *E2MessagePayload_CellConfigReportAttribute) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *E2MessagePayload_CellConfigReportAttribute) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.CellConfigReportAttribute != nil {
		{
			size, err := m.CellConfigReportAttribute.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintE2(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *E2MessagePayload_UEAdmissionRequestAttribute) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *E2MessagePayload_UEAdmissionRequestAttribute) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UEAdmissionRequestAttribute != nil {
		{
			size, err := m.UEAdmissionRequestAttribute.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintE2(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *E2MessagePayload_UEAdmissionResponseAttribute) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *E2MessagePayload_UEAdmissionResponseAttribute) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UEAdmissionResponseAttribute != nil {
		{
			size, err := m.UEAdmissionResponseAttribute.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintE2(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *E2MessagePayload_UEAdmissionStatusAttribute) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *E2MessagePayload_UEAdmissionStatusAttribute) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UEAdmissionStatusAttribute != nil {
		{
			size, err := m.UEAdmissionStatusAttribute.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintE2(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *E2MessagePayload_UEContextUpdateAttribute) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *E2MessagePayload_UEContextUpdateAttribute) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UEContextUpdateAttribute != nil {
		{
			size, err := m.UEContextUpdateAttribute.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintE2(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *E2MessagePayload_UEReconfigIndAttribute) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *E2MessagePayload_UEReconfigIndAttribute) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UEReconfigIndAttribute != nil {
		{
			size, err := m.UEReconfigIndAttribute.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintE2(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *E2MessagePayload_UEReleaseIndAttribute) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *E2MessagePayload_UEReleaseIndAttribute) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UEReleaseIndAttribute != nil {
		{
			size, err := m.UEReleaseIndAttribute.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintE2(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	return len(dAtA) - i, nil
}
func (m *E2MessagePayload_BearerAdmissionRequestAttribute) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *E2MessagePayload_BearerAdmissionRequestAttribute) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.BearerAdmissionRequestAttribute != nil {
		{
			size, err := m.BearerAdmissionRequestAttribute.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintE2(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	return len(dAtA) - i, nil
}
func (m *E2MessagePayload_BearerAdmissionResponseAttribute) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *E2MessagePayload_BearerAdmissionResponseAttribute) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.BearerAdmissionResponseAttribute != nil {
		{
			size, err := m.BearerAdmissionResponseAttribute.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintE2(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	return len(dAtA) - i, nil
}
func (m *E2MessagePayload_BearerAdmissionStatusAttribute) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *E2MessagePayload_BearerAdmissionStatusAttribute) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.BearerAdmissionStatusAttribute != nil {
		{
			size, err := m.BearerAdmissionStatusAttribute.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintE2(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	return len(dAtA) - i, nil
}
func (m *E2MessagePayload_BearerReleaseIndAttribute) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *E2MessagePayload_BearerReleaseIndAttribute) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.BearerReleaseIndAttribute != nil {
		{
			size, err := m.BearerReleaseIndAttribute.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintE2(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	return len(dAtA) - i, nil
}
func (m *E2MessagePayload_HORequestAttribute) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *E2MessagePayload_HORequestAttribute) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.HORequestAttribute != nil {
		{
			size, err := m.HORequestAttribute.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintE2(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	return len(dAtA) - i, nil
}
func (m *E2MessagePayload_HOFailureAttribute) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *E2MessagePayload_HOFailureAttribute) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.HOFailureAttribute != nil {
		{
			size, err := m.HOFailureAttribute.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintE2(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x72
	}
	return len(dAtA) - i, nil
}
func (m *E2MessagePayload_HOCompleteAttribute) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *E2MessagePayload_HOCompleteAttribute) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.HOCompleteAttribute != nil {
		{
			size, err := m.HOCompleteAttribute.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintE2(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7a
	}
	return len(dAtA) - i, nil
}
func (m *E2MessagePayload_HOCauseAttribute) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *E2MessagePayload_HOCauseAttribute) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.HOCauseAttribute != nil {
		{
			size, err := m.HOCauseAttribute.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintE2(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	return len(dAtA) - i, nil
}
func (m *E2MessagePayload_RRCMeasConfigAttribute) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *E2MessagePayload_RRCMeasConfigAttribute) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.RRCMeasConfigAttribute != nil {
		{
			size, err := m.RRCMeasConfigAttribute.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintE2(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	return len(dAtA) - i, nil
}
func (m *E2MessagePayload_RxSigMeasReportAttribute) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *E2MessagePayload_RxSigMeasReportAttribute) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.RxSigMeasReportAttribute != nil {
		{
			size, err := m.RxSigMeasReportAttribute.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintE2(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	return len(dAtA) - i, nil
}
func (m *E2MessagePayload_L2MeasConfigAttribute) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *E2MessagePayload_L2MeasConfigAttribute) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.L2MeasConfigAttribute != nil {
		{
			size, err := m.L2MeasConfigAttribute.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintE2(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	return len(dAtA) - i, nil
}
func (m *E2MessagePayload_RadioMeasReportPerU) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *E2MessagePayload_RadioMeasReportPerU) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.RadioMeasReportPerU != nil {
		{
			size, err := m.RadioMeasReportPerU.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintE2(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	return len(dAtA) - i, nil
}
func (m *E2MessagePayload_RadioMeasReportPerCellAttribute) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *E2MessagePayload_RadioMeasReportPerCellAttribute) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.RadioMeasReportPerCellAttribute != nil {
		{
			size, err := m.RadioMeasReportPerCellAttribute.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintE2(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xaa
	}
	return len(dAtA) - i, nil
}
func (m *E2MessagePayload_SchedMeasReportPerUEAttribute) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *E2MessagePayload_SchedMeasReportPerUEAttribute) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SchedMeasReportPerUEAttribute != nil {
		{
			size, err := m.SchedMeasReportPerUEAttribute.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintE2(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb2
	}
	return len(dAtA) - i, nil
}
func (m *E2MessagePayload_SchedMeasReportPerCellAttribute) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *E2MessagePayload_SchedMeasReportPerCellAttribute) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SchedMeasReportPerCellAttribute != nil {
		{
			size, err := m.SchedMeasReportPerCellAttribute.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintE2(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xba
	}
	return len(dAtA) - i, nil
}
func (m *E2MessagePayload_PDCPMeasReportPerUeAttribute) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *E2MessagePayload_PDCPMeasReportPerUeAttribute) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.PDCPMeasReportPerUeAttribute != nil {
		{
			size, err := m.PDCPMeasReportPerUeAttribute.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintE2(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc2
	}
	return len(dAtA) - i, nil
}
func (m *E2MessagePayload_RRMConfigAttribute) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *E2MessagePayload_RRMConfigAttribute) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.RRMConfigAttribute != nil {
		{
			size, err := m.RRMConfigAttribute.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintE2(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xca
	}
	return len(dAtA) - i, nil
}
func (m *E2MessagePayload_RRMConfigStatusAttribute) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *E2MessagePayload_RRMConfigStatusAttribute) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.RRMConfigStatusAttribute != nil {
		{
			size, err := m.RRMConfigStatusAttribute.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintE2(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xd2
	}
	return len(dAtA) - i, nil
}
func (m *E2MessagePayload_UECapabilityEnquiryAttribute) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *E2MessagePayload_UECapabilityEnquiryAttribute) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UECapabilityEnquiryAttribute != nil {
		{
			size, err := m.UECapabilityEnquiryAttribute.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintE2(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xda
	}
	return len(dAtA) - i, nil
}
func (m *E2MessagePayload_UECapabilityInfoAttribute) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *E2MessagePayload_UECapabilityInfoAttribute) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UECapabilityInfoAttribute != nil {
		{
			size, err := m.UECapabilityInfoAttribute.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintE2(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xe2
	}
	return len(dAtA) - i, nil
}
func (m *E2MessagePayload_ScellAddAttribute) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *E2MessagePayload_ScellAddAttribute) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ScellAddAttribute != nil {
		{
			size, err := m.ScellAddAttribute.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintE2(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xea
	}
	return len(dAtA) - i, nil
}
func (m *E2MessagePayload_ScellAddStatusAttribute) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *E2MessagePayload_ScellAddStatusAttribute) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ScellAddStatusAttribute != nil {
		{
			size, err := m.ScellAddStatusAttribute.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintE2(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xf2
	}
	return len(dAtA) - i, nil
}
func (m *E2MessagePayload_ScellDeleteAttribute) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *E2MessagePayload_ScellDeleteAttribute) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ScellDeleteAttribute != nil {
		{
			size, err := m.ScellDeleteAttribute.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintE2(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xfa
	}
	return len(dAtA) - i, nil
}
func (m *E2MessagePayload_SeNBAddAttribute) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *E2MessagePayload_SeNBAddAttribute) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SeNBAddAttribute != nil {
		{
			size, err := m.SeNBAddAttribute.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintE2(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x82
	}
	return len(dAtA) - i, nil
}
func (m *E2MessagePayload_SeNBAddStatusAttribute) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *E2MessagePayload_SeNBAddStatusAttribute) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SeNBAddStatusAttribute != nil {
		{
			size, err := m.SeNBAddStatusAttribute.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintE2(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x8a
	}
	return len(dAtA) - i, nil
}
func (m *E2MessagePayload_SeNBDeleteAttribute) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *E2MessagePayload_SeNBDeleteAttribute) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SeNBDeleteAttribute != nil {
		{
			size, err := m.SeNBDeleteAttribute.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintE2(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x92
	}
	return len(dAtA) - i, nil
}
func (m *E2MessagePayload_TrafficSplitConfigAttribute) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *E2MessagePayload_TrafficSplitConfigAttribute) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.TrafficSplitConfigAttribute != nil {
		{
			size, err := m.TrafficSplitConfigAttribute.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintE2(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x9a
	}
	return len(dAtA) - i, nil
}
func (m *E2Message) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *E2Message) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *E2Message) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Payload != nil {
		{
			size, err := m.Payload.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintE2(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Header != nil {
		{
			size, err := m.Header.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintE2(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ServiceResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServiceResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServiceResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ResultMessage) > 0 {
		i -= len(m.ResultMessage)
		copy(dAtA[i:], m.ResultMessage)
		i = encodeVarintE2(dAtA, i, uint64(len(m.ResultMessage)))
		i--
		dAtA[i] = 0x12
	}
	if m.ResultCode != 0 {
		i = encodeVarintE2(dAtA, i, uint64(m.ResultCode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *E2ECGI) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *E2ECGI) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *E2ECGI) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Ecid) > 0 {
		i -= len(m.Ecid)
		copy(dAtA[i:], m.Ecid)
		i = encodeVarintE2(dAtA, i, uint64(len(m.Ecid)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.PlmnId) > 0 {
		i -= len(m.PlmnId)
		copy(dAtA[i:], m.PlmnId)
		i = encodeVarintE2(dAtA, i, uint64(len(m.PlmnId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *E2CandScell) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *E2CandScell) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *E2CandScell) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.EarfcnDl) > 0 {
		i -= len(m.EarfcnDl)
		copy(dAtA[i:], m.EarfcnDl)
		i = encodeVarintE2(dAtA, i, uint64(len(m.EarfcnDl)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Pci) > 0 {
		i -= len(m.Pci)
		copy(dAtA[i:], m.Pci)
		i = encodeVarintE2(dAtA, i, uint64(len(m.Pci)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *E2CellConfigRequestAttribute) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *E2CellConfigRequestAttribute) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *E2CellConfigRequestAttribute) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Ecgi != nil {
		{
			size, err := m.Ecgi.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintE2(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *E2CellConfigReportAttribute) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *E2CellConfigReportAttribute) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *E2CellConfigReportAttribute) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DlfsSchedEnable) > 0 {
		i -= len(m.DlfsSchedEnable)
		copy(dAtA[i:], m.DlfsSchedEnable)
		i = encodeVarintE2(dAtA, i, uint64(len(m.DlfsSchedEnable)))
		i--
		dAtA[i] = 0x72
	}
	if len(m.MaxNumUesSchedPerTtiUl) > 0 {
		i -= len(m.MaxNumUesSchedPerTtiUl)
		copy(dAtA[i:], m.MaxNumUesSchedPerTtiUl)
		i = encodeVarintE2(dAtA, i, uint64(len(m.MaxNumUesSchedPerTtiUl)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.MaxNumUesSchedPerTtiDl) > 0 {
		i -= len(m.MaxNumUesSchedPerTtiDl)
		copy(dAtA[i:], m.MaxNumUesSchedPerTtiDl)
		i = encodeVarintE2(dAtA, i, uint64(len(m.MaxNumUesSchedPerTtiDl)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.MaxNumConnectedBearers) > 0 {
		i -= len(m.MaxNumConnectedBearers)
		copy(dAtA[i:], m.MaxNumConnectedBearers)
		i = encodeVarintE2(dAtA, i, uint64(len(m.MaxNumConnectedBearers)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.MaxNumConnectedUes) > 0 {
		i -= len(m.MaxNumConnectedUes)
		copy(dAtA[i:], m.MaxNumConnectedUes)
		i = encodeVarintE2(dAtA, i, uint64(len(m.MaxNumConnectedUes)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.DuplexMode) > 0 {
		i -= len(m.DuplexMode)
		copy(dAtA[i:], m.DuplexMode)
		i = encodeVarintE2(dAtA, i, uint64(len(m.DuplexMode)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.NumTxAntenna) > 0 {
		i -= len(m.NumTxAntenna)
		copy(dAtA[i:], m.NumTxAntenna)
		i = encodeVarintE2(dAtA, i, uint64(len(m.NumTxAntenna)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.RbsPerTtiUl) > 0 {
		i -= len(m.RbsPerTtiUl)
		copy(dAtA[i:], m.RbsPerTtiUl)
		i = encodeVarintE2(dAtA, i, uint64(len(m.RbsPerTtiUl)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.RbsPerTtiDl) > 0 {
		i -= len(m.RbsPerTtiDl)
		copy(dAtA[i:], m.RbsPerTtiDl)
		i = encodeVarintE2(dAtA, i, uint64(len(m.RbsPerTtiDl)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.EarfcnUl) > 0 {
		i -= len(m.EarfcnUl)
		copy(dAtA[i:], m.EarfcnUl)
		i = encodeVarintE2(dAtA, i, uint64(len(m.EarfcnUl)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.EarfcnDl) > 0 {
		i -= len(m.EarfcnDl)
		copy(dAtA[i:], m.EarfcnDl)
		i = encodeVarintE2(dAtA, i, uint64(len(m.EarfcnDl)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.CandScells) > 0 {
		for iNdEx := len(m.CandScells) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CandScells[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintE2(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Pci) > 0 {
		i -= len(m.Pci)
		copy(dAtA[i:], m.Pci)
		i = encodeVarintE2(dAtA, i, uint64(len(m.Pci)))
		i--
		dAtA[i] = 0x12
	}
	if m.Ecgi != nil {
		{
			size, err := m.Ecgi.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintE2(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *E2UEAdmissionRequestAttribute) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *E2UEAdmissionRequestAttribute) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *E2UEAdmissionRequestAttribute) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AdmissionEstCause != 0 {
		i = encodeVarintE2(dAtA, i, uint64(m.AdmissionEstCause))
		i--
		dAtA[i] = 0x18
	}
	if m.Ecgi != nil {
		{
			size, err := m.Ecgi.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintE2(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Crnti) > 0 {
		i -= len(m.Crnti)
		copy(dAtA[i:], m.Crnti)
		i = encodeVarintE2(dAtA, i, uint64(len(m.Crnti)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *E2UEAdmissionResponseAttribute) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *E2UEAdmissionResponseAttribute) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *E2UEAdmissionResponseAttribute) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AdmissionEstResponse != 0 {
		i = encodeVarintE2(dAtA, i, uint64(m.AdmissionEstResponse))
		i--
		dAtA[i] = 0x18
	}
	if m.Ecgi != nil {
		{
			size, err := m.Ecgi.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintE2(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Crnti) > 0 {
		i -= len(m.Crnti)
		copy(dAtA[i:], m.Crnti)
		i = encodeVarintE2(dAtA, i, uint64(len(m.Crnti)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *E2UEAdmissionStatusAttribute) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *E2UEAdmissionStatusAttribute) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *E2UEAdmissionStatusAttribute) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AdmissionEstStatus != 0 {
		i = encodeVarintE2(dAtA, i, uint64(m.AdmissionEstStatus))
		i--
		dAtA[i] = 0x18
	}
	if m.Ecgi != nil {
		{
			size, err := m.Ecgi.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintE2(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Crnti) > 0 {
		i -= len(m.Crnti)
		copy(dAtA[i:], m.Crnti)
		i = encodeVarintE2(dAtA, i, uint64(len(m.Crnti)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *E2UEContextUpdateAttribute) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *E2UEContextUpdateAttribute) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *E2UEContextUpdateAttribute) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Imsi) > 0 {
		i -= len(m.Imsi)
		copy(dAtA[i:], m.Imsi)
		i = encodeVarintE2(dAtA, i, uint64(len(m.Imsi)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.EnbUeS1ApId) > 0 {
		i -= len(m.EnbUeS1ApId)
		copy(dAtA[i:], m.EnbUeS1ApId)
		i = encodeVarintE2(dAtA, i, uint64(len(m.EnbUeS1ApId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.MmeUeS1ApId) > 0 {
		i -= len(m.MmeUeS1ApId)
		copy(dAtA[i:], m.MmeUeS1ApId)
		i = encodeVarintE2(dAtA, i, uint64(len(m.MmeUeS1ApId)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Ecgi != nil {
		{
			size, err := m.Ecgi.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintE2(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Crnti) > 0 {
		i -= len(m.Crnti)
		copy(dAtA[i:], m.Crnti)
		i = encodeVarintE2(dAtA, i, uint64(len(m.Crnti)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *E2UEReconfigIndAttribute) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *E2UEReconfigIndAttribute) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *E2UEReconfigIndAttribute) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ReconfigCause != 0 {
		i = encodeVarintE2(dAtA, i, uint64(m.ReconfigCause))
		i--
		dAtA[i] = 0x20
	}
	if len(m.CrntiNew) > 0 {
		i -= len(m.CrntiNew)
		copy(dAtA[i:], m.CrntiNew)
		i = encodeVarintE2(dAtA, i, uint64(len(m.CrntiNew)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Ecgi != nil {
		{
			size, err := m.Ecgi.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintE2(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.CrntiOld) > 0 {
		i -= len(m.CrntiOld)
		copy(dAtA[i:], m.CrntiOld)
		i = encodeVarintE2(dAtA, i, uint64(len(m.CrntiOld)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *E2UEReleaseIndAttribute) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *E2UEReleaseIndAttribute) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *E2UEReleaseIndAttribute) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ReleaseCause != 0 {
		i = encodeVarintE2(dAtA, i, uint64(m.ReleaseCause))
		i--
		dAtA[i] = 0x18
	}
	if m.Ecgi != nil {
		{
			size, err := m.Ecgi.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintE2(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Crnti) > 0 {
		i -= len(m.Crnti)
		copy(dAtA[i:], m.Crnti)
		i = encodeVarintE2(dAtA, i, uint64(len(m.Crnti)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *E2UEAMBR) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *E2UEAMBR) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *E2UEAMBR) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AmbrUl) > 0 {
		i -= len(m.AmbrUl)
		copy(dAtA[i:], m.AmbrUl)
		i = encodeVarintE2(dAtA, i, uint64(len(m.AmbrUl)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.AmbrDl) > 0 {
		i -= len(m.AmbrDl)
		copy(dAtA[i:], m.AmbrDl)
		i = encodeVarintE2(dAtA, i, uint64(len(m.AmbrDl)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *E2ERABParamsItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *E2ERABParamsItem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *E2ERABParamsItem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MbrUl) > 0 {
		i -= len(m.MbrUl)
		copy(dAtA[i:], m.MbrUl)
		i = encodeVarintE2(dAtA, i, uint64(len(m.MbrUl)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.MbrDl) > 0 {
		i -= len(m.MbrDl)
		copy(dAtA[i:], m.MbrDl)
		i = encodeVarintE2(dAtA, i, uint64(len(m.MbrDl)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.GbrUl) > 0 {
		i -= len(m.GbrUl)
		copy(dAtA[i:], m.GbrUl)
		i = encodeVarintE2(dAtA, i, uint64(len(m.GbrUl)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.GbrDl) > 0 {
		i -= len(m.GbrDl)
		copy(dAtA[i:], m.GbrDl)
		i = encodeVarintE2(dAtA, i, uint64(len(m.GbrDl)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Arp) > 0 {
		i -= len(m.Arp)
		copy(dAtA[i:], m.Arp)
		i = encodeVarintE2(dAtA, i, uint64(len(m.Arp)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Qci) > 0 {
		i -= len(m.Qci)
		copy(dAtA[i:], m.Qci)
		i = encodeVarintE2(dAtA, i, uint64(len(m.Qci)))
		i--
		dAtA[i] = 0x22
	}
	if m.Type != 0 {
		i = encodeVarintE2(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x18
	}
	if m.Direction != 0 {
		i = encodeVarintE2(dAtA, i, uint64(m.Direction))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintE2(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *E2ERABResponseItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *E2ERABResponseItem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *E2ERABResponseItem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Decision != 0 {
		i = encodeVarintE2(dAtA, i, uint64(m.Decision))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintE2(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *E2BearerAdmissionRequestAttribute) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *E2BearerAdmissionRequestAttribute) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *E2BearerAdmissionRequestAttribute) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ErabsParams) > 0 {
		for iNdEx := len(m.ErabsParams) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ErabsParams[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintE2(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.NumErabsList) > 0 {
		i -= len(m.NumErabsList)
		copy(dAtA[i:], m.NumErabsList)
		i = encodeVarintE2(dAtA, i, uint64(len(m.NumErabsList)))
		i--
		dAtA[i] = 0x22
	}
	if m.UeAmbr != nil {
		{
			size, err := m.UeAmbr.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintE2(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Ecgi != nil {
		{
			size, err := m.Ecgi.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintE2(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Crnti) > 0 {
		i -= len(m.Crnti)
		copy(dAtA[i:], m.Crnti)
		i = encodeVarintE2(dAtA, i, uint64(len(m.Crnti)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *E2BearerAdmissionResponseAttribute) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *E2BearerAdmissionResponseAttribute) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *E2BearerAdmissionResponseAttribute) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ErabResponse) > 0 {
		for iNdEx := len(m.ErabResponse) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ErabResponse[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintE2(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.NumErabsList) > 0 {
		i -= len(m.NumErabsList)
		copy(dAtA[i:], m.NumErabsList)
		i = encodeVarintE2(dAtA, i, uint64(len(m.NumErabsList)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Ecgi != nil {
		{
			size, err := m.Ecgi.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintE2(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Crnti) > 0 {
		i -= len(m.Crnti)
		copy(dAtA[i:], m.Crnti)
		i = encodeVarintE2(dAtA, i, uint64(len(m.Crnti)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *E2BearerAdmissionStatusAttribute) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *E2BearerAdmissionStatusAttribute) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *E2BearerAdmissionStatusAttribute) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ErabStatus) > 0 {
		for iNdEx := len(m.ErabStatus) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ErabStatus[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintE2(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.NumErabsList) > 0 {
		i -= len(m.NumErabsList)
		copy(dAtA[i:], m.NumErabsList)
		i = encodeVarintE2(dAtA, i, uint64(len(m.NumErabsList)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Ecgi != nil {
		{
			size, err := m.Ecgi.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintE2(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Crnti) > 0 {
		i -= len(m.Crnti)
		copy(dAtA[i:], m.Crnti)
		i = encodeVarintE2(dAtA, i, uint64(len(m.Crnti)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *E2BearerReleaseIndAttribute) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *E2BearerReleaseIndAttribute) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *E2BearerReleaseIndAttribute) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ErabIds) > 0 {
		for iNdEx := len(m.ErabIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ErabIds[iNdEx])
			copy(dAtA[i:], m.ErabIds[iNdEx])
			i = encodeVarintE2(dAtA, i, uint64(len(m.ErabIds[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.NumErabsList) > 0 {
		i -= len(m.NumErabsList)
		copy(dAtA[i:], m.NumErabsList)
		i = encodeVarintE2(dAtA, i, uint64(len(m.NumErabsList)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Ecgi != nil {
		{
			size, err := m.Ecgi.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintE2(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Crnti) > 0 {
		i -= len(m.Crnti)
		copy(dAtA[i:], m.Crnti)
		i = encodeVarintE2(dAtA, i, uint64(len(m.Crnti)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *E2HORequestAttribute) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *E2HORequestAttribute) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *E2HORequestAttribute) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EcgiT != nil {
		{
			size, err := m.EcgiT.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintE2(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.EcgiS != nil {
		{
			size, err := m.EcgiS.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintE2(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Crnti) > 0 {
		i -= len(m.Crnti)
		copy(dAtA[i:], m.Crnti)
		i = encodeVarintE2(dAtA, i, uint64(len(m.Crnti)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *E2HOFailureAttribute) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *E2HOFailureAttribute) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *E2HOFailureAttribute) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.HoFailureCause) > 0 {
		i -= len(m.HoFailureCause)
		copy(dAtA[i:], m.HoFailureCause)
		i = encodeVarintE2(dAtA, i, uint64(len(m.HoFailureCause)))
		i--
		dAtA[i] = 0x1a
	}
	if m.EcgiS != nil {
		{
			size, err := m.EcgiS.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintE2(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Crnti) > 0 {
		i -= len(m.Crnti)
		copy(dAtA[i:], m.Crnti)
		i = encodeVarintE2(dAtA, i, uint64(len(m.Crnti)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *E2HOCompleteAttribute) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *E2HOCompleteAttribute) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *E2HOCompleteAttribute) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EcgiT != nil {
		{
			size, err := m.EcgiT.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintE2(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.EcgiS != nil {
		{
			size, err := m.EcgiS.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintE2(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.CrntiNew) > 0 {
		i -= len(m.CrntiNew)
		copy(dAtA[i:], m.CrntiNew)
		i = encodeVarintE2(dAtA, i, uint64(len(m.CrntiNew)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *E2HOCauseAttribute) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *E2HOCauseAttribute) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *E2HOCauseAttribute) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.HoTrigger) > 0 {
		for iNdEx := len(m.HoTrigger) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.HoTrigger[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintE2(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.HoCause) > 0 {
		i -= len(m.HoCause)
		copy(dAtA[i:], m.HoCause)
		i = encodeVarintE2(dAtA, i, uint64(len(m.HoCause)))
		i--
		dAtA[i] = 0x22
	}
	if m.EcgiT != nil {
		{
			size, err := m.EcgiT.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintE2(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.EcgiS != nil {
		{
			size, err := m.EcgiS.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintE2(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Crnti) > 0 {
		i -= len(m.Crnti)
		copy(dAtA[i:], m.Crnti)
		i = encodeVarintE2(dAtA, i, uint64(len(m.Crnti)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *E2MeasCell) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *E2MeasCell) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *E2MeasCell) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CellIndividualOffset) > 0 {
		i -= len(m.CellIndividualOffset)
		copy(dAtA[i:], m.CellIndividualOffset)
		i = encodeVarintE2(dAtA, i, uint64(len(m.CellIndividualOffset)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Pci) > 0 {
		i -= len(m.Pci)
		copy(dAtA[i:], m.Pci)
		i = encodeVarintE2(dAtA, i, uint64(len(m.Pci)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *E2MeasObject) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *E2MeasObject) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *E2MeasObject) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MeasCells) > 0 {
		for iNdEx := len(m.MeasCells) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MeasCells[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintE2(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.DlFreq) > 0 {
		i -= len(m.DlFreq)
		copy(dAtA[i:], m.DlFreq)
		i = encodeVarintE2(dAtA, i, uint64(len(m.DlFreq)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *E2ReportParamChoice) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *E2ReportParamChoice) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *E2ReportParamChoice) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Choice != nil {
		{
			size := m.Choice.Size()
			i -= size
			if _, err := m.Choice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *E2ReportParamChoice_PerParam) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *E2ReportParamChoice_PerParam) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.PerParam != nil {
		{
			size, err := m.PerParam.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintE2(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *E2ReportParamChoice_A1Param) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *E2ReportParamChoice_A1Param) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.A1Param != nil {
		{
			size, err := m.A1Param.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintE2(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *E2ReportParamChoice_A2Param) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *E2ReportParamChoice_A2Param) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.A2Param != nil {
		{
			size, err := m.A2Param.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintE2(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *E2ReportParamChoice_A3Param) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *E2ReportParamChoice_A3Param) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.A3Param != nil {
		{
			size, err := m.A3Param.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintE2(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *E2ReportParamChoice_A4Param) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *E2ReportParamChoice_A4Param) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.A4Param != nil {
		{
			size, err := m.A4Param.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintE2(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *E2ReportParamChoice_A5Param) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *E2ReportParamChoice_A5Param) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.A5Param != nil {
		{
			size, err := m.A5Param.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintE2(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *E2ReportParamChoice_A6Param) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *E2ReportParamChoice_A6Param) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.A6Param != nil {
		{
			size, err := m.A6Param.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintE2(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *E2ThresholdEUTRAChoice) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *E2ThresholdEUTRAChoice) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *E2ThresholdEUTRAChoice) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Choice != nil {
		{
			size := m.Choice.Size()
			i -= size
			if _, err := m.Choice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *E2ThresholdEUTRAChoice_ThresholdRSRP) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *E2ThresholdEUTRAChoice_ThresholdRSRP) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.ThresholdRSRP)
	copy(dAtA[i:], m.ThresholdRSRP)
	i = encodeVarintE2(dAtA, i, uint64(len(m.ThresholdRSRP)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}
func (m *E2ThresholdEUTRAChoice_ThresholdRSRQ) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *E2ThresholdEUTRAChoice_ThresholdRSRQ) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.ThresholdRSRQ)
	copy(dAtA[i:], m.ThresholdRSRQ)
	i = encodeVarintE2(dAtA, i, uint64(len(m.ThresholdRSRQ)))
	i--
	dAtA[i] = 0x12
	return len(dAtA) - i, nil
}
func (m *E2ThreasholdEUTRA) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *E2ThreasholdEUTRA) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *E2ThreasholdEUTRA) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Choice != nil {
		{
			size, err := m.Choice.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintE2(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Present != 0 {
		i = encodeVarintE2(dAtA, i, uint64(m.Present))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *E2PerParam) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *E2PerParam) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *E2PerParam) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ReportIntervalMs != 0 {
		i = encodeVarintE2(dAtA, i, uint64(m.ReportIntervalMs))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *E2A1Param) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *E2A1Param) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *E2A1Param) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.A1Threshold != nil {
		{
			size, err := m.A1Threshold.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintE2(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *E2A2Param) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *E2A2Param) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *E2A2Param) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.A2Threshold != nil {
		{
			size, err := m.A2Threshold.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintE2(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *E2A3Param) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *E2A3Param) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *E2A3Param) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.A3Offset) > 0 {
		i -= len(m.A3Offset)
		copy(dAtA[i:], m.A3Offset)
		i = encodeVarintE2(dAtA, i, uint64(len(m.A3Offset)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *E2A4Param) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *E2A4Param) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *E2A4Param) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.A4Threshold != nil {
		{
			size, err := m.A4Threshold.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintE2(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *E2A5Param) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *E2A5Param) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *E2A5Param) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.A5Threshold2 != nil {
		{
			size, err := m.A5Threshold2.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintE2(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.A5Threshold1 != nil {
		{
			size, err := m.A5Threshold1.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintE2(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *E2A6Param) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *E2A6Param) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *E2A6Param) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.A6Offset) > 0 {
		i -= len(m.A6Offset)
		copy(dAtA[i:], m.A6Offset)
		i = encodeVarintE2(dAtA, i, uint64(len(m.A6Offset)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *E2ReportParam) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *E2ReportParam) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *E2ReportParam) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Timetotrigger != 0 {
		i = encodeVarintE2(dAtA, i, uint64(m.Timetotrigger))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Hysteresis) > 0 {
		i -= len(m.Hysteresis)
		copy(dAtA[i:], m.Hysteresis)
		i = encodeVarintE2(dAtA, i, uint64(len(m.Hysteresis)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Choice != nil {
		{
			size, err := m.Choice.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintE2(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Present != 0 {
		i = encodeVarintE2(dAtA, i, uint64(m.Present))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *E2ReportConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *E2ReportConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *E2ReportConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ReportQuality != 0 {
		i = encodeVarintE2(dAtA, i, uint64(m.ReportQuality))
		i--
		dAtA[i] = 0x18
	}
	if m.TriggerQuantity != 0 {
		i = encodeVarintE2(dAtA, i, uint64(m.TriggerQuantity))
		i--
		dAtA[i] = 0x10
	}
	if m.ReportParams != nil {
		{
			size, err := m.ReportParams.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintE2(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *E2AddMeasId) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *E2AddMeasId) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *E2AddMeasId) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AddMeasId) > 0 {
		for iNdEx := len(m.AddMeasId) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.AddMeasId[iNdEx])
			copy(dAtA[i:], m.AddMeasId[iNdEx])
			i = encodeVarintE2(dAtA, i, uint64(len(m.AddMeasId[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *E2DelMeasId) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *E2DelMeasId) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *E2DelMeasId) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DelMeasId) > 0 {
		for iNdEx := len(m.DelMeasId) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.DelMeasId[iNdEx])
			copy(dAtA[i:], m.DelMeasId[iNdEx])
			i = encodeVarintE2(dAtA, i, uint64(len(m.DelMeasId[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *E2MeasIdActionChoice) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *E2MeasIdActionChoice) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *E2MeasIdActionChoice) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Choice != nil {
		{
			size := m.Choice.Size()
			i -= size
			if _, err := m.Choice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *E2MeasIdActionChoice_AddMeasId) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *E2MeasIdActionChoice_AddMeasId) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AddMeasId != nil {
		{
			size, err := m.AddMeasId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintE2(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *E2MeasIdActionChoice_DelMeasId) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *E2MeasIdActionChoice_DelMeasId) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DelMeasId != nil {
		{
			size, err := m.DelMeasId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintE2(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *E2MeasIdActionChoice_Hototarget) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *E2MeasIdActionChoice_Hototarget) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.Hototarget)
	copy(dAtA[i:], m.Hototarget)
	i = encodeVarintE2(dAtA, i, uint64(len(m.Hototarget)))
	i--
	dAtA[i] = 0x1a
	return len(dAtA) - i, nil
}
func (m *E2MeasIdAction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *E2MeasIdAction) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *E2MeasIdAction) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Choice != nil {
		{
			size, err := m.Choice.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintE2(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Present != 0 {
		i = encodeVarintE2(dAtA, i, uint64(m.Present))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *E2MeasID) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *E2MeasID) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *E2MeasID) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Action != nil {
		{
			size, err := m.Action.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintE2(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ReportConfigId) > 0 {
		i -= len(m.ReportConfigId)
		copy(dAtA[i:], m.ReportConfigId)
		i = encodeVarintE2(dAtA, i, uint64(len(m.ReportConfigId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.MeasObjectId) > 0 {
		i -= len(m.MeasObjectId)
		copy(dAtA[i:], m.MeasObjectId)
		i = encodeVarintE2(dAtA, i, uint64(len(m.MeasObjectId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *E2RRCMeasConfigAttribute) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *E2RRCMeasConfigAttribute) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *E2RRCMeasConfigAttribute) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MeasIds) > 0 {
		for iNdEx := len(m.MeasIds) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MeasIds[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintE2(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.ReportConfigs) > 0 {
		for iNdEx := len(m.ReportConfigs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ReportConfigs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintE2(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.MeasObjects) > 0 {
		for iNdEx := len(m.MeasObjects) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MeasObjects[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintE2(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Crnti) > 0 {
		for iNdEx := len(m.Crnti) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Crnti[iNdEx])
			copy(dAtA[i:], m.Crnti[iNdEx])
			i = encodeVarintE2(dAtA, i, uint64(len(m.Crnti[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Ecgi != nil {
		{
			size, err := m.Ecgi.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintE2(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *E2PCIARFCN) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *E2PCIARFCN) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *E2PCIARFCN) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.EarfcnDl) > 0 {
		i -= len(m.EarfcnDl)
		copy(dAtA[i:], m.EarfcnDl)
		i = encodeVarintE2(dAtA, i, uint64(len(m.EarfcnDl)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Pci) > 0 {
		i -= len(m.Pci)
		copy(dAtA[i:], m.Pci)
		i = encodeVarintE2(dAtA, i, uint64(len(m.Pci)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *E2RXSigReport) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *E2RXSigReport) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *E2RXSigReport) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Rsrq) > 0 {
		i -= len(m.Rsrq)
		copy(dAtA[i:], m.Rsrq)
		i = encodeVarintE2(dAtA, i, uint64(len(m.Rsrq)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Rsrp) > 0 {
		i -= len(m.Rsrp)
		copy(dAtA[i:], m.Rsrp)
		i = encodeVarintE2(dAtA, i, uint64(len(m.Rsrp)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Ecgi != nil {
		{
			size, err := m.Ecgi.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintE2(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.PciArfcn != nil {
		{
			size, err := m.PciArfcn.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintE2(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *E2RxSigMeasReportAttribute) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *E2RxSigMeasReportAttribute) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *E2RxSigMeasReportAttribute) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CellMeasReport) > 0 {
		for iNdEx := len(m.CellMeasReport) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CellMeasReport[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintE2(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Ecgi != nil {
		{
			size, err := m.Ecgi.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintE2(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Crnti) > 0 {
		for iNdEx := len(m.Crnti) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Crnti[iNdEx])
			copy(dAtA[i:], m.Crnti[iNdEx])
			i = encodeVarintE2(dAtA, i, uint64(len(m.Crnti[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *E2L2ReportInterval) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *E2L2ReportInterval) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *E2L2ReportInterval) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TPdcpMeasReportPerUe != 0 {
		i = encodeVarintE2(dAtA, i, uint64(m.TPdcpMeasReportPerUe))
		i--
		dAtA[i] = 0x28
	}
	if m.TSchedMeasReportPerCell != 0 {
		i = encodeVarintE2(dAtA, i, uint64(m.TSchedMeasReportPerCell))
		i--
		dAtA[i] = 0x20
	}
	if m.TSchedMeasReportPerUe != 0 {
		i = encodeVarintE2(dAtA, i, uint64(m.TSchedMeasReportPerUe))
		i--
		dAtA[i] = 0x18
	}
	if m.TRadioMeasReportPerCell != 0 {
		i = encodeVarintE2(dAtA, i, uint64(m.TRadioMeasReportPerCell))
		i--
		dAtA[i] = 0x10
	}
	if m.TRadioMeasReportPerUe != 0 {
		i = encodeVarintE2(dAtA, i, uint64(m.TRadioMeasReportPerUe))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *E2L2MeasConfigAttribute) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *E2L2MeasConfigAttribute) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *E2L2MeasConfigAttribute) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ReportIntervals != nil {
		{
			size, err := m.ReportIntervals.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintE2(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Crnti) > 0 {
		for iNdEx := len(m.Crnti) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Crnti[iNdEx])
			copy(dAtA[i:], m.Crnti[iNdEx])
			i = encodeVarintE2(dAtA, i, uint64(len(m.Crnti[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Ecgi != nil {
		{
			size, err := m.Ecgi.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintE2(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *E2RadioRepPerServCell) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *E2RadioRepPerServCell) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *E2RadioRepPerServCell) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PucchSinrHist) > 0 {
		for iNdEx := len(m.PucchSinrHist) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.PucchSinrHist[iNdEx])
			copy(dAtA[i:], m.PucchSinrHist[iNdEx])
			i = encodeVarintE2(dAtA, i, uint64(len(m.PucchSinrHist[iNdEx])))
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.PuschSinrHist) > 0 {
		for iNdEx := len(m.PuschSinrHist) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.PuschSinrHist[iNdEx])
			copy(dAtA[i:], m.PuschSinrHist[iNdEx])
			i = encodeVarintE2(dAtA, i, uint64(len(m.PuschSinrHist[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.RiHist) > 0 {
		for iNdEx := len(m.RiHist) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.RiHist[iNdEx])
			copy(dAtA[i:], m.RiHist[iNdEx])
			i = encodeVarintE2(dAtA, i, uint64(len(m.RiHist[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.CqiHist) > 0 {
		for iNdEx := len(m.CqiHist) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.CqiHist[iNdEx])
			copy(dAtA[i:], m.CqiHist[iNdEx])
			i = encodeVarintE2(dAtA, i, uint64(len(m.CqiHist[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Ecgi != nil {
		{
			size, err := m.Ecgi.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintE2(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *E2RadioMeasReportPerUEAttribute) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *E2RadioMeasReportPerUEAttribute) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *E2RadioMeasReportPerUEAttribute) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RadioReportServCells) > 0 {
		for iNdEx := len(m.RadioReportServCells) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RadioReportServCells[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintE2(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Crnti) > 0 {
		i -= len(m.Crnti)
		copy(dAtA[i:], m.Crnti)
		i = encodeVarintE2(dAtA, i, uint64(len(m.Crnti)))
		i--
		dAtA[i] = 0x12
	}
	if m.Ecgi != nil {
		{
			size, err := m.Ecgi.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintE2(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *E2RadioMeasReportPerCellAttribute) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *E2RadioMeasReportPerCellAttribute) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *E2RadioMeasReportPerCellAttribute) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PucchIntfPowerHist) > 0 {
		for iNdEx := len(m.PucchIntfPowerHist) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.PucchIntfPowerHist[iNdEx])
			copy(dAtA[i:], m.PucchIntfPowerHist[iNdEx])
			i = encodeVarintE2(dAtA, i, uint64(len(m.PucchIntfPowerHist[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.PuschIntfPwrHist) > 0 {
		for iNdEx := len(m.PuschIntfPwrHist) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.PuschIntfPwrHist[iNdEx])
			copy(dAtA[i:], m.PuschIntfPwrHist[iNdEx])
			i = encodeVarintE2(dAtA, i, uint64(len(m.PuschIntfPwrHist[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Ecgi != nil {
		{
			size, err := m.Ecgi.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintE2(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *E2PRBUsage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *E2PRBUsage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *E2PRBUsage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PrbUsageUl) > 0 {
		for iNdEx := len(m.PrbUsageUl) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.PrbUsageUl[iNdEx])
			copy(dAtA[i:], m.PrbUsageUl[iNdEx])
			i = encodeVarintE2(dAtA, i, uint64(len(m.PrbUsageUl[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.PrbUsageDl) > 0 {
		for iNdEx := len(m.PrbUsageDl) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.PrbUsageDl[iNdEx])
			copy(dAtA[i:], m.PrbUsageDl[iNdEx])
			i = encodeVarintE2(dAtA, i, uint64(len(m.PrbUsageDl[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *E2SchedMeasRepPerServCell) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *E2SchedMeasRepPerServCell) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *E2SchedMeasRepPerServCell) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RankDl2) > 0 {
		for iNdEx := len(m.RankDl2) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.RankDl2[iNdEx])
			copy(dAtA[i:], m.RankDl2[iNdEx])
			i = encodeVarintE2(dAtA, i, uint64(len(m.RankDl2[iNdEx])))
			i--
			dAtA[i] = 0x4a
		}
	}
	if len(m.RankDl1) > 0 {
		for iNdEx := len(m.RankDl1) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.RankDl1[iNdEx])
			copy(dAtA[i:], m.RankDl1[iNdEx])
			i = encodeVarintE2(dAtA, i, uint64(len(m.RankDl1[iNdEx])))
			i--
			dAtA[i] = 0x42
		}
	}
	if len(m.NumSchedTtisUl) > 0 {
		for iNdEx := len(m.NumSchedTtisUl) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.NumSchedTtisUl[iNdEx])
			copy(dAtA[i:], m.NumSchedTtisUl[iNdEx])
			i = encodeVarintE2(dAtA, i, uint64(len(m.NumSchedTtisUl[iNdEx])))
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.McsUl) > 0 {
		for iNdEx := len(m.McsUl) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.McsUl[iNdEx])
			copy(dAtA[i:], m.McsUl[iNdEx])
			i = encodeVarintE2(dAtA, i, uint64(len(m.McsUl[iNdEx])))
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.NumSchedTtisDl) > 0 {
		for iNdEx := len(m.NumSchedTtisDl) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.NumSchedTtisDl[iNdEx])
			copy(dAtA[i:], m.NumSchedTtisDl[iNdEx])
			i = encodeVarintE2(dAtA, i, uint64(len(m.NumSchedTtisDl[iNdEx])))
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.McsDl) > 0 {
		for iNdEx := len(m.McsDl) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.McsDl[iNdEx])
			copy(dAtA[i:], m.McsDl[iNdEx])
			i = encodeVarintE2(dAtA, i, uint64(len(m.McsDl[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if m.PrbUsage != nil {
		{
			size, err := m.PrbUsage.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintE2(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.QciVals) > 0 {
		for iNdEx := len(m.QciVals) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.QciVals[iNdEx])
			copy(dAtA[i:], m.QciVals[iNdEx])
			i = encodeVarintE2(dAtA, i, uint64(len(m.QciVals[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Ecgi != nil {
		{
			size, err := m.Ecgi.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintE2(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *E2SchedMeasReportPerUEAttribute) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *E2SchedMeasReportPerUEAttribute) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *E2SchedMeasReportPerUEAttribute) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SchedReportServCells) > 0 {
		for iNdEx := len(m.SchedReportServCells) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SchedReportServCells[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintE2(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Crnti) > 0 {
		i -= len(m.Crnti)
		copy(dAtA[i:], m.Crnti)
		i = encodeVarintE2(dAtA, i, uint64(len(m.Crnti)))
		i--
		dAtA[i] = 0x12
	}
	if m.Ecgi != nil {
		{
			size, err := m.Ecgi.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintE2(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *E2SchedMeasReportPerCellAttribute) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *E2SchedMeasReportPerCellAttribute) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *E2SchedMeasReportPerCellAttribute) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PrbUsageScell != nil {
		{
			size, err := m.PrbUsageScell.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintE2(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.PrbUsagePcell != nil {
		{
			size, err := m.PrbUsagePcell.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintE2(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.QciVals) > 0 {
		for iNdEx := len(m.QciVals) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.QciVals[iNdEx])
			copy(dAtA[i:], m.QciVals[iNdEx])
			i = encodeVarintE2(dAtA, i, uint64(len(m.QciVals[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Ecgi != nil {
		{
			size, err := m.Ecgi.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintE2(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *E2PDCPMeasReportPerUeAttribute) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *E2PDCPMeasReportPerUeAttribute) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *E2PDCPMeasReportPerUeAttribute) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ThroughputUl) > 0 {
		for iNdEx := len(m.ThroughputUl) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ThroughputUl[iNdEx])
			copy(dAtA[i:], m.ThroughputUl[iNdEx])
			i = encodeVarintE2(dAtA, i, uint64(len(m.ThroughputUl[iNdEx])))
			i--
			dAtA[i] = 0x5a
		}
	}
	if len(m.ThroughputDl) > 0 {
		for iNdEx := len(m.ThroughputDl) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ThroughputDl[iNdEx])
			copy(dAtA[i:], m.ThroughputDl[iNdEx])
			i = encodeVarintE2(dAtA, i, uint64(len(m.ThroughputDl[iNdEx])))
			i--
			dAtA[i] = 0x52
		}
	}
	if len(m.PktLossRateUl) > 0 {
		for iNdEx := len(m.PktLossRateUl) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.PktLossRateUl[iNdEx])
			copy(dAtA[i:], m.PktLossRateUl[iNdEx])
			i = encodeVarintE2(dAtA, i, uint64(len(m.PktLossRateUl[iNdEx])))
			i--
			dAtA[i] = 0x4a
		}
	}
	if len(m.PktLossRateDl) > 0 {
		for iNdEx := len(m.PktLossRateDl) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.PktLossRateDl[iNdEx])
			copy(dAtA[i:], m.PktLossRateDl[iNdEx])
			i = encodeVarintE2(dAtA, i, uint64(len(m.PktLossRateDl[iNdEx])))
			i--
			dAtA[i] = 0x42
		}
	}
	if len(m.PktDiscardRateDl) > 0 {
		for iNdEx := len(m.PktDiscardRateDl) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.PktDiscardRateDl[iNdEx])
			copy(dAtA[i:], m.PktDiscardRateDl[iNdEx])
			i = encodeVarintE2(dAtA, i, uint64(len(m.PktDiscardRateDl[iNdEx])))
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.PktDelayDl) > 0 {
		for iNdEx := len(m.PktDelayDl) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.PktDelayDl[iNdEx])
			copy(dAtA[i:], m.PktDelayDl[iNdEx])
			i = encodeVarintE2(dAtA, i, uint64(len(m.PktDelayDl[iNdEx])))
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.DataVolUl) > 0 {
		for iNdEx := len(m.DataVolUl) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.DataVolUl[iNdEx])
			copy(dAtA[i:], m.DataVolUl[iNdEx])
			i = encodeVarintE2(dAtA, i, uint64(len(m.DataVolUl[iNdEx])))
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.DataVolDl) > 0 {
		for iNdEx := len(m.DataVolDl) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.DataVolDl[iNdEx])
			copy(dAtA[i:], m.DataVolDl[iNdEx])
			i = encodeVarintE2(dAtA, i, uint64(len(m.DataVolDl[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.QciVals) > 0 {
		for iNdEx := len(m.QciVals) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.QciVals[iNdEx])
			copy(dAtA[i:], m.QciVals[iNdEx])
			i = encodeVarintE2(dAtA, i, uint64(len(m.QciVals[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Crnti) > 0 {
		i -= len(m.Crnti)
		copy(dAtA[i:], m.Crnti)
		i = encodeVarintE2(dAtA, i, uint64(len(m.Crnti)))
		i--
		dAtA[i] = 0x12
	}
	if m.Ecgi != nil {
		{
			size, err := m.Ecgi.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintE2(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *E2RRMConfigAttribute) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *E2RRMConfigAttribute) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *E2RRMConfigAttribute) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SubFrameBitmaskUl) > 0 {
		for iNdEx := len(m.SubFrameBitmaskUl) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.SubFrameBitmaskUl[iNdEx])
			copy(dAtA[i:], m.SubFrameBitmaskUl[iNdEx])
			i = encodeVarintE2(dAtA, i, uint64(len(m.SubFrameBitmaskUl[iNdEx])))
			i--
			dAtA[i] = 0x5a
		}
	}
	if len(m.EndPrbUl) > 0 {
		for iNdEx := len(m.EndPrbUl) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.EndPrbUl[iNdEx])
			copy(dAtA[i:], m.EndPrbUl[iNdEx])
			i = encodeVarintE2(dAtA, i, uint64(len(m.EndPrbUl[iNdEx])))
			i--
			dAtA[i] = 0x52
		}
	}
	if len(m.StartPrbUl) > 0 {
		for iNdEx := len(m.StartPrbUl) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.StartPrbUl[iNdEx])
			copy(dAtA[i:], m.StartPrbUl[iNdEx])
			i = encodeVarintE2(dAtA, i, uint64(len(m.StartPrbUl[iNdEx])))
			i--
			dAtA[i] = 0x4a
		}
	}
	if len(m.P0UePusch) > 0 {
		for iNdEx := len(m.P0UePusch) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.P0UePusch[iNdEx])
			copy(dAtA[i:], m.P0UePusch[iNdEx])
			i = encodeVarintE2(dAtA, i, uint64(len(m.P0UePusch[iNdEx])))
			i--
			dAtA[i] = 0x42
		}
	}
	if len(m.SubFrameBitmaskDl) > 0 {
		for iNdEx := len(m.SubFrameBitmaskDl) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.SubFrameBitmaskDl[iNdEx])
			copy(dAtA[i:], m.SubFrameBitmaskDl[iNdEx])
			i = encodeVarintE2(dAtA, i, uint64(len(m.SubFrameBitmaskDl[iNdEx])))
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.EndPrbDl) > 0 {
		for iNdEx := len(m.EndPrbDl) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.EndPrbDl[iNdEx])
			copy(dAtA[i:], m.EndPrbDl[iNdEx])
			i = encodeVarintE2(dAtA, i, uint64(len(m.EndPrbDl[iNdEx])))
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.StartPrbDl) > 0 {
		for iNdEx := len(m.StartPrbDl) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.StartPrbDl[iNdEx])
			copy(dAtA[i:], m.StartPrbDl[iNdEx])
			i = encodeVarintE2(dAtA, i, uint64(len(m.StartPrbDl[iNdEx])))
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.PA) > 0 {
		dAtA94 := make([]byte, len(m.PA)*10)
		var j93 int
		for _, num := range m.PA {
			for num >= 1<<7 {
				dAtA94[j93] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j93++
			}
			dAtA94[j93] = uint8(num)
			j93++
		}
		i -= j93
		copy(dAtA[i:], dAtA94[:j93])
		i = encodeVarintE2(dAtA, i, uint64(j93))
		i--
		dAtA[i] = 0x22
	}
	if m.PciArfcn != nil {
		{
			size, err := m.PciArfcn.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintE2(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Crnti) > 0 {
		for iNdEx := len(m.Crnti) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Crnti[iNdEx])
			copy(dAtA[i:], m.Crnti[iNdEx])
			i = encodeVarintE2(dAtA, i, uint64(len(m.Crnti[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Ecgi != nil {
		{
			size, err := m.Ecgi.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintE2(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *E2RRMConfigStatusAttribute) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *E2RRMConfigStatusAttribute) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *E2RRMConfigStatusAttribute) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Status) > 0 {
		dAtA98 := make([]byte, len(m.Status)*10)
		var j97 int
		for _, num := range m.Status {
			for num >= 1<<7 {
				dAtA98[j97] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j97++
			}
			dAtA98[j97] = uint8(num)
			j97++
		}
		i -= j97
		copy(dAtA[i:], dAtA98[:j97])
		i = encodeVarintE2(dAtA, i, uint64(j97))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Crnti) > 0 {
		for iNdEx := len(m.Crnti) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Crnti[iNdEx])
			copy(dAtA[i:], m.Crnti[iNdEx])
			i = encodeVarintE2(dAtA, i, uint64(len(m.Crnti[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Ecgi != nil {
		{
			size, err := m.Ecgi.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintE2(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *E2CACap) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *E2CACap) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *E2CACap) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CrossCarrierSched) > 0 {
		i -= len(m.CrossCarrierSched)
		copy(dAtA[i:], m.CrossCarrierSched)
		i = encodeVarintE2(dAtA, i, uint64(len(m.CrossCarrierSched)))
		i--
		dAtA[i] = 0x22
	}
	if m.Caclassul != 0 {
		i = encodeVarintE2(dAtA, i, uint64(m.Caclassul))
		i--
		dAtA[i] = 0x18
	}
	if m.Caclassdl != 0 {
		i = encodeVarintE2(dAtA, i, uint64(m.Caclassdl))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Band) > 0 {
		i -= len(m.Band)
		copy(dAtA[i:], m.Band)
		i = encodeVarintE2(dAtA, i, uint64(len(m.Band)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *E2DCCap) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *E2DCCap) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *E2DCCap) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DrbTypeSplit != 0 {
		i = encodeVarintE2(dAtA, i, uint64(m.DrbTypeSplit))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *E2UECapabilityEnquiryAttribute) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *E2UECapabilityEnquiryAttribute) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *E2UECapabilityEnquiryAttribute) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Ecgi != nil {
		{
			size, err := m.Ecgi.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintE2(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Crnti) > 0 {
		i -= len(m.Crnti)
		copy(dAtA[i:], m.Crnti)
		i = encodeVarintE2(dAtA, i, uint64(len(m.Crnti)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *E2UECapabilityInfoAttribute) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *E2UECapabilityInfoAttribute) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *E2UECapabilityInfoAttribute) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DcCap != nil {
		{
			size, err := m.DcCap.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintE2(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.CaCap != nil {
		{
			size, err := m.CaCap.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintE2(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Ecgi != nil {
		{
			size, err := m.Ecgi.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintE2(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Crnti) > 0 {
		i -= len(m.Crnti)
		copy(dAtA[i:], m.Crnti)
		i = encodeVarintE2(dAtA, i, uint64(len(m.Crnti)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *E2PropScell) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *E2PropScell) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *E2PropScell) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DeactTimer) > 0 {
		i -= len(m.DeactTimer)
		copy(dAtA[i:], m.DeactTimer)
		i = encodeVarintE2(dAtA, i, uint64(len(m.DeactTimer)))
		i--
		dAtA[i] = 0x22
	}
	if m.CaDirection != 0 {
		i = encodeVarintE2(dAtA, i, uint64(m.CaDirection))
		i--
		dAtA[i] = 0x18
	}
	if len(m.CrossCarrierSchedEnable) > 0 {
		i -= len(m.CrossCarrierSchedEnable)
		copy(dAtA[i:], m.CrossCarrierSchedEnable)
		i = encodeVarintE2(dAtA, i, uint64(len(m.CrossCarrierSchedEnable)))
		i--
		dAtA[i] = 0x12
	}
	if m.PciArfcn != nil {
		{
			size, err := m.PciArfcn.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintE2(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *E2ScellAddAttribute) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *E2ScellAddAttribute) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *E2ScellAddAttribute) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ScellsProp) > 0 {
		for iNdEx := len(m.ScellsProp) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ScellsProp[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintE2(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Ecgi != nil {
		{
			size, err := m.Ecgi.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintE2(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Crnti) > 0 {
		i -= len(m.Crnti)
		copy(dAtA[i:], m.Crnti)
		i = encodeVarintE2(dAtA, i, uint64(len(m.Crnti)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *E2ScellAddStatusAttribute) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *E2ScellAddStatusAttribute) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *E2ScellAddStatusAttribute) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Status) > 0 {
		dAtA107 := make([]byte, len(m.Status)*10)
		var j106 int
		for _, num := range m.Status {
			for num >= 1<<7 {
				dAtA107[j106] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j106++
			}
			dAtA107[j106] = uint8(num)
			j106++
		}
		i -= j106
		copy(dAtA[i:], dAtA107[:j106])
		i = encodeVarintE2(dAtA, i, uint64(j106))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ScellsInd) > 0 {
		for iNdEx := len(m.ScellsInd) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ScellsInd[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintE2(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Ecgi != nil {
		{
			size, err := m.Ecgi.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintE2(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Crnti) > 0 {
		i -= len(m.Crnti)
		copy(dAtA[i:], m.Crnti)
		i = encodeVarintE2(dAtA, i, uint64(len(m.Crnti)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *E2ScellDeleteAttribute) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *E2ScellDeleteAttribute) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *E2ScellDeleteAttribute) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ScellsInd) > 0 {
		for iNdEx := len(m.ScellsInd) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ScellsInd[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintE2(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Ecgi != nil {
		{
			size, err := m.Ecgi.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintE2(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Crnti) > 0 {
		i -= len(m.Crnti)
		copy(dAtA[i:], m.Crnti)
		i = encodeVarintE2(dAtA, i, uint64(len(m.Crnti)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *E2SeNBAddAttribute) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *E2SeNBAddAttribute) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *E2SeNBAddAttribute) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SEcgi != nil {
		{
			size, err := m.SEcgi.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintE2(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.MEcgi != nil {
		{
			size, err := m.MEcgi.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintE2(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Crnti) > 0 {
		i -= len(m.Crnti)
		copy(dAtA[i:], m.Crnti)
		i = encodeVarintE2(dAtA, i, uint64(len(m.Crnti)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *E2SeNBAddStatusAttribute) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *E2SeNBAddStatusAttribute) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *E2SeNBAddStatusAttribute) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		i = encodeVarintE2(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x18
	}
	if m.Ecgi != nil {
		{
			size, err := m.Ecgi.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintE2(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Crnti) > 0 {
		i -= len(m.Crnti)
		copy(dAtA[i:], m.Crnti)
		i = encodeVarintE2(dAtA, i, uint64(len(m.Crnti)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *E2SeNBDeleteAttribute) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *E2SeNBDeleteAttribute) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *E2SeNBDeleteAttribute) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SEcgi != nil {
		{
			size, err := m.SEcgi.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintE2(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.MEcgi != nil {
		{
			size, err := m.MEcgi.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintE2(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Crnti) > 0 {
		i -= len(m.Crnti)
		copy(dAtA[i:], m.Crnti)
		i = encodeVarintE2(dAtA, i, uint64(len(m.Crnti)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *E2TrafficSplitPercentage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *E2TrafficSplitPercentage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *E2TrafficSplitPercentage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TrafficPercentageUl) > 0 {
		i -= len(m.TrafficPercentageUl)
		copy(dAtA[i:], m.TrafficPercentageUl)
		i = encodeVarintE2(dAtA, i, uint64(len(m.TrafficPercentageUl)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.TrafficPercentageDl) > 0 {
		i -= len(m.TrafficPercentageDl)
		copy(dAtA[i:], m.TrafficPercentageDl)
		i = encodeVarintE2(dAtA, i, uint64(len(m.TrafficPercentageDl)))
		i--
		dAtA[i] = 0x12
	}
	if m.Ecgi != nil {
		{
			size, err := m.Ecgi.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintE2(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *E2TrafficSplitConfigAttribute) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *E2TrafficSplitConfigAttribute) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *E2TrafficSplitConfigAttribute) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TrafficSplitPercentage) > 0 {
		for iNdEx := len(m.TrafficSplitPercentage) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TrafficSplitPercentage[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintE2(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Ecgi != nil {
		{
			size, err := m.Ecgi.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintE2(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Crnti) > 0 {
		i -= len(m.Crnti)
		copy(dAtA[i:], m.Crnti)
		i = encodeVarintE2(dAtA, i, uint64(len(m.Crnti)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintE2(dAtA []byte, offset int, v uint64) int {
	offset -= sovE2(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *E2MessageHeader) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MessageType != 0 {
		n += 1 + sovE2(uint64(m.MessageType))
	}
	return n
}

func (m *E2MessagePayload) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Attributes != nil {
		n += m.Attributes.Size()
	}
	return n
}

func (m *E2MessagePayload_CellConfigRequestAttribute) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CellConfigRequestAttribute != nil {
		l = m.CellConfigRequestAttribute.Size()
		n += 1 + l + sovE2(uint64(l))
	}
	return n
}
func (m *E2MessagePayload_CellConfigReportAttribute) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CellConfigReportAttribute != nil {
		l = m.CellConfigReportAttribute.Size()
		n += 1 + l + sovE2(uint64(l))
	}
	return n
}
func (m *E2MessagePayload_UEAdmissionRequestAttribute) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UEAdmissionRequestAttribute != nil {
		l = m.UEAdmissionRequestAttribute.Size()
		n += 1 + l + sovE2(uint64(l))
	}
	return n
}
func (m *E2MessagePayload_UEAdmissionResponseAttribute) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UEAdmissionResponseAttribute != nil {
		l = m.UEAdmissionResponseAttribute.Size()
		n += 1 + l + sovE2(uint64(l))
	}
	return n
}
func (m *E2MessagePayload_UEAdmissionStatusAttribute) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UEAdmissionStatusAttribute != nil {
		l = m.UEAdmissionStatusAttribute.Size()
		n += 1 + l + sovE2(uint64(l))
	}
	return n
}
func (m *E2MessagePayload_UEContextUpdateAttribute) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UEContextUpdateAttribute != nil {
		l = m.UEContextUpdateAttribute.Size()
		n += 1 + l + sovE2(uint64(l))
	}
	return n
}
func (m *E2MessagePayload_UEReconfigIndAttribute) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UEReconfigIndAttribute != nil {
		l = m.UEReconfigIndAttribute.Size()
		n += 1 + l + sovE2(uint64(l))
	}
	return n
}
func (m *E2MessagePayload_UEReleaseIndAttribute) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UEReleaseIndAttribute != nil {
		l = m.UEReleaseIndAttribute.Size()
		n += 1 + l + sovE2(uint64(l))
	}
	return n
}
func (m *E2MessagePayload_BearerAdmissionRequestAttribute) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BearerAdmissionRequestAttribute != nil {
		l = m.BearerAdmissionRequestAttribute.Size()
		n += 1 + l + sovE2(uint64(l))
	}
	return n
}
func (m *E2MessagePayload_BearerAdmissionResponseAttribute) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BearerAdmissionResponseAttribute != nil {
		l = m.BearerAdmissionResponseAttribute.Size()
		n += 1 + l + sovE2(uint64(l))
	}
	return n
}
func (m *E2MessagePayload_BearerAdmissionStatusAttribute) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BearerAdmissionStatusAttribute != nil {
		l = m.BearerAdmissionStatusAttribute.Size()
		n += 1 + l + sovE2(uint64(l))
	}
	return n
}
func (m *E2MessagePayload_BearerReleaseIndAttribute) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BearerReleaseIndAttribute != nil {
		l = m.BearerReleaseIndAttribute.Size()
		n += 1 + l + sovE2(uint64(l))
	}
	return n
}
func (m *E2MessagePayload_HORequestAttribute) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HORequestAttribute != nil {
		l = m.HORequestAttribute.Size()
		n += 1 + l + sovE2(uint64(l))
	}
	return n
}
func (m *E2MessagePayload_HOFailureAttribute) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HOFailureAttribute != nil {
		l = m.HOFailureAttribute.Size()
		n += 1 + l + sovE2(uint64(l))
	}
	return n
}
func (m *E2MessagePayload_HOCompleteAttribute) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HOCompleteAttribute != nil {
		l = m.HOCompleteAttribute.Size()
		n += 1 + l + sovE2(uint64(l))
	}
	return n
}
func (m *E2MessagePayload_HOCauseAttribute) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HOCauseAttribute != nil {
		l = m.HOCauseAttribute.Size()
		n += 2 + l + sovE2(uint64(l))
	}
	return n
}
func (m *E2MessagePayload_RRCMeasConfigAttribute) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RRCMeasConfigAttribute != nil {
		l = m.RRCMeasConfigAttribute.Size()
		n += 2 + l + sovE2(uint64(l))
	}
	return n
}
func (m *E2MessagePayload_RxSigMeasReportAttribute) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RxSigMeasReportAttribute != nil {
		l = m.RxSigMeasReportAttribute.Size()
		n += 2 + l + sovE2(uint64(l))
	}
	return n
}
func (m *E2MessagePayload_L2MeasConfigAttribute) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.L2MeasConfigAttribute != nil {
		l = m.L2MeasConfigAttribute.Size()
		n += 2 + l + sovE2(uint64(l))
	}
	return n
}
func (m *E2MessagePayload_RadioMeasReportPerU) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RadioMeasReportPerU != nil {
		l = m.RadioMeasReportPerU.Size()
		n += 2 + l + sovE2(uint64(l))
	}
	return n
}
func (m *E2MessagePayload_RadioMeasReportPerCellAttribute) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RadioMeasReportPerCellAttribute != nil {
		l = m.RadioMeasReportPerCellAttribute.Size()
		n += 2 + l + sovE2(uint64(l))
	}
	return n
}
func (m *E2MessagePayload_SchedMeasReportPerUEAttribute) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SchedMeasReportPerUEAttribute != nil {
		l = m.SchedMeasReportPerUEAttribute.Size()
		n += 2 + l + sovE2(uint64(l))
	}
	return n
}
func (m *E2MessagePayload_SchedMeasReportPerCellAttribute) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SchedMeasReportPerCellAttribute != nil {
		l = m.SchedMeasReportPerCellAttribute.Size()
		n += 2 + l + sovE2(uint64(l))
	}
	return n
}
func (m *E2MessagePayload_PDCPMeasReportPerUeAttribute) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PDCPMeasReportPerUeAttribute != nil {
		l = m.PDCPMeasReportPerUeAttribute.Size()
		n += 2 + l + sovE2(uint64(l))
	}
	return n
}
func (m *E2MessagePayload_RRMConfigAttribute) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RRMConfigAttribute != nil {
		l = m.RRMConfigAttribute.Size()
		n += 2 + l + sovE2(uint64(l))
	}
	return n
}
func (m *E2MessagePayload_RRMConfigStatusAttribute) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RRMConfigStatusAttribute != nil {
		l = m.RRMConfigStatusAttribute.Size()
		n += 2 + l + sovE2(uint64(l))
	}
	return n
}
func (m *E2MessagePayload_UECapabilityEnquiryAttribute) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UECapabilityEnquiryAttribute != nil {
		l = m.UECapabilityEnquiryAttribute.Size()
		n += 2 + l + sovE2(uint64(l))
	}
	return n
}
func (m *E2MessagePayload_UECapabilityInfoAttribute) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UECapabilityInfoAttribute != nil {
		l = m.UECapabilityInfoAttribute.Size()
		n += 2 + l + sovE2(uint64(l))
	}
	return n
}
func (m *E2MessagePayload_ScellAddAttribute) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ScellAddAttribute != nil {
		l = m.ScellAddAttribute.Size()
		n += 2 + l + sovE2(uint64(l))
	}
	return n
}
func (m *E2MessagePayload_ScellAddStatusAttribute) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ScellAddStatusAttribute != nil {
		l = m.ScellAddStatusAttribute.Size()
		n += 2 + l + sovE2(uint64(l))
	}
	return n
}
func (m *E2MessagePayload_ScellDeleteAttribute) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ScellDeleteAttribute != nil {
		l = m.ScellDeleteAttribute.Size()
		n += 2 + l + sovE2(uint64(l))
	}
	return n
}
func (m *E2MessagePayload_SeNBAddAttribute) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SeNBAddAttribute != nil {
		l = m.SeNBAddAttribute.Size()
		n += 2 + l + sovE2(uint64(l))
	}
	return n
}
func (m *E2MessagePayload_SeNBAddStatusAttribute) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SeNBAddStatusAttribute != nil {
		l = m.SeNBAddStatusAttribute.Size()
		n += 2 + l + sovE2(uint64(l))
	}
	return n
}
func (m *E2MessagePayload_SeNBDeleteAttribute) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SeNBDeleteAttribute != nil {
		l = m.SeNBDeleteAttribute.Size()
		n += 2 + l + sovE2(uint64(l))
	}
	return n
}
func (m *E2MessagePayload_TrafficSplitConfigAttribute) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TrafficSplitConfigAttribute != nil {
		l = m.TrafficSplitConfigAttribute.Size()
		n += 2 + l + sovE2(uint64(l))
	}
	return n
}
func (m *E2Message) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovE2(uint64(l))
	}
	if m.Payload != nil {
		l = m.Payload.Size()
		n += 1 + l + sovE2(uint64(l))
	}
	return n
}

func (m *ServiceResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ResultCode != 0 {
		n += 1 + sovE2(uint64(m.ResultCode))
	}
	l = len(m.ResultMessage)
	if l > 0 {
		n += 1 + l + sovE2(uint64(l))
	}
	return n
}

func (m *E2ECGI) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PlmnId)
	if l > 0 {
		n += 1 + l + sovE2(uint64(l))
	}
	l = len(m.Ecid)
	if l > 0 {
		n += 1 + l + sovE2(uint64(l))
	}
	return n
}

func (m *E2CandScell) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Pci)
	if l > 0 {
		n += 1 + l + sovE2(uint64(l))
	}
	l = len(m.EarfcnDl)
	if l > 0 {
		n += 1 + l + sovE2(uint64(l))
	}
	return n
}

func (m *E2CellConfigRequestAttribute) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Ecgi != nil {
		l = m.Ecgi.Size()
		n += 1 + l + sovE2(uint64(l))
	}
	return n
}

func (m *E2CellConfigReportAttribute) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Ecgi != nil {
		l = m.Ecgi.Size()
		n += 1 + l + sovE2(uint64(l))
	}
	l = len(m.Pci)
	if l > 0 {
		n += 1 + l + sovE2(uint64(l))
	}
	if len(m.CandScells) > 0 {
		for _, e := range m.CandScells {
			l = e.Size()
			n += 1 + l + sovE2(uint64(l))
		}
	}
	l = len(m.EarfcnDl)
	if l > 0 {
		n += 1 + l + sovE2(uint64(l))
	}
	l = len(m.EarfcnUl)
	if l > 0 {
		n += 1 + l + sovE2(uint64(l))
	}
	l = len(m.RbsPerTtiDl)
	if l > 0 {
		n += 1 + l + sovE2(uint64(l))
	}
	l = len(m.RbsPerTtiUl)
	if l > 0 {
		n += 1 + l + sovE2(uint64(l))
	}
	l = len(m.NumTxAntenna)
	if l > 0 {
		n += 1 + l + sovE2(uint64(l))
	}
	l = len(m.DuplexMode)
	if l > 0 {
		n += 1 + l + sovE2(uint64(l))
	}
	l = len(m.MaxNumConnectedUes)
	if l > 0 {
		n += 1 + l + sovE2(uint64(l))
	}
	l = len(m.MaxNumConnectedBearers)
	if l > 0 {
		n += 1 + l + sovE2(uint64(l))
	}
	l = len(m.MaxNumUesSchedPerTtiDl)
	if l > 0 {
		n += 1 + l + sovE2(uint64(l))
	}
	l = len(m.MaxNumUesSchedPerTtiUl)
	if l > 0 {
		n += 1 + l + sovE2(uint64(l))
	}
	l = len(m.DlfsSchedEnable)
	if l > 0 {
		n += 1 + l + sovE2(uint64(l))
	}
	return n
}

func (m *E2UEAdmissionRequestAttribute) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Crnti)
	if l > 0 {
		n += 1 + l + sovE2(uint64(l))
	}
	if m.Ecgi != nil {
		l = m.Ecgi.Size()
		n += 1 + l + sovE2(uint64(l))
	}
	if m.AdmissionEstCause != 0 {
		n += 1 + sovE2(uint64(m.AdmissionEstCause))
	}
	return n
}

func (m *E2UEAdmissionResponseAttribute) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Crnti)
	if l > 0 {
		n += 1 + l + sovE2(uint64(l))
	}
	if m.Ecgi != nil {
		l = m.Ecgi.Size()
		n += 1 + l + sovE2(uint64(l))
	}
	if m.AdmissionEstResponse != 0 {
		n += 1 + sovE2(uint64(m.AdmissionEstResponse))
	}
	return n
}

func (m *E2UEAdmissionStatusAttribute) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Crnti)
	if l > 0 {
		n += 1 + l + sovE2(uint64(l))
	}
	if m.Ecgi != nil {
		l = m.Ecgi.Size()
		n += 1 + l + sovE2(uint64(l))
	}
	if m.AdmissionEstStatus != 0 {
		n += 1 + sovE2(uint64(m.AdmissionEstStatus))
	}
	return n
}

func (m *E2UEContextUpdateAttribute) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Crnti)
	if l > 0 {
		n += 1 + l + sovE2(uint64(l))
	}
	if m.Ecgi != nil {
		l = m.Ecgi.Size()
		n += 1 + l + sovE2(uint64(l))
	}
	l = len(m.MmeUeS1ApId)
	if l > 0 {
		n += 1 + l + sovE2(uint64(l))
	}
	l = len(m.EnbUeS1ApId)
	if l > 0 {
		n += 1 + l + sovE2(uint64(l))
	}
	l = len(m.Imsi)
	if l > 0 {
		n += 1 + l + sovE2(uint64(l))
	}
	return n
}

func (m *E2UEReconfigIndAttribute) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CrntiOld)
	if l > 0 {
		n += 1 + l + sovE2(uint64(l))
	}
	if m.Ecgi != nil {
		l = m.Ecgi.Size()
		n += 1 + l + sovE2(uint64(l))
	}
	l = len(m.CrntiNew)
	if l > 0 {
		n += 1 + l + sovE2(uint64(l))
	}
	if m.ReconfigCause != 0 {
		n += 1 + sovE2(uint64(m.ReconfigCause))
	}
	return n
}

func (m *E2UEReleaseIndAttribute) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Crnti)
	if l > 0 {
		n += 1 + l + sovE2(uint64(l))
	}
	if m.Ecgi != nil {
		l = m.Ecgi.Size()
		n += 1 + l + sovE2(uint64(l))
	}
	if m.ReleaseCause != 0 {
		n += 1 + sovE2(uint64(m.ReleaseCause))
	}
	return n
}

func (m *E2UEAMBR) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AmbrDl)
	if l > 0 {
		n += 1 + l + sovE2(uint64(l))
	}
	l = len(m.AmbrUl)
	if l > 0 {
		n += 1 + l + sovE2(uint64(l))
	}
	return n
}

func (m *E2ERABParamsItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovE2(uint64(l))
	}
	if m.Direction != 0 {
		n += 1 + sovE2(uint64(m.Direction))
	}
	if m.Type != 0 {
		n += 1 + sovE2(uint64(m.Type))
	}
	l = len(m.Qci)
	if l > 0 {
		n += 1 + l + sovE2(uint64(l))
	}
	l = len(m.Arp)
	if l > 0 {
		n += 1 + l + sovE2(uint64(l))
	}
	l = len(m.GbrDl)
	if l > 0 {
		n += 1 + l + sovE2(uint64(l))
	}
	l = len(m.GbrUl)
	if l > 0 {
		n += 1 + l + sovE2(uint64(l))
	}
	l = len(m.MbrDl)
	if l > 0 {
		n += 1 + l + sovE2(uint64(l))
	}
	l = len(m.MbrUl)
	if l > 0 {
		n += 1 + l + sovE2(uint64(l))
	}
	return n
}

func (m *E2ERABResponseItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovE2(uint64(l))
	}
	if m.Decision != 0 {
		n += 1 + sovE2(uint64(m.Decision))
	}
	return n
}

func (m *E2BearerAdmissionRequestAttribute) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Crnti)
	if l > 0 {
		n += 1 + l + sovE2(uint64(l))
	}
	if m.Ecgi != nil {
		l = m.Ecgi.Size()
		n += 1 + l + sovE2(uint64(l))
	}
	if m.UeAmbr != nil {
		l = m.UeAmbr.Size()
		n += 1 + l + sovE2(uint64(l))
	}
	l = len(m.NumErabsList)
	if l > 0 {
		n += 1 + l + sovE2(uint64(l))
	}
	if len(m.ErabsParams) > 0 {
		for _, e := range m.ErabsParams {
			l = e.Size()
			n += 1 + l + sovE2(uint64(l))
		}
	}
	return n
}

func (m *E2BearerAdmissionResponseAttribute) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Crnti)
	if l > 0 {
		n += 1 + l + sovE2(uint64(l))
	}
	if m.Ecgi != nil {
		l = m.Ecgi.Size()
		n += 1 + l + sovE2(uint64(l))
	}
	l = len(m.NumErabsList)
	if l > 0 {
		n += 1 + l + sovE2(uint64(l))
	}
	if len(m.ErabResponse) > 0 {
		for _, e := range m.ErabResponse {
			l = e.Size()
			n += 1 + l + sovE2(uint64(l))
		}
	}
	return n
}

func (m *E2BearerAdmissionStatusAttribute) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Crnti)
	if l > 0 {
		n += 1 + l + sovE2(uint64(l))
	}
	if m.Ecgi != nil {
		l = m.Ecgi.Size()
		n += 1 + l + sovE2(uint64(l))
	}
	l = len(m.NumErabsList)
	if l > 0 {
		n += 1 + l + sovE2(uint64(l))
	}
	if len(m.ErabStatus) > 0 {
		for _, e := range m.ErabStatus {
			l = e.Size()
			n += 1 + l + sovE2(uint64(l))
		}
	}
	return n
}

func (m *E2BearerReleaseIndAttribute) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Crnti)
	if l > 0 {
		n += 1 + l + sovE2(uint64(l))
	}
	if m.Ecgi != nil {
		l = m.Ecgi.Size()
		n += 1 + l + sovE2(uint64(l))
	}
	l = len(m.NumErabsList)
	if l > 0 {
		n += 1 + l + sovE2(uint64(l))
	}
	if len(m.ErabIds) > 0 {
		for _, s := range m.ErabIds {
			l = len(s)
			n += 1 + l + sovE2(uint64(l))
		}
	}
	return n
}

func (m *E2HORequestAttribute) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Crnti)
	if l > 0 {
		n += 1 + l + sovE2(uint64(l))
	}
	if m.EcgiS != nil {
		l = m.EcgiS.Size()
		n += 1 + l + sovE2(uint64(l))
	}
	if m.EcgiT != nil {
		l = m.EcgiT.Size()
		n += 1 + l + sovE2(uint64(l))
	}
	return n
}

func (m *E2HOFailureAttribute) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Crnti)
	if l > 0 {
		n += 1 + l + sovE2(uint64(l))
	}
	if m.EcgiS != nil {
		l = m.EcgiS.Size()
		n += 1 + l + sovE2(uint64(l))
	}
	l = len(m.HoFailureCause)
	if l > 0 {
		n += 1 + l + sovE2(uint64(l))
	}
	return n
}

func (m *E2HOCompleteAttribute) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CrntiNew)
	if l > 0 {
		n += 1 + l + sovE2(uint64(l))
	}
	if m.EcgiS != nil {
		l = m.EcgiS.Size()
		n += 1 + l + sovE2(uint64(l))
	}
	if m.EcgiT != nil {
		l = m.EcgiT.Size()
		n += 1 + l + sovE2(uint64(l))
	}
	return n
}

func (m *E2HOCauseAttribute) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Crnti)
	if l > 0 {
		n += 1 + l + sovE2(uint64(l))
	}
	if m.EcgiS != nil {
		l = m.EcgiS.Size()
		n += 1 + l + sovE2(uint64(l))
	}
	if m.EcgiT != nil {
		l = m.EcgiT.Size()
		n += 1 + l + sovE2(uint64(l))
	}
	l = len(m.HoCause)
	if l > 0 {
		n += 1 + l + sovE2(uint64(l))
	}
	if len(m.HoTrigger) > 0 {
		for _, e := range m.HoTrigger {
			l = e.Size()
			n += 1 + l + sovE2(uint64(l))
		}
	}
	return n
}

func (m *E2MeasCell) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Pci)
	if l > 0 {
		n += 1 + l + sovE2(uint64(l))
	}
	l = len(m.CellIndividualOffset)
	if l > 0 {
		n += 1 + l + sovE2(uint64(l))
	}
	return n
}

func (m *E2MeasObject) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DlFreq)
	if l > 0 {
		n += 1 + l + sovE2(uint64(l))
	}
	if len(m.MeasCells) > 0 {
		for _, e := range m.MeasCells {
			l = e.Size()
			n += 1 + l + sovE2(uint64(l))
		}
	}
	return n
}

func (m *E2ReportParamChoice) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Choice != nil {
		n += m.Choice.Size()
	}
	return n
}

func (m *E2ReportParamChoice_PerParam) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PerParam != nil {
		l = m.PerParam.Size()
		n += 1 + l + sovE2(uint64(l))
	}
	return n
}
func (m *E2ReportParamChoice_A1Param) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.A1Param != nil {
		l = m.A1Param.Size()
		n += 1 + l + sovE2(uint64(l))
	}
	return n
}
func (m *E2ReportParamChoice_A2Param) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.A2Param != nil {
		l = m.A2Param.Size()
		n += 1 + l + sovE2(uint64(l))
	}
	return n
}
func (m *E2ReportParamChoice_A3Param) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.A3Param != nil {
		l = m.A3Param.Size()
		n += 1 + l + sovE2(uint64(l))
	}
	return n
}
func (m *E2ReportParamChoice_A4Param) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.A4Param != nil {
		l = m.A4Param.Size()
		n += 1 + l + sovE2(uint64(l))
	}
	return n
}
func (m *E2ReportParamChoice_A5Param) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.A5Param != nil {
		l = m.A5Param.Size()
		n += 1 + l + sovE2(uint64(l))
	}
	return n
}
func (m *E2ReportParamChoice_A6Param) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.A6Param != nil {
		l = m.A6Param.Size()
		n += 1 + l + sovE2(uint64(l))
	}
	return n
}
func (m *E2ThresholdEUTRAChoice) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Choice != nil {
		n += m.Choice.Size()
	}
	return n
}

func (m *E2ThresholdEUTRAChoice_ThresholdRSRP) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ThresholdRSRP)
	n += 1 + l + sovE2(uint64(l))
	return n
}
func (m *E2ThresholdEUTRAChoice_ThresholdRSRQ) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ThresholdRSRQ)
	n += 1 + l + sovE2(uint64(l))
	return n
}
func (m *E2ThreasholdEUTRA) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Present != 0 {
		n += 1 + sovE2(uint64(m.Present))
	}
	if m.Choice != nil {
		l = m.Choice.Size()
		n += 1 + l + sovE2(uint64(l))
	}
	return n
}

func (m *E2PerParam) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ReportIntervalMs != 0 {
		n += 1 + sovE2(uint64(m.ReportIntervalMs))
	}
	return n
}

func (m *E2A1Param) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.A1Threshold != nil {
		l = m.A1Threshold.Size()
		n += 1 + l + sovE2(uint64(l))
	}
	return n
}

func (m *E2A2Param) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.A2Threshold != nil {
		l = m.A2Threshold.Size()
		n += 1 + l + sovE2(uint64(l))
	}
	return n
}

func (m *E2A3Param) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.A3Offset)
	if l > 0 {
		n += 1 + l + sovE2(uint64(l))
	}
	return n
}

func (m *E2A4Param) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.A4Threshold != nil {
		l = m.A4Threshold.Size()
		n += 1 + l + sovE2(uint64(l))
	}
	return n
}

func (m *E2A5Param) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.A5Threshold1 != nil {
		l = m.A5Threshold1.Size()
		n += 1 + l + sovE2(uint64(l))
	}
	if m.A5Threshold2 != nil {
		l = m.A5Threshold2.Size()
		n += 1 + l + sovE2(uint64(l))
	}
	return n
}

func (m *E2A6Param) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.A6Offset)
	if l > 0 {
		n += 1 + l + sovE2(uint64(l))
	}
	return n
}

func (m *E2ReportParam) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Present != 0 {
		n += 1 + sovE2(uint64(m.Present))
	}
	if m.Choice != nil {
		l = m.Choice.Size()
		n += 1 + l + sovE2(uint64(l))
	}
	l = len(m.Hysteresis)
	if l > 0 {
		n += 1 + l + sovE2(uint64(l))
	}
	if m.Timetotrigger != 0 {
		n += 1 + sovE2(uint64(m.Timetotrigger))
	}
	return n
}

func (m *E2ReportConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ReportParams != nil {
		l = m.ReportParams.Size()
		n += 1 + l + sovE2(uint64(l))
	}
	if m.TriggerQuantity != 0 {
		n += 1 + sovE2(uint64(m.TriggerQuantity))
	}
	if m.ReportQuality != 0 {
		n += 1 + sovE2(uint64(m.ReportQuality))
	}
	return n
}

func (m *E2AddMeasId) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.AddMeasId) > 0 {
		for _, s := range m.AddMeasId {
			l = len(s)
			n += 1 + l + sovE2(uint64(l))
		}
	}
	return n
}

func (m *E2DelMeasId) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.DelMeasId) > 0 {
		for _, s := range m.DelMeasId {
			l = len(s)
			n += 1 + l + sovE2(uint64(l))
		}
	}
	return n
}

func (m *E2MeasIdActionChoice) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Choice != nil {
		n += m.Choice.Size()
	}
	return n
}

func (m *E2MeasIdActionChoice_AddMeasId) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AddMeasId != nil {
		l = m.AddMeasId.Size()
		n += 1 + l + sovE2(uint64(l))
	}
	return n
}
func (m *E2MeasIdActionChoice_DelMeasId) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DelMeasId != nil {
		l = m.DelMeasId.Size()
		n += 1 + l + sovE2(uint64(l))
	}
	return n
}
func (m *E2MeasIdActionChoice_Hototarget) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Hototarget)
	n += 1 + l + sovE2(uint64(l))
	return n
}
func (m *E2MeasIdAction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Present != 0 {
		n += 1 + sovE2(uint64(m.Present))
	}
	if m.Choice != nil {
		l = m.Choice.Size()
		n += 1 + l + sovE2(uint64(l))
	}
	return n
}

func (m *E2MeasID) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MeasObjectId)
	if l > 0 {
		n += 1 + l + sovE2(uint64(l))
	}
	l = len(m.ReportConfigId)
	if l > 0 {
		n += 1 + l + sovE2(uint64(l))
	}
	if m.Action != nil {
		l = m.Action.Size()
		n += 1 + l + sovE2(uint64(l))
	}
	return n
}

func (m *E2RRCMeasConfigAttribute) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Ecgi != nil {
		l = m.Ecgi.Size()
		n += 1 + l + sovE2(uint64(l))
	}
	if len(m.Crnti) > 0 {
		for _, s := range m.Crnti {
			l = len(s)
			n += 1 + l + sovE2(uint64(l))
		}
	}
	if len(m.MeasObjects) > 0 {
		for _, e := range m.MeasObjects {
			l = e.Size()
			n += 1 + l + sovE2(uint64(l))
		}
	}
	if len(m.ReportConfigs) > 0 {
		for _, e := range m.ReportConfigs {
			l = e.Size()
			n += 1 + l + sovE2(uint64(l))
		}
	}
	if len(m.MeasIds) > 0 {
		for _, e := range m.MeasIds {
			l = e.Size()
			n += 1 + l + sovE2(uint64(l))
		}
	}
	return n
}

func (m *E2PCIARFCN) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Pci)
	if l > 0 {
		n += 1 + l + sovE2(uint64(l))
	}
	l = len(m.EarfcnDl)
	if l > 0 {
		n += 1 + l + sovE2(uint64(l))
	}
	return n
}

func (m *E2RXSigReport) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PciArfcn != nil {
		l = m.PciArfcn.Size()
		n += 1 + l + sovE2(uint64(l))
	}
	if m.Ecgi != nil {
		l = m.Ecgi.Size()
		n += 1 + l + sovE2(uint64(l))
	}
	l = len(m.Rsrp)
	if l > 0 {
		n += 1 + l + sovE2(uint64(l))
	}
	l = len(m.Rsrq)
	if l > 0 {
		n += 1 + l + sovE2(uint64(l))
	}
	return n
}

func (m *E2RxSigMeasReportAttribute) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Crnti) > 0 {
		for _, s := range m.Crnti {
			l = len(s)
			n += 1 + l + sovE2(uint64(l))
		}
	}
	if m.Ecgi != nil {
		l = m.Ecgi.Size()
		n += 1 + l + sovE2(uint64(l))
	}
	if len(m.CellMeasReport) > 0 {
		for _, e := range m.CellMeasReport {
			l = e.Size()
			n += 1 + l + sovE2(uint64(l))
		}
	}
	return n
}

func (m *E2L2ReportInterval) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TRadioMeasReportPerUe != 0 {
		n += 1 + sovE2(uint64(m.TRadioMeasReportPerUe))
	}
	if m.TRadioMeasReportPerCell != 0 {
		n += 1 + sovE2(uint64(m.TRadioMeasReportPerCell))
	}
	if m.TSchedMeasReportPerUe != 0 {
		n += 1 + sovE2(uint64(m.TSchedMeasReportPerUe))
	}
	if m.TSchedMeasReportPerCell != 0 {
		n += 1 + sovE2(uint64(m.TSchedMeasReportPerCell))
	}
	if m.TPdcpMeasReportPerUe != 0 {
		n += 1 + sovE2(uint64(m.TPdcpMeasReportPerUe))
	}
	return n
}

func (m *E2L2MeasConfigAttribute) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Ecgi != nil {
		l = m.Ecgi.Size()
		n += 1 + l + sovE2(uint64(l))
	}
	if len(m.Crnti) > 0 {
		for _, s := range m.Crnti {
			l = len(s)
			n += 1 + l + sovE2(uint64(l))
		}
	}
	if m.ReportIntervals != nil {
		l = m.ReportIntervals.Size()
		n += 1 + l + sovE2(uint64(l))
	}
	return n
}

func (m *E2RadioRepPerServCell) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Ecgi != nil {
		l = m.Ecgi.Size()
		n += 1 + l + sovE2(uint64(l))
	}
	if len(m.CqiHist) > 0 {
		for _, s := range m.CqiHist {
			l = len(s)
			n += 1 + l + sovE2(uint64(l))
		}
	}
	if len(m.RiHist) > 0 {
		for _, s := range m.RiHist {
			l = len(s)
			n += 1 + l + sovE2(uint64(l))
		}
	}
	if len(m.PuschSinrHist) > 0 {
		for _, s := range m.PuschSinrHist {
			l = len(s)
			n += 1 + l + sovE2(uint64(l))
		}
	}
	if len(m.PucchSinrHist) > 0 {
		for _, s := range m.PucchSinrHist {
			l = len(s)
			n += 1 + l + sovE2(uint64(l))
		}
	}
	return n
}

func (m *E2RadioMeasReportPerUEAttribute) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Ecgi != nil {
		l = m.Ecgi.Size()
		n += 1 + l + sovE2(uint64(l))
	}
	l = len(m.Crnti)
	if l > 0 {
		n += 1 + l + sovE2(uint64(l))
	}
	if len(m.RadioReportServCells) > 0 {
		for _, e := range m.RadioReportServCells {
			l = e.Size()
			n += 1 + l + sovE2(uint64(l))
		}
	}
	return n
}

func (m *E2RadioMeasReportPerCellAttribute) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Ecgi != nil {
		l = m.Ecgi.Size()
		n += 1 + l + sovE2(uint64(l))
	}
	if len(m.PuschIntfPwrHist) > 0 {
		for _, s := range m.PuschIntfPwrHist {
			l = len(s)
			n += 1 + l + sovE2(uint64(l))
		}
	}
	if len(m.PucchIntfPowerHist) > 0 {
		for _, s := range m.PucchIntfPowerHist {
			l = len(s)
			n += 1 + l + sovE2(uint64(l))
		}
	}
	return n
}

func (m *E2PRBUsage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.PrbUsageDl) > 0 {
		for _, s := range m.PrbUsageDl {
			l = len(s)
			n += 1 + l + sovE2(uint64(l))
		}
	}
	if len(m.PrbUsageUl) > 0 {
		for _, s := range m.PrbUsageUl {
			l = len(s)
			n += 1 + l + sovE2(uint64(l))
		}
	}
	return n
}

func (m *E2SchedMeasRepPerServCell) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Ecgi != nil {
		l = m.Ecgi.Size()
		n += 1 + l + sovE2(uint64(l))
	}
	if len(m.QciVals) > 0 {
		for _, s := range m.QciVals {
			l = len(s)
			n += 1 + l + sovE2(uint64(l))
		}
	}
	if m.PrbUsage != nil {
		l = m.PrbUsage.Size()
		n += 1 + l + sovE2(uint64(l))
	}
	if len(m.McsDl) > 0 {
		for _, s := range m.McsDl {
			l = len(s)
			n += 1 + l + sovE2(uint64(l))
		}
	}
	if len(m.NumSchedTtisDl) > 0 {
		for _, s := range m.NumSchedTtisDl {
			l = len(s)
			n += 1 + l + sovE2(uint64(l))
		}
	}
	if len(m.McsUl) > 0 {
		for _, s := range m.McsUl {
			l = len(s)
			n += 1 + l + sovE2(uint64(l))
		}
	}
	if len(m.NumSchedTtisUl) > 0 {
		for _, s := range m.NumSchedTtisUl {
			l = len(s)
			n += 1 + l + sovE2(uint64(l))
		}
	}
	if len(m.RankDl1) > 0 {
		for _, s := range m.RankDl1 {
			l = len(s)
			n += 1 + l + sovE2(uint64(l))
		}
	}
	if len(m.RankDl2) > 0 {
		for _, s := range m.RankDl2 {
			l = len(s)
			n += 1 + l + sovE2(uint64(l))
		}
	}
	return n
}

func (m *E2SchedMeasReportPerUEAttribute) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Ecgi != nil {
		l = m.Ecgi.Size()
		n += 1 + l + sovE2(uint64(l))
	}
	l = len(m.Crnti)
	if l > 0 {
		n += 1 + l + sovE2(uint64(l))
	}
	if len(m.SchedReportServCells) > 0 {
		for _, e := range m.SchedReportServCells {
			l = e.Size()
			n += 1 + l + sovE2(uint64(l))
		}
	}
	return n
}

func (m *E2SchedMeasReportPerCellAttribute) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Ecgi != nil {
		l = m.Ecgi.Size()
		n += 1 + l + sovE2(uint64(l))
	}
	if len(m.QciVals) > 0 {
		for _, s := range m.QciVals {
			l = len(s)
			n += 1 + l + sovE2(uint64(l))
		}
	}
	if m.PrbUsagePcell != nil {
		l = m.PrbUsagePcell.Size()
		n += 1 + l + sovE2(uint64(l))
	}
	if m.PrbUsageScell != nil {
		l = m.PrbUsageScell.Size()
		n += 1 + l + sovE2(uint64(l))
	}
	return n
}

func (m *E2PDCPMeasReportPerUeAttribute) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Ecgi != nil {
		l = m.Ecgi.Size()
		n += 1 + l + sovE2(uint64(l))
	}
	l = len(m.Crnti)
	if l > 0 {
		n += 1 + l + sovE2(uint64(l))
	}
	if len(m.QciVals) > 0 {
		for _, s := range m.QciVals {
			l = len(s)
			n += 1 + l + sovE2(uint64(l))
		}
	}
	if len(m.DataVolDl) > 0 {
		for _, s := range m.DataVolDl {
			l = len(s)
			n += 1 + l + sovE2(uint64(l))
		}
	}
	if len(m.DataVolUl) > 0 {
		for _, s := range m.DataVolUl {
			l = len(s)
			n += 1 + l + sovE2(uint64(l))
		}
	}
	if len(m.PktDelayDl) > 0 {
		for _, s := range m.PktDelayDl {
			l = len(s)
			n += 1 + l + sovE2(uint64(l))
		}
	}
	if len(m.PktDiscardRateDl) > 0 {
		for _, s := range m.PktDiscardRateDl {
			l = len(s)
			n += 1 + l + sovE2(uint64(l))
		}
	}
	if len(m.PktLossRateDl) > 0 {
		for _, s := range m.PktLossRateDl {
			l = len(s)
			n += 1 + l + sovE2(uint64(l))
		}
	}
	if len(m.PktLossRateUl) > 0 {
		for _, s := range m.PktLossRateUl {
			l = len(s)
			n += 1 + l + sovE2(uint64(l))
		}
	}
	if len(m.ThroughputDl) > 0 {
		for _, s := range m.ThroughputDl {
			l = len(s)
			n += 1 + l + sovE2(uint64(l))
		}
	}
	if len(m.ThroughputUl) > 0 {
		for _, s := range m.ThroughputUl {
			l = len(s)
			n += 1 + l + sovE2(uint64(l))
		}
	}
	return n
}

func (m *E2RRMConfigAttribute) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Ecgi != nil {
		l = m.Ecgi.Size()
		n += 1 + l + sovE2(uint64(l))
	}
	if len(m.Crnti) > 0 {
		for _, s := range m.Crnti {
			l = len(s)
			n += 1 + l + sovE2(uint64(l))
		}
	}
	if m.PciArfcn != nil {
		l = m.PciArfcn.Size()
		n += 1 + l + sovE2(uint64(l))
	}
	if len(m.PA) > 0 {
		l = 0
		for _, e := range m.PA {
			l += sovE2(uint64(e))
		}
		n += 1 + sovE2(uint64(l)) + l
	}
	if len(m.StartPrbDl) > 0 {
		for _, s := range m.StartPrbDl {
			l = len(s)
			n += 1 + l + sovE2(uint64(l))
		}
	}
	if len(m.EndPrbDl) > 0 {
		for _, s := range m.EndPrbDl {
			l = len(s)
			n += 1 + l + sovE2(uint64(l))
		}
	}
	if len(m.SubFrameBitmaskDl) > 0 {
		for _, s := range m.SubFrameBitmaskDl {
			l = len(s)
			n += 1 + l + sovE2(uint64(l))
		}
	}
	if len(m.P0UePusch) > 0 {
		for _, s := range m.P0UePusch {
			l = len(s)
			n += 1 + l + sovE2(uint64(l))
		}
	}
	if len(m.StartPrbUl) > 0 {
		for _, s := range m.StartPrbUl {
			l = len(s)
			n += 1 + l + sovE2(uint64(l))
		}
	}
	if len(m.EndPrbUl) > 0 {
		for _, s := range m.EndPrbUl {
			l = len(s)
			n += 1 + l + sovE2(uint64(l))
		}
	}
	if len(m.SubFrameBitmaskUl) > 0 {
		for _, s := range m.SubFrameBitmaskUl {
			l = len(s)
			n += 1 + l + sovE2(uint64(l))
		}
	}
	return n
}

func (m *E2RRMConfigStatusAttribute) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Ecgi != nil {
		l = m.Ecgi.Size()
		n += 1 + l + sovE2(uint64(l))
	}
	if len(m.Crnti) > 0 {
		for _, s := range m.Crnti {
			l = len(s)
			n += 1 + l + sovE2(uint64(l))
		}
	}
	if len(m.Status) > 0 {
		l = 0
		for _, e := range m.Status {
			l += sovE2(uint64(e))
		}
		n += 1 + sovE2(uint64(l)) + l
	}
	return n
}

func (m *E2CACap) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Band)
	if l > 0 {
		n += 1 + l + sovE2(uint64(l))
	}
	if m.Caclassdl != 0 {
		n += 1 + sovE2(uint64(m.Caclassdl))
	}
	if m.Caclassul != 0 {
		n += 1 + sovE2(uint64(m.Caclassul))
	}
	l = len(m.CrossCarrierSched)
	if l > 0 {
		n += 1 + l + sovE2(uint64(l))
	}
	return n
}

func (m *E2DCCap) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DrbTypeSplit != 0 {
		n += 1 + sovE2(uint64(m.DrbTypeSplit))
	}
	return n
}

func (m *E2UECapabilityEnquiryAttribute) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Crnti)
	if l > 0 {
		n += 1 + l + sovE2(uint64(l))
	}
	if m.Ecgi != nil {
		l = m.Ecgi.Size()
		n += 1 + l + sovE2(uint64(l))
	}
	return n
}

func (m *E2UECapabilityInfoAttribute) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Crnti)
	if l > 0 {
		n += 1 + l + sovE2(uint64(l))
	}
	if m.Ecgi != nil {
		l = m.Ecgi.Size()
		n += 1 + l + sovE2(uint64(l))
	}
	if m.CaCap != nil {
		l = m.CaCap.Size()
		n += 1 + l + sovE2(uint64(l))
	}
	if m.DcCap != nil {
		l = m.DcCap.Size()
		n += 1 + l + sovE2(uint64(l))
	}
	return n
}

func (m *E2PropScell) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PciArfcn != nil {
		l = m.PciArfcn.Size()
		n += 1 + l + sovE2(uint64(l))
	}
	l = len(m.CrossCarrierSchedEnable)
	if l > 0 {
		n += 1 + l + sovE2(uint64(l))
	}
	if m.CaDirection != 0 {
		n += 1 + sovE2(uint64(m.CaDirection))
	}
	l = len(m.DeactTimer)
	if l > 0 {
		n += 1 + l + sovE2(uint64(l))
	}
	return n
}

func (m *E2ScellAddAttribute) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Crnti)
	if l > 0 {
		n += 1 + l + sovE2(uint64(l))
	}
	if m.Ecgi != nil {
		l = m.Ecgi.Size()
		n += 1 + l + sovE2(uint64(l))
	}
	if len(m.ScellsProp) > 0 {
		for _, e := range m.ScellsProp {
			l = e.Size()
			n += 1 + l + sovE2(uint64(l))
		}
	}
	return n
}

func (m *E2ScellAddStatusAttribute) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Crnti)
	if l > 0 {
		n += 1 + l + sovE2(uint64(l))
	}
	if m.Ecgi != nil {
		l = m.Ecgi.Size()
		n += 1 + l + sovE2(uint64(l))
	}
	if len(m.ScellsInd) > 0 {
		for _, e := range m.ScellsInd {
			l = e.Size()
			n += 1 + l + sovE2(uint64(l))
		}
	}
	if len(m.Status) > 0 {
		l = 0
		for _, e := range m.Status {
			l += sovE2(uint64(e))
		}
		n += 1 + sovE2(uint64(l)) + l
	}
	return n
}

func (m *E2ScellDeleteAttribute) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Crnti)
	if l > 0 {
		n += 1 + l + sovE2(uint64(l))
	}
	if m.Ecgi != nil {
		l = m.Ecgi.Size()
		n += 1 + l + sovE2(uint64(l))
	}
	if len(m.ScellsInd) > 0 {
		for _, e := range m.ScellsInd {
			l = e.Size()
			n += 1 + l + sovE2(uint64(l))
		}
	}
	return n
}

func (m *E2SeNBAddAttribute) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Crnti)
	if l > 0 {
		n += 1 + l + sovE2(uint64(l))
	}
	if m.MEcgi != nil {
		l = m.MEcgi.Size()
		n += 1 + l + sovE2(uint64(l))
	}
	if m.SEcgi != nil {
		l = m.SEcgi.Size()
		n += 1 + l + sovE2(uint64(l))
	}
	return n
}

func (m *E2SeNBAddStatusAttribute) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Crnti)
	if l > 0 {
		n += 1 + l + sovE2(uint64(l))
	}
	if m.Ecgi != nil {
		l = m.Ecgi.Size()
		n += 1 + l + sovE2(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovE2(uint64(m.Status))
	}
	return n
}

func (m *E2SeNBDeleteAttribute) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Crnti)
	if l > 0 {
		n += 1 + l + sovE2(uint64(l))
	}
	if m.MEcgi != nil {
		l = m.MEcgi.Size()
		n += 1 + l + sovE2(uint64(l))
	}
	if m.SEcgi != nil {
		l = m.SEcgi.Size()
		n += 1 + l + sovE2(uint64(l))
	}
	return n
}

func (m *E2TrafficSplitPercentage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Ecgi != nil {
		l = m.Ecgi.Size()
		n += 1 + l + sovE2(uint64(l))
	}
	l = len(m.TrafficPercentageDl)
	if l > 0 {
		n += 1 + l + sovE2(uint64(l))
	}
	l = len(m.TrafficPercentageUl)
	if l > 0 {
		n += 1 + l + sovE2(uint64(l))
	}
	return n
}

func (m *E2TrafficSplitConfigAttribute) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Crnti)
	if l > 0 {
		n += 1 + l + sovE2(uint64(l))
	}
	if m.Ecgi != nil {
		l = m.Ecgi.Size()
		n += 1 + l + sovE2(uint64(l))
	}
	if len(m.TrafficSplitPercentage) > 0 {
		for _, e := range m.TrafficSplitPercentage {
			l = e.Size()
			n += 1 + l + sovE2(uint64(l))
		}
	}
	return n
}

func sovE2(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozE2(x uint64) (n int) {
	return sovE2(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *E2MessageHeader) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowE2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: E2MessageHeader: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: E2MessageHeader: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageType", wireType)
			}
			m.MessageType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MessageType |= E2MessageType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipE2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthE2
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthE2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *E2MessagePayload) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowE2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: E2MessagePayload: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: E2MessagePayload: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CellConfigRequestAttribute", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthE2
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthE2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &E2CellConfigRequestAttribute{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Attributes = &E2MessagePayload_CellConfigRequestAttribute{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CellConfigReportAttribute", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthE2
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthE2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &E2CellConfigReportAttribute{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Attributes = &E2MessagePayload_CellConfigReportAttribute{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UEAdmissionRequestAttribute", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthE2
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthE2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &E2UEAdmissionRequestAttribute{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Attributes = &E2MessagePayload_UEAdmissionRequestAttribute{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UEAdmissionResponseAttribute", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthE2
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthE2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &E2UEAdmissionResponseAttribute{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Attributes = &E2MessagePayload_UEAdmissionResponseAttribute{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UEAdmissionStatusAttribute", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthE2
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthE2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &E2UEAdmissionStatusAttribute{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Attributes = &E2MessagePayload_UEAdmissionStatusAttribute{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UEContextUpdateAttribute", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthE2
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthE2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &E2UEContextUpdateAttribute{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Attributes = &E2MessagePayload_UEContextUpdateAttribute{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UEReconfigIndAttribute", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthE2
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthE2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &E2UEReconfigIndAttribute{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Attributes = &E2MessagePayload_UEReconfigIndAttribute{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UEReleaseIndAttribute", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthE2
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthE2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &E2UEReleaseIndAttribute{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Attributes = &E2MessagePayload_UEReleaseIndAttribute{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BearerAdmissionRequestAttribute", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthE2
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthE2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &E2BearerAdmissionRequestAttribute{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Attributes = &E2MessagePayload_BearerAdmissionRequestAttribute{v}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BearerAdmissionResponseAttribute", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthE2
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthE2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &E2BearerAdmissionResponseAttribute{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Attributes = &E2MessagePayload_BearerAdmissionResponseAttribute{v}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BearerAdmissionStatusAttribute", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthE2
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthE2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &E2BearerAdmissionStatusAttribute{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Attributes = &E2MessagePayload_BearerAdmissionStatusAttribute{v}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BearerReleaseIndAttribute", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthE2
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthE2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &E2BearerReleaseIndAttribute{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Attributes = &E2MessagePayload_BearerReleaseIndAttribute{v}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HORequestAttribute", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthE2
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthE2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &E2HORequestAttribute{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Attributes = &E2MessagePayload_HORequestAttribute{v}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HOFailureAttribute", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthE2
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthE2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &E2HOFailureAttribute{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Attributes = &E2MessagePayload_HOFailureAttribute{v}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HOCompleteAttribute", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthE2
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthE2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &E2HOCompleteAttribute{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Attributes = &E2MessagePayload_HOCompleteAttribute{v}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HOCauseAttribute", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthE2
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthE2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &E2HOCauseAttribute{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Attributes = &E2MessagePayload_HOCauseAttribute{v}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RRCMeasConfigAttribute", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthE2
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthE2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &E2RRCMeasConfigAttribute{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Attributes = &E2MessagePayload_RRCMeasConfigAttribute{v}
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RxSigMeasReportAttribute", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthE2
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthE2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &E2RxSigMeasReportAttribute{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Attributes = &E2MessagePayload_RxSigMeasReportAttribute{v}
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field L2MeasConfigAttribute", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthE2
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthE2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &E2L2MeasConfigAttribute{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Attributes = &E2MessagePayload_L2MeasConfigAttribute{v}
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RadioMeasReportPerU", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthE2
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthE2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &E2RadioMeasReportPerUEAttribute{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Attributes = &E2MessagePayload_RadioMeasReportPerU{v}
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RadioMeasReportPerCellAttribute", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthE2
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthE2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &E2RadioMeasReportPerCellAttribute{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Attributes = &E2MessagePayload_RadioMeasReportPerCellAttribute{v}
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SchedMeasReportPerUEAttribute", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthE2
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthE2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &E2SchedMeasReportPerUEAttribute{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Attributes = &E2MessagePayload_SchedMeasReportPerUEAttribute{v}
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SchedMeasReportPerCellAttribute", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthE2
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthE2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &E2SchedMeasReportPerCellAttribute{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Attributes = &E2MessagePayload_SchedMeasReportPerCellAttribute{v}
			iNdEx = postIndex
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PDCPMeasReportPerUeAttribute", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthE2
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthE2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &E2PDCPMeasReportPerUeAttribute{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Attributes = &E2MessagePayload_PDCPMeasReportPerUeAttribute{v}
			iNdEx = postIndex
		case 25:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RRMConfigAttribute", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthE2
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthE2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &E2RRMConfigAttribute{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Attributes = &E2MessagePayload_RRMConfigAttribute{v}
			iNdEx = postIndex
		case 26:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RRMConfigStatusAttribute", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthE2
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthE2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &E2RRMConfigStatusAttribute{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Attributes = &E2MessagePayload_RRMConfigStatusAttribute{v}
			iNdEx = postIndex
		case 27:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UECapabilityEnquiryAttribute", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthE2
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthE2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &E2UECapabilityEnquiryAttribute{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Attributes = &E2MessagePayload_UECapabilityEnquiryAttribute{v}
			iNdEx = postIndex
		case 28:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UECapabilityInfoAttribute", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthE2
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthE2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &E2UECapabilityInfoAttribute{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Attributes = &E2MessagePayload_UECapabilityInfoAttribute{v}
			iNdEx = postIndex
		case 29:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScellAddAttribute", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthE2
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthE2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &E2ScellAddAttribute{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Attributes = &E2MessagePayload_ScellAddAttribute{v}
			iNdEx = postIndex
		case 30:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScellAddStatusAttribute", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthE2
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthE2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &E2ScellAddStatusAttribute{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Attributes = &E2MessagePayload_ScellAddStatusAttribute{v}
			iNdEx = postIndex
		case 31:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScellDeleteAttribute", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthE2
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthE2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &E2ScellDeleteAttribute{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Attributes = &E2MessagePayload_ScellDeleteAttribute{v}
			iNdEx = postIndex
		case 32:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeNBAddAttribute", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthE2
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthE2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &E2SeNBAddAttribute{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Attributes = &E2MessagePayload_SeNBAddAttribute{v}
			iNdEx = postIndex
		case 33:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeNBAddStatusAttribute", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthE2
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthE2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &E2SeNBAddStatusAttribute{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Attributes = &E2MessagePayload_SeNBAddStatusAttribute{v}
			iNdEx = postIndex
		case 34:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeNBDeleteAttribute", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthE2
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthE2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &E2SeNBDeleteAttribute{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Attributes = &E2MessagePayload_SeNBDeleteAttribute{v}
			iNdEx = postIndex
		case 35:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrafficSplitConfigAttribute", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthE2
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthE2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &E2TrafficSplitConfigAttribute{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Attributes = &E2MessagePayload_TrafficSplitConfigAttribute{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipE2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthE2
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthE2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *E2Message) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowE2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: E2Message: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: E2Message: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthE2
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthE2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &E2MessageHeader{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthE2
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthE2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Payload == nil {
				m.Payload = &E2MessagePayload{}
			}
			if err := m.Payload.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipE2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthE2
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthE2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ServiceResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowE2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServiceResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServiceResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResultCode", wireType)
			}
			m.ResultCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ResultCode |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResultMessage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthE2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthE2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResultMessage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipE2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthE2
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthE2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *E2ECGI) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowE2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: E2ECGI: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: E2ECGI: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlmnId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthE2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthE2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlmnId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ecid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthE2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthE2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ecid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipE2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthE2
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthE2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *E2CandScell) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowE2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: E2CandScell: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: E2CandScell: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pci", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthE2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthE2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pci = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EarfcnDl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthE2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthE2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EarfcnDl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipE2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthE2
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthE2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *E2CellConfigRequestAttribute) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowE2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: E2CellConfigRequestAttribute: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: E2CellConfigRequestAttribute: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ecgi", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthE2
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthE2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Ecgi == nil {
				m.Ecgi = &E2ECGI{}
			}
			if err := m.Ecgi.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipE2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthE2
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthE2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *E2CellConfigReportAttribute) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowE2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: E2CellConfigReportAttribute: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: E2CellConfigReportAttribute: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ecgi", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthE2
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthE2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Ecgi == nil {
				m.Ecgi = &E2ECGI{}
			}
			if err := m.Ecgi.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pci", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthE2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthE2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pci = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CandScells", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthE2
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthE2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CandScells = append(m.CandScells, &E2CandScell{})
			if err := m.CandScells[len(m.CandScells)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EarfcnDl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthE2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthE2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EarfcnDl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EarfcnUl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthE2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthE2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EarfcnUl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RbsPerTtiDl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthE2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthE2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RbsPerTtiDl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RbsPerTtiUl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthE2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthE2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RbsPerTtiUl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumTxAntenna", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthE2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthE2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NumTxAntenna = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DuplexMode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthE2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthE2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DuplexMode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxNumConnectedUes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthE2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthE2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MaxNumConnectedUes = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxNumConnectedBearers", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthE2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthE2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MaxNumConnectedBearers = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxNumUesSchedPerTtiDl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthE2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthE2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MaxNumUesSchedPerTtiDl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxNumUesSchedPerTtiUl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthE2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthE2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MaxNumUesSchedPerTtiUl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DlfsSchedEnable", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthE2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthE2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DlfsSchedEnable = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipE2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthE2
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthE2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *E2UEAdmissionRequestAttribute) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowE2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: E2UEAdmissionRequestAttribute: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: E2UEAdmissionRequestAttribute: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Crnti", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthE2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthE2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Crnti = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ecgi", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthE2
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthE2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Ecgi == nil {
				m.Ecgi = &E2ECGI{}
			}
			if err := m.Ecgi.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdmissionEstCause", wireType)
			}
			m.AdmissionEstCause = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AdmissionEstCause |= E2AdmEstCause(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipE2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthE2
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthE2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *E2UEAdmissionResponseAttribute) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowE2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: E2UEAdmissionResponseAttribute: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: E2UEAdmissionResponseAttribute: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Crnti", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthE2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthE2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Crnti = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ecgi", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthE2
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthE2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Ecgi == nil {
				m.Ecgi = &E2ECGI{}
			}
			if err := m.Ecgi.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdmissionEstResponse", wireType)
			}
			m.AdmissionEstResponse = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AdmissionEstResponse |= E2SuccessOrFailure(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipE2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthE2
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthE2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *E2UEAdmissionStatusAttribute) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowE2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: E2UEAdmissionStatusAttribute: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: E2UEAdmissionStatusAttribute: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Crnti", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthE2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthE2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Crnti = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ecgi", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthE2
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthE2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Ecgi == nil {
				m.Ecgi = &E2ECGI{}
			}
			if err := m.Ecgi.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdmissionEstStatus", wireType)
			}
			m.AdmissionEstStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AdmissionEstStatus |= E2SuccessOrFailure(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipE2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthE2
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthE2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *E2UEContextUpdateAttribute) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowE2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: E2UEContextUpdateAttribute: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: E2UEContextUpdateAttribute: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Crnti", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthE2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthE2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Crnti = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ecgi", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthE2
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthE2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Ecgi == nil {
				m.Ecgi = &E2ECGI{}
			}
			if err := m.Ecgi.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MmeUeS1ApId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthE2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthE2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MmeUeS1ApId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnbUeS1ApId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthE2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthE2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EnbUeS1ApId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Imsi", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthE2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthE2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Imsi = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipE2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthE2
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthE2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *E2UEReconfigIndAttribute) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowE2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: E2UEReconfigIndAttribute: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: E2UEReconfigIndAttribute: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CrntiOld", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthE2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthE2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CrntiOld = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ecgi", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthE2
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthE2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Ecgi == nil {
				m.Ecgi = &E2ECGI{}
			}
			if err := m.Ecgi.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CrntiNew", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthE2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthE2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CrntiNew = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReconfigCause", wireType)
			}
			m.ReconfigCause = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReconfigCause |= E2ReconfigCause(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipE2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthE2
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthE2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *E2UEReleaseIndAttribute) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowE2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: E2UEReleaseIndAttribute: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: E2UEReleaseIndAttribute: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Crnti", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthE2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthE2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Crnti = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ecgi", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthE2
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthE2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Ecgi == nil {
				m.Ecgi = &E2ECGI{}
			}
			if err := m.Ecgi.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReleaseCause", wireType)
			}
			m.ReleaseCause = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReleaseCause |= E2ReleaseCause(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipE2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthE2
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthE2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *E2UEAMBR) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowE2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: E2UEAMBR: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: E2UEAMBR: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AmbrDl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthE2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthE2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AmbrDl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AmbrUl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthE2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthE2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AmbrUl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipE2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthE2
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthE2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *E2ERABParamsItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowE2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: E2ERABParamsItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: E2ERABParamsItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthE2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthE2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Direction", wireType)
			}
			m.Direction = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Direction |= E2ERABDirection(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= E2ERABType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Qci", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthE2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthE2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Qci = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Arp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthE2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthE2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Arp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GbrDl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthE2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthE2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GbrDl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GbrUl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthE2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthE2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GbrUl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MbrDl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthE2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthE2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MbrDl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MbrUl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthE2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthE2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MbrUl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipE2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthE2
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthE2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *E2ERABResponseItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowE2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: E2ERABResponseItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: E2ERABResponseItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthE2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthE2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Decision", wireType)
			}
			m.Decision = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Decision |= E2SuccessOrFailure(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipE2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthE2
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthE2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *E2BearerAdmissionRequestAttribute) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowE2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: E2BearerAdmissionRequestAttribute: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: E2BearerAdmissionRequestAttribute: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Crnti", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthE2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthE2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Crnti = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ecgi", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthE2
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthE2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Ecgi == nil {
				m.Ecgi = &E2ECGI{}
			}
			if err := m.Ecgi.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UeAmbr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthE2
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthE2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UeAmbr == nil {
				m.UeAmbr = &E2UEAMBR{}
			}
			if err := m.UeAmbr.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumErabsList", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthE2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthE2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NumErabsList = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErabsParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthE2
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthE2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ErabsParams = append(m.ErabsParams, &E2ERABParamsItem{})
			if err := m.ErabsParams[len(m.ErabsParams)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipE2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthE2
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthE2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *E2BearerAdmissionResponseAttribute) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowE2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: E2BearerAdmissionResponseAttribute: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: E2BearerAdmissionResponseAttribute: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Crnti", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthE2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthE2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Crnti = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ecgi", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthE2
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthE2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Ecgi == nil {
				m.Ecgi = &E2ECGI{}
			}
			if err := m.Ecgi.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumErabsList", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthE2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthE2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NumErabsList = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErabResponse", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthE2
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthE2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ErabResponse = append(m.ErabResponse, &E2ERABResponseItem{})
			if err := m.ErabResponse[len(m.ErabResponse)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipE2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthE2
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthE2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *E2BearerAdmissionStatusAttribute) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowE2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: E2BearerAdmissionStatusAttribute: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: E2BearerAdmissionStatusAttribute: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Crnti", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthE2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthE2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Crnti = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ecgi", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthE2
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthE2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Ecgi == nil {
				m.Ecgi = &E2ECGI{}
			}
			if err := m.Ecgi.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumErabsList", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthE2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthE2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NumErabsList = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErabStatus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthE2
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthE2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ErabStatus = append(m.ErabStatus, &E2ERABResponseItem{})
			if err := m.ErabStatus[len(m.ErabStatus)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipE2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthE2
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthE2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *E2BearerReleaseIndAttribute) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowE2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: E2BearerReleaseIndAttribute: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: E2BearerReleaseIndAttribute: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Crnti", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthE2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthE2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Crnti = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ecgi", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthE2
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthE2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Ecgi == nil {
				m.Ecgi = &E2ECGI{}
			}
			if err := m.Ecgi.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumErabsList", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthE2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthE2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NumErabsList = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErabIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthE2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthE2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ErabIds = append(m.ErabIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipE2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthE2
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthE2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *E2HORequestAttribute) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowE2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: E2HORequestAttribute: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: E2HORequestAttribute: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Crnti", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthE2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthE2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Crnti = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EcgiS", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthE2
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthE2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EcgiS == nil {
				m.EcgiS = &E2ECGI{}
			}
			if err := m.EcgiS.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EcgiT", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthE2
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthE2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EcgiT == nil {
				m.EcgiT = &E2ECGI{}
			}
			if err := m.EcgiT.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipE2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthE2
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthE2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *E2HOFailureAttribute) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowE2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: E2HOFailureAttribute: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: E2HOFailureAttribute: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Crnti", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthE2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthE2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Crnti = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EcgiS", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthE2
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthE2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EcgiS == nil {
				m.EcgiS = &E2ECGI{}
			}
			if err := m.EcgiS.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HoFailureCause", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthE2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthE2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HoFailureCause = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipE2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthE2
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthE2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *E2HOCompleteAttribute) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowE2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: E2HOCompleteAttribute: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: E2HOCompleteAttribute: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CrntiNew", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthE2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthE2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CrntiNew = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EcgiS", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthE2
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthE2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EcgiS == nil {
				m.EcgiS = &E2ECGI{}
			}
			if err := m.EcgiS.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EcgiT", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthE2
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthE2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EcgiT == nil {
				m.EcgiT = &E2ECGI{}
			}
			if err := m.EcgiT.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipE2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthE2
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthE2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *E2HOCauseAttribute) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowE2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: E2HOCauseAttribute: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: E2HOCauseAttribute: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Crnti", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthE2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthE2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Crnti = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EcgiS", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthE2
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthE2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EcgiS == nil {
				m.EcgiS = &E2ECGI{}
			}
			if err := m.EcgiS.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EcgiT", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthE2
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthE2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EcgiT == nil {
				m.EcgiT = &E2ECGI{}
			}
			if err := m.EcgiT.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HoCause", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthE2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthE2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HoCause = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HoTrigger", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthE2
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthE2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HoTrigger = append(m.HoTrigger, &E2RXSigReport{})
			if err := m.HoTrigger[len(m.HoTrigger)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipE2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthE2
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthE2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *E2MeasCell) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowE2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: E2MeasCell: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: E2MeasCell: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pci", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthE2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthE2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pci = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CellIndividualOffset", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthE2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthE2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CellIndividualOffset = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipE2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthE2
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthE2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *E2MeasObject) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowE2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: E2MeasObject: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: E2MeasObject: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DlFreq", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthE2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthE2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DlFreq = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MeasCells", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthE2
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthE2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MeasCells = append(m.MeasCells, &E2MeasCell{})
			if err := m.MeasCells[len(m.MeasCells)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipE2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthE2
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthE2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *E2ReportParamChoice) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowE2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: E2ReportParamChoice: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: E2ReportParamChoice: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PerParam", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthE2
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthE2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &E2PerParam{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Choice = &E2ReportParamChoice_PerParam{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field A1Param", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthE2
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthE2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &E2A1Param{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Choice = &E2ReportParamChoice_A1Param{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field A2Param", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthE2
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthE2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &E2A2Param{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Choice = &E2ReportParamChoice_A2Param{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field A3Param", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthE2
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthE2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &E2A3Param{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Choice = &E2ReportParamChoice_A3Param{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field A4Param", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthE2
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthE2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &E2A4Param{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Choice = &E2ReportParamChoice_A4Param{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field A5Param", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthE2
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthE2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &E2A5Param{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Choice = &E2ReportParamChoice_A5Param{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field A6Param", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthE2
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthE2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &E2A6Param{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Choice = &E2ReportParamChoice_A6Param{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipE2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthE2
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthE2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *E2ThresholdEUTRAChoice) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowE2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: E2ThresholdEUTRAChoice: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: E2ThresholdEUTRAChoice: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThresholdRSRP", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthE2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthE2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Choice = &E2ThresholdEUTRAChoice_ThresholdRSRP{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThresholdRSRQ", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthE2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthE2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Choice = &E2ThresholdEUTRAChoice_ThresholdRSRQ{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipE2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthE2
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthE2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *E2ThreasholdEUTRA) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowE2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: E2ThreasholdEUTRA: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: E2ThreasholdEUTRA: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Present", wireType)
			}
			m.Present = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Present |= E2ThresholdEUTRAPR(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Choice", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthE2
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthE2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Choice == nil {
				m.Choice = &E2ThresholdEUTRAChoice{}
			}
			if err := m.Choice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipE2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthE2
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthE2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *E2PerParam) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowE2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: E2PerParam: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: E2PerParam: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReportIntervalMs", wireType)
			}
			m.ReportIntervalMs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReportIntervalMs |= E2PerParamReportIntervalMs(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipE2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthE2
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthE2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *E2A1Param) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowE2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: E2A1Param: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: E2A1Param: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field A1Threshold", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthE2
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthE2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.A1Threshold == nil {
				m.A1Threshold = &E2ThreasholdEUTRA{}
			}
			if err := m.A1Threshold.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipE2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthE2
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthE2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *E2A2Param) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowE2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: E2A2Param: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: E2A2Param: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field A2Threshold", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthE2
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthE2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.A2Threshold == nil {
				m.A2Threshold = &E2ThreasholdEUTRA{}
			}
			if err := m.A2Threshold.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipE2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthE2
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthE2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *E2A3Param) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowE2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: E2A3Param: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: E2A3Param: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field A3Offset", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthE2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthE2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.A3Offset = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipE2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthE2
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthE2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *E2A4Param) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowE2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: E2A4Param: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: E2A4Param: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field A4Threshold", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthE2
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthE2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.A4Threshold == nil {
				m.A4Threshold = &E2ThreasholdEUTRA{}
			}
			if err := m.A4Threshold.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipE2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthE2
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthE2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *E2A5Param) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowE2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: E2A5Param: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: E2A5Param: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field A5Threshold1", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthE2
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthE2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.A5Threshold1 == nil {
				m.A5Threshold1 = &E2ThreasholdEUTRA{}
			}
			if err := m.A5Threshold1.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field A5Threshold2", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthE2
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthE2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.A5Threshold2 == nil {
				m.A5Threshold2 = &E2ThreasholdEUTRA{}
			}
			if err := m.A5Threshold2.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipE2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthE2
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthE2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *E2A6Param) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowE2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: E2A6Param: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: E2A6Param: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field A6Offset", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthE2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthE2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.A6Offset = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipE2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthE2
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthE2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *E2ReportParam) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowE2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: E2ReportParam: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: E2ReportParam: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Present", wireType)
			}
			m.Present = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Present |= E2ReportParamPR(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Choice", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthE2
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthE2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Choice == nil {
				m.Choice = &E2ReportParamChoice{}
			}
			if err := m.Choice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hysteresis", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthE2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthE2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hysteresis = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timetotrigger", wireType)
			}
			m.Timetotrigger = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timetotrigger |= E2TimeToTrigger(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipE2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthE2
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthE2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *E2ReportConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowE2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: E2ReportConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: E2ReportConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReportParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthE2
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthE2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ReportParams == nil {
				m.ReportParams = &E2ReportParam{}
			}
			if err := m.ReportParams.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TriggerQuantity", wireType)
			}
			m.TriggerQuantity = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TriggerQuantity |= E2TriggerQuantity(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReportQuality", wireType)
			}
			m.ReportQuality = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReportQuality |= E2ReportQuality(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipE2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthE2
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthE2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *E2AddMeasId) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowE2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: E2AddMeasId: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: E2AddMeasId: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddMeasId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthE2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthE2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AddMeasId = append(m.AddMeasId, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipE2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthE2
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthE2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *E2DelMeasId) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowE2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: E2DelMeasId: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: E2DelMeasId: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelMeasId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthE2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthE2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DelMeasId = append(m.DelMeasId, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipE2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthE2
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthE2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *E2MeasIdActionChoice) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowE2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: E2MeasIdActionChoice: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: E2MeasIdActionChoice: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddMeasId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthE2
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthE2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &E2AddMeasId{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Choice = &E2MeasIdActionChoice_AddMeasId{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelMeasId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthE2
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthE2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &E2DelMeasId{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Choice = &E2MeasIdActionChoice_DelMeasId{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hototarget", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthE2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthE2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Choice = &E2MeasIdActionChoice_Hototarget{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipE2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthE2
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthE2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *E2MeasIdAction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowE2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: E2MeasIdAction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: E2MeasIdAction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Present", wireType)
			}
			m.Present = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Present |= E2MeasIdActionPR(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Choice", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthE2
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthE2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Choice == nil {
				m.Choice = &E2MeasIdActionChoice{}
			}
			if err := m.Choice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipE2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthE2
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthE2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *E2MeasID) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowE2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: E2MeasID: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: E2MeasID: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MeasObjectId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthE2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthE2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MeasObjectId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReportConfigId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthE2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthE2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReportConfigId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Action", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthE2
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthE2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Action == nil {
				m.Action = &E2MeasIdAction{}
			}
			if err := m.Action.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipE2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthE2
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthE2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *E2RRCMeasConfigAttribute) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowE2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: E2RRCMeasConfigAttribute: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: E2RRCMeasConfigAttribute: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ecgi", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthE2
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthE2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Ecgi == nil {
				m.Ecgi = &E2ECGI{}
			}
			if err := m.Ecgi.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Crnti", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthE2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthE2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Crnti = append(m.Crnti, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MeasObjects", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthE2
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthE2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MeasObjects = append(m.MeasObjects, &E2MeasObject{})
			if err := m.MeasObjects[len(m.MeasObjects)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReportConfigs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthE2
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthE2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReportConfigs = append(m.ReportConfigs, &E2ReportConfig{})
			if err := m.ReportConfigs[len(m.ReportConfigs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MeasIds", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthE2
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthE2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MeasIds = append(m.MeasIds, &E2MeasID{})
			if err := m.MeasIds[len(m.MeasIds)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipE2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthE2
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthE2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *E2PCIARFCN) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowE2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: E2PCIARFCN: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: E2PCIARFCN: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pci", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthE2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthE2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pci = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EarfcnDl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthE2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthE2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EarfcnDl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipE2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthE2
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthE2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *E2RXSigReport) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowE2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: E2RXSigReport: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: E2RXSigReport: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PciArfcn", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthE2
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthE2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PciArfcn == nil {
				m.PciArfcn = &E2PCIARFCN{}
			}
			if err := m.PciArfcn.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ecgi", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthE2
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthE2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Ecgi == nil {
				m.Ecgi = &E2ECGI{}
			}
			if err := m.Ecgi.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rsrp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthE2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthE2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rsrp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rsrq", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthE2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthE2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rsrq = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipE2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthE2
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthE2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *E2RxSigMeasReportAttribute) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowE2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: E2RxSigMeasReportAttribute: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: E2RxSigMeasReportAttribute: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Crnti", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthE2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthE2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Crnti = append(m.Crnti, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ecgi", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthE2
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthE2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Ecgi == nil {
				m.Ecgi = &E2ECGI{}
			}
			if err := m.Ecgi.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CellMeasReport", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthE2
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthE2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CellMeasReport = append(m.CellMeasReport, &E2RXSigReport{})
			if err := m.CellMeasReport[len(m.CellMeasReport)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipE2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthE2
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthE2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *E2L2ReportInterval) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowE2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: E2L2ReportInterval: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: E2L2ReportInterval: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TRadioMeasReportPerUe", wireType)
			}
			m.TRadioMeasReportPerUe = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TRadioMeasReportPerUe |= E2L2MeasReportIntervals(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TRadioMeasReportPerCell", wireType)
			}
			m.TRadioMeasReportPerCell = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TRadioMeasReportPerCell |= E2L2MeasReportIntervals(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TSchedMeasReportPerUe", wireType)
			}
			m.TSchedMeasReportPerUe = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TSchedMeasReportPerUe |= E2L2MeasReportIntervals(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TSchedMeasReportPerCell", wireType)
			}
			m.TSchedMeasReportPerCell = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TSchedMeasReportPerCell |= E2L2MeasReportIntervals(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TPdcpMeasReportPerUe", wireType)
			}
			m.TPdcpMeasReportPerUe = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TPdcpMeasReportPerUe |= E2L2MeasReportIntervals(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipE2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthE2
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthE2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *E2L2MeasConfigAttribute) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowE2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: E2L2MeasConfigAttribute: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: E2L2MeasConfigAttribute: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ecgi", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthE2
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthE2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Ecgi == nil {
				m.Ecgi = &E2ECGI{}
			}
			if err := m.Ecgi.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Crnti", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthE2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthE2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Crnti = append(m.Crnti, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReportIntervals", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthE2
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthE2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ReportIntervals == nil {
				m.ReportIntervals = &E2L2ReportInterval{}
			}
			if err := m.ReportIntervals.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipE2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthE2
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthE2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *E2RadioRepPerServCell) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowE2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: E2RadioRepPerServCell: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: E2RadioRepPerServCell: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ecgi", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthE2
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthE2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Ecgi == nil {
				m.Ecgi = &E2ECGI{}
			}
			if err := m.Ecgi.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CqiHist", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthE2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthE2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CqiHist = append(m.CqiHist, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RiHist", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthE2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthE2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RiHist = append(m.RiHist, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PuschSinrHist", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthE2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthE2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PuschSinrHist = append(m.PuschSinrHist, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PucchSinrHist", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthE2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthE2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PucchSinrHist = append(m.PucchSinrHist, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipE2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthE2
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthE2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *E2RadioMeasReportPerUEAttribute) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowE2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: E2RadioMeasReportPerUEAttribute: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: E2RadioMeasReportPerUEAttribute: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ecgi", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthE2
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthE2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Ecgi == nil {
				m.Ecgi = &E2ECGI{}
			}
			if err := m.Ecgi.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Crnti", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthE2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthE2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Crnti = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RadioReportServCells", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthE2
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthE2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RadioReportServCells = append(m.RadioReportServCells, &E2RadioRepPerServCell{})
			if err := m.RadioReportServCells[len(m.RadioReportServCells)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipE2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthE2
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthE2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *E2RadioMeasReportPerCellAttribute) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowE2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: E2RadioMeasReportPerCellAttribute: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: E2RadioMeasReportPerCellAttribute: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ecgi", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthE2
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthE2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Ecgi == nil {
				m.Ecgi = &E2ECGI{}
			}
			if err := m.Ecgi.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PuschIntfPwrHist", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthE2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthE2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PuschIntfPwrHist = append(m.PuschIntfPwrHist, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PucchIntfPowerHist", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthE2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthE2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PucchIntfPowerHist = append(m.PucchIntfPowerHist, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipE2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthE2
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthE2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *E2PRBUsage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowE2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: E2PRBUsage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: E2PRBUsage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrbUsageDl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthE2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthE2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PrbUsageDl = append(m.PrbUsageDl, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrbUsageUl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthE2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthE2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PrbUsageUl = append(m.PrbUsageUl, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipE2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthE2
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthE2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *E2SchedMeasRepPerServCell) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowE2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: E2SchedMeasRepPerServCell: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: E2SchedMeasRepPerServCell: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ecgi", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthE2
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthE2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Ecgi == nil {
				m.Ecgi = &E2ECGI{}
			}
			if err := m.Ecgi.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QciVals", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthE2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthE2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QciVals = append(m.QciVals, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrbUsage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthE2
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthE2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PrbUsage == nil {
				m.PrbUsage = &E2PRBUsage{}
			}
			if err := m.PrbUsage.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field McsDl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthE2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthE2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.McsDl = append(m.McsDl, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumSchedTtisDl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthE2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthE2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NumSchedTtisDl = append(m.NumSchedTtisDl, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field McsUl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthE2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthE2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.McsUl = append(m.McsUl, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumSchedTtisUl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthE2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthE2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NumSchedTtisUl = append(m.NumSchedTtisUl, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RankDl1", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthE2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthE2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RankDl1 = append(m.RankDl1, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RankDl2", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthE2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthE2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RankDl2 = append(m.RankDl2, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipE2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthE2
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthE2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *E2SchedMeasReportPerUEAttribute) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowE2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: E2SchedMeasReportPerUEAttribute: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: E2SchedMeasReportPerUEAttribute: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ecgi", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthE2
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthE2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Ecgi == nil {
				m.Ecgi = &E2ECGI{}
			}
			if err := m.Ecgi.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Crnti", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthE2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthE2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Crnti = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SchedReportServCells", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthE2
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthE2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SchedReportServCells = append(m.SchedReportServCells, &E2SchedMeasRepPerServCell{})
			if err := m.SchedReportServCells[len(m.SchedReportServCells)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipE2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthE2
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthE2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *E2SchedMeasReportPerCellAttribute) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowE2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: E2SchedMeasReportPerCellAttribute: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: E2SchedMeasReportPerCellAttribute: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ecgi", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthE2
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthE2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Ecgi == nil {
				m.Ecgi = &E2ECGI{}
			}
			if err := m.Ecgi.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QciVals", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthE2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthE2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QciVals = append(m.QciVals, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrbUsagePcell", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthE2
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthE2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PrbUsagePcell == nil {
				m.PrbUsagePcell = &E2PRBUsage{}
			}
			if err := m.PrbUsagePcell.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrbUsageScell", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthE2
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthE2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PrbUsageScell == nil {
				m.PrbUsageScell = &E2PRBUsage{}
			}
			if err := m.PrbUsageScell.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipE2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthE2
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthE2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *E2PDCPMeasReportPerUeAttribute) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowE2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: E2PDCPMeasReportPerUeAttribute: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: E2PDCPMeasReportPerUeAttribute: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ecgi", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthE2
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthE2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Ecgi == nil {
				m.Ecgi = &E2ECGI{}
			}
			if err := m.Ecgi.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Crnti", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthE2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthE2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Crnti = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QciVals", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthE2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthE2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QciVals = append(m.QciVals, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataVolDl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthE2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthE2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DataVolDl = append(m.DataVolDl, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataVolUl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthE2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthE2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DataVolUl = append(m.DataVolUl, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PktDelayDl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthE2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthE2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PktDelayDl = append(m.PktDelayDl, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PktDiscardRateDl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthE2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthE2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PktDiscardRateDl = append(m.PktDiscardRateDl, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PktLossRateDl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthE2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthE2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PktLossRateDl = append(m.PktLossRateDl, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PktLossRateUl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthE2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthE2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PktLossRateUl = append(m.PktLossRateUl, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThroughputDl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthE2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthE2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ThroughputDl = append(m.ThroughputDl, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThroughputUl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthE2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthE2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ThroughputUl = append(m.ThroughputUl, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipE2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthE2
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthE2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *E2RRMConfigAttribute) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowE2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: E2RRMConfigAttribute: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: E2RRMConfigAttribute: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ecgi", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthE2
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthE2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Ecgi == nil {
				m.Ecgi = &E2ECGI{}
			}
			if err := m.Ecgi.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Crnti", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthE2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthE2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Crnti = append(m.Crnti, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PciArfcn", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthE2
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthE2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PciArfcn == nil {
				m.PciArfcn = &E2PCIARFCN{}
			}
			if err := m.PciArfcn.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType == 0 {
				var v E2XICICPA
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowE2
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= E2XICICPA(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.PA = append(m.PA, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowE2
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthE2
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthE2
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.PA) == 0 {
					m.PA = make([]E2XICICPA, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v E2XICICPA
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowE2
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= E2XICICPA(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.PA = append(m.PA, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field PA", wireType)
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartPrbDl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthE2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthE2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StartPrbDl = append(m.StartPrbDl, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndPrbDl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthE2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthE2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EndPrbDl = append(m.EndPrbDl, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubFrameBitmaskDl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthE2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthE2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubFrameBitmaskDl = append(m.SubFrameBitmaskDl, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field P0UePusch", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthE2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthE2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.P0UePusch = append(m.P0UePusch, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartPrbUl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthE2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthE2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StartPrbUl = append(m.StartPrbUl, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndPrbUl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthE2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthE2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EndPrbUl = append(m.EndPrbUl, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubFrameBitmaskUl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthE2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthE2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubFrameBitmaskUl = append(m.SubFrameBitmaskUl, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipE2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthE2
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthE2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *E2RRMConfigStatusAttribute) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowE2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: E2RRMConfigStatusAttribute: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: E2RRMConfigStatusAttribute: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ecgi", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthE2
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthE2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Ecgi == nil {
				m.Ecgi = &E2ECGI{}
			}
			if err := m.Ecgi.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Crnti", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthE2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthE2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Crnti = append(m.Crnti, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType == 0 {
				var v E2SuccessOrFailure
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowE2
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= E2SuccessOrFailure(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Status = append(m.Status, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowE2
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthE2
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthE2
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.Status) == 0 {
					m.Status = make([]E2SuccessOrFailure, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v E2SuccessOrFailure
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowE2
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= E2SuccessOrFailure(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Status = append(m.Status, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipE2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthE2
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthE2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *E2CACap) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowE2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: E2CACap: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: E2CACap: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Band", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthE2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthE2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Band = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Caclassdl", wireType)
			}
			m.Caclassdl = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Caclassdl |= E2CACapClassDl(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Caclassul", wireType)
			}
			m.Caclassul = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Caclassul |= E2CACapClassUl(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CrossCarrierSched", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthE2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthE2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CrossCarrierSched = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipE2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthE2
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthE2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *E2DCCap) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowE2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: E2DCCap: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: E2DCCap: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DrbTypeSplit", wireType)
			}
			m.DrbTypeSplit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DrbTypeSplit |= E2DCCapDrbType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipE2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthE2
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthE2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *E2UECapabilityEnquiryAttribute) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowE2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: E2UECapabilityEnquiryAttribute: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: E2UECapabilityEnquiryAttribute: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Crnti", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthE2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthE2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Crnti = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ecgi", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthE2
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthE2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Ecgi == nil {
				m.Ecgi = &E2ECGI{}
			}
			if err := m.Ecgi.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipE2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthE2
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthE2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *E2UECapabilityInfoAttribute) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowE2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: E2UECapabilityInfoAttribute: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: E2UECapabilityInfoAttribute: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Crnti", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthE2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthE2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Crnti = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ecgi", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthE2
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthE2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Ecgi == nil {
				m.Ecgi = &E2ECGI{}
			}
			if err := m.Ecgi.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CaCap", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthE2
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthE2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CaCap == nil {
				m.CaCap = &E2CACap{}
			}
			if err := m.CaCap.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DcCap", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthE2
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthE2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DcCap == nil {
				m.DcCap = &E2DCCap{}
			}
			if err := m.DcCap.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipE2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthE2
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthE2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *E2PropScell) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowE2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: E2PropScell: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: E2PropScell: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PciArfcn", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthE2
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthE2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PciArfcn == nil {
				m.PciArfcn = &E2PCIARFCN{}
			}
			if err := m.PciArfcn.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CrossCarrierSchedEnable", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthE2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthE2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CrossCarrierSchedEnable = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CaDirection", wireType)
			}
			m.CaDirection = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CaDirection |= E2CADirection(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeactTimer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthE2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthE2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeactTimer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipE2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthE2
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthE2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *E2ScellAddAttribute) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowE2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: E2ScellAddAttribute: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: E2ScellAddAttribute: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Crnti", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthE2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthE2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Crnti = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ecgi", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthE2
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthE2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Ecgi == nil {
				m.Ecgi = &E2ECGI{}
			}
			if err := m.Ecgi.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScellsProp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthE2
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthE2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ScellsProp = append(m.ScellsProp, &E2PropScell{})
			if err := m.ScellsProp[len(m.ScellsProp)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipE2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthE2
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthE2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *E2ScellAddStatusAttribute) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowE2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: E2ScellAddStatusAttribute: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: E2ScellAddStatusAttribute: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Crnti", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthE2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthE2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Crnti = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ecgi", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthE2
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthE2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Ecgi == nil {
				m.Ecgi = &E2ECGI{}
			}
			if err := m.Ecgi.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScellsInd", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthE2
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthE2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ScellsInd = append(m.ScellsInd, &E2PCIARFCN{})
			if err := m.ScellsInd[len(m.ScellsInd)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType == 0 {
				var v E2SuccessOrFailure
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowE2
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= E2SuccessOrFailure(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Status = append(m.Status, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowE2
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthE2
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthE2
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.Status) == 0 {
					m.Status = make([]E2SuccessOrFailure, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v E2SuccessOrFailure
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowE2
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= E2SuccessOrFailure(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Status = append(m.Status, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipE2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthE2
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthE2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *E2ScellDeleteAttribute) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowE2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: E2ScellDeleteAttribute: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: E2ScellDeleteAttribute: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Crnti", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthE2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthE2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Crnti = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ecgi", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthE2
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthE2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Ecgi == nil {
				m.Ecgi = &E2ECGI{}
			}
			if err := m.Ecgi.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScellsInd", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthE2
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthE2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ScellsInd = append(m.ScellsInd, &E2PCIARFCN{})
			if err := m.ScellsInd[len(m.ScellsInd)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipE2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthE2
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthE2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *E2SeNBAddAttribute) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowE2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: E2SeNBAddAttribute: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: E2SeNBAddAttribute: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Crnti", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthE2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthE2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Crnti = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MEcgi", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthE2
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthE2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MEcgi == nil {
				m.MEcgi = &E2ECGI{}
			}
			if err := m.MEcgi.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SEcgi", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthE2
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthE2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SEcgi == nil {
				m.SEcgi = &E2ECGI{}
			}
			if err := m.SEcgi.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipE2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthE2
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthE2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *E2SeNBAddStatusAttribute) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowE2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: E2SeNBAddStatusAttribute: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: E2SeNBAddStatusAttribute: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Crnti", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthE2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthE2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Crnti = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ecgi", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthE2
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthE2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Ecgi == nil {
				m.Ecgi = &E2ECGI{}
			}
			if err := m.Ecgi.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= E2SuccessOrFailure(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipE2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthE2
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthE2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *E2SeNBDeleteAttribute) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowE2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: E2SeNBDeleteAttribute: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: E2SeNBDeleteAttribute: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Crnti", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthE2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthE2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Crnti = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MEcgi", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthE2
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthE2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MEcgi == nil {
				m.MEcgi = &E2ECGI{}
			}
			if err := m.MEcgi.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SEcgi", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthE2
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthE2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SEcgi == nil {
				m.SEcgi = &E2ECGI{}
			}
			if err := m.SEcgi.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipE2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthE2
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthE2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *E2TrafficSplitPercentage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowE2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: E2TrafficSplitPercentage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: E2TrafficSplitPercentage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ecgi", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthE2
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthE2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Ecgi == nil {
				m.Ecgi = &E2ECGI{}
			}
			if err := m.Ecgi.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrafficPercentageDl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthE2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthE2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TrafficPercentageDl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrafficPercentageUl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthE2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthE2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TrafficPercentageUl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipE2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthE2
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthE2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *E2TrafficSplitConfigAttribute) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowE2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: E2TrafficSplitConfigAttribute: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: E2TrafficSplitConfigAttribute: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Crnti", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthE2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthE2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Crnti = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ecgi", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthE2
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthE2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Ecgi == nil {
				m.Ecgi = &E2ECGI{}
			}
			if err := m.Ecgi.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrafficSplitPercentage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthE2
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthE2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TrafficSplitPercentage = append(m.TrafficSplitPercentage, &E2TrafficSplitPercentage{})
			if err := m.TrafficSplitPercentage[len(m.TrafficSplitPercentage)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipE2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthE2
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthE2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipE2(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowE2
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowE2
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowE2
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthE2
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupE2
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthE2
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthE2        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowE2          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupE2 = fmt.Errorf("proto: unexpected end of group")
)
